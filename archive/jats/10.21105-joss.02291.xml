<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2291</article-id>
<article-id pub-id-type="doi">10.21105/joss.02291</article-id>
<title-group>
<article-title>Frackit: a framework for stochastic fracture network
generation and analysis</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9646-881X</contrib-id>
<string-name>Dennis Gläser</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Bernd Flemisch</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Holger Class</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Rainer Helmig</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Hydromechanics and Modelling of Hydrosystems,
University of Stuttgart, Pfaffenwaldring 61, 70569 Stuttgart,
Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-01-30">
<day>30</day>
<month>1</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>56</issue>
<fpage>2291</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Fractures</kwd>
<kwd>Fracture network</kwd>
<kwd>Porous media</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>Frackit</monospace> is a framework for the stochastic
  generation of fracture networks composed of two-dimensional
  geometries, for instance, polygons and/or ellipses, which can be
  embedded in arbitrary three-dimensional domain shapes. Great
  flexibility with respect to the geometries that can be used is
  achieved by extensive use of the open-source Computer-Aided-Design
  (CAD) library
  <ext-link ext-link-type="uri" xlink:href="https://www.opencascade.com/content/download-center">OpenCascade</ext-link>
  (<ext-link ext-link-type="uri" xlink:href="https://www.opencascade.com">opencascade.com</ext-link>),
  which furthermore provides the possibility to export the generated
  networks into a variety of CAD file formats for subsequent
  post-processing or meshing with other software. Besides that, output
  routines to the geometry file format of Gmsh
  (<ext-link ext-link-type="uri" xlink:href="https://www.gmsh.info/">gmsh.info/</ext-link>;
  Geuzaine &amp; Remacle
  (<xref alt="2009" rid="ref-gmsh2009" ref-type="bibr">2009</xref>)) are
  provided, which is an open-source mesh generator that is widely used
  in academic research on numerical methods (see e.g. Keilegavlen et al.
  (<xref alt="2020" rid="ref-keilegavlen2020porepy" ref-type="bibr">2020</xref>);
  Berge et al.
  (<xref alt="2020" rid="ref-berge2019" ref-type="bibr">2020</xref>)).
  The code is written in C++, but Python bindings are provided that
  allow users to access all functionality from Python.</p>
</sec>
<sec id="introduction">
  <title>Introduction</title>
  <p>The numerical simulation of flow and transport phenomena in
  fractured porous media is an active field of research, given the
  importance of fractures in many geotechnical engineering applications,
  as for example groundwater management
  (<xref alt="Qian et al., 2014" rid="ref-qian2014" ref-type="bibr">Qian
  et al., 2014</xref>), enhanced oil recovery techniques
  (<xref alt="Torabi et al., 2012" rid="ref-torabi2012" ref-type="bibr">Torabi
  et al., 2012</xref>), geothermal energy
  (<xref alt="McFarland &amp; Murphy, 1976" rid="ref-mcfarland1976" ref-type="bibr">McFarland
  &amp; Murphy, 1976</xref>;
  <xref alt="Shaik et al., 2011" rid="ref-shaik2011" ref-type="bibr">Shaik
  et al., 2011</xref>) or unconventional natural gas production
  (<xref alt="Sovacool, 2014" rid="ref-sovacool2014" ref-type="bibr">Sovacool,
  2014</xref>). A number of mathematical models and numerical schemes,
  aiming at an accurate description of flow through fractured rock, have
  been presented recently (see e.g. R. Ahmed et al.
  (<xref alt="2015" rid="ref-ahmed2015" ref-type="bibr">2015</xref>);
  Raheel Ahmed et al.
  (<xref alt="2017" rid="ref-ahmed2017" ref-type="bibr">2017</xref>);
  Brenner et al.
  (<xref alt="2018" rid="ref-brenner2018" ref-type="bibr">2018</xref>);
  Köppel et al.
  (<xref alt="2019" rid="ref-koppel2019" ref-type="bibr">2019</xref>);
  Schädle et al.
  (<xref alt="2019" rid="ref-schadle2019" ref-type="bibr">2019</xref>);
  Nordbotten et al.
  (<xref alt="2019" rid="ref-nordbotten2019" ref-type="bibr">2019</xref>)).
  Many of these describe the fractures as lower-dimensional geometries,
  that is, as curves or planes embedded in two- or three-dimensional
  space, respectively. On those, integrated balance equations are solved
  together with transmission conditions describing the interaction with
  the surrounding medium. Moreover, many models require that the
  computational meshes used for the different domains are conforming in
  the sense that the faces of the discretization used for the bulk
  medium coincide with the discretization of the fractures (see
  <xref alt="Figure 1" rid="figU003Agrids">Figure 1</xref>).</p>
  <fig>
    <caption><p>Exemplary grids used with numerical schemes that require
    conformity of the bulk discretization with the fracture planes. The
    network shown on the left is taken from Bernd Flemisch et al.
    (<xref alt="2018" rid="ref-Flemisch2018Benchmarks" ref-type="bibr">2018</xref>).<styled-content id="figU003Agrids"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="doc/img/examplegrids.png" xlink:title="" />
  </fig>
  <p>Information on the in-situ locations of fractures is typically
  sparse and difficult to determine. As a response to this, a common
  approach is to study the hydraulic properties of rock in function of
  the fracture network topology by means of numerical simulations
  performed on stochastically generated fracture networks. Such
  investigations have been presented, among many others, in Ito &amp;
  Yongkoo
  (<xref alt="2003" rid="ref-Kazumasa2003" ref-type="bibr">2003</xref>);
  Assteerawatt
  (<xref alt="2008" rid="ref-Assteerawatt2008" ref-type="bibr">2008</xref>);
  I.-H. Lee &amp; Ni
  (<xref alt="2015" rid="ref-lee2015fracture" ref-type="bibr">2015</xref>);
  Zhang
  (<xref alt="2015" rid="ref-zhang2015finite" ref-type="bibr">2015</xref>);
  I. Lee et al.
  (<xref alt="2019" rid="ref-lee2019stochastic" ref-type="bibr">2019</xref>).
  An overview over several other works in which stochastically generated
  fracture networks have been used can be found in Lei et al.
  (<xref alt="2017" rid="ref-LEI2017" ref-type="bibr">2017</xref>).</p>
  <p>In many such studies, the researchers have used self-developed
  codes for the stochastic generation of the fracture networks, but
  unfortunately, in most cases the code is not publicly available. Two
  examples for open-source software packages are Hyman et al.
  (<xref alt="2015" rid="ref-hyman2015dfnWorks" ref-type="bibr">2015</xref>)
  and Alghalandis
  (<xref alt="2017" rid="ref-alghalandis2017" ref-type="bibr">2017</xref>),
  both of which contain functionality related to network generation and
  analysis, while the former additionally provides meshing and
  simulation capabilities to simulate flow and transport on the
  generated networks. An example for a commercial software package is
  FracMan
  (<ext-link ext-link-type="uri" xlink:href="https://www.golder.com/fracman/">golder.com/fracman</ext-link>),
  while DFN.LAB
  (<ext-link ext-link-type="uri" xlink:href="https://fractorylab.org/">fractorylab.org</ext-link>)
  is a non-open-source research code, to which access is only granted to
  research collaborators of the development team.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>In the context of simulation-based research on fractured media,
  stochastically generated fracture networks are useful in applications
  where field data is sparse or unavailable, where the impact of
  different network patterns is studied, or when the performance of a
  numerical scheme is to be investigated on networks that exhibit
  certain properties. However, when the simulations are carried out with
  grid-based numerical schemes, the mesh quality is of particular
  importance and should be taken into account already during the network
  generation. In particular, small length scales and angles at
  intersecting geometries should be avoided, as well as small distances
  due to fractures being very close to each other or to the domain
  boundary. Within the above-mentioned non-commercial packages, such a
  feature (without the check for small angles) is only available in
  Hyman et al.
  (<xref alt="2015" rid="ref-hyman2015dfnWorks" ref-type="bibr">2015</xref>).
  They describe fractures by polygons, which are also used to
  approximate elliptical shapes, and the domains are restricted to
  hexahedra. In <monospace>Frackit</monospace>, such checks can be
  performed between arbitrary, possibly non-linear geometries, for
  instance, between elliptical disks and cylinder surfaces, and there is
  no need to represent geometries by linear approximations. This enables
  users to mesh the resulting geometries with the desired resolution
  without artifacts from the discretization (approximation) of the
  geometries themselves.</p>
  <p>Generators often work with input files for setting a large number
  of parameters of the network generation, or provide a single generator
  class with parameter setter functions, in which the entire network
  generation process occurs. While this enables new users to obtain
  results quickly and with less effort, this might also limit the
  possibilities for customization of the generation algorithm. In
  contrast to that, <monospace>Frackit</monospace> is structured in a
  modular way, allowing users to pick the functionalities they need to
  assemble custom network generation algorithms. The modular design also
  facilitates the incorporation of new features without having to modify
  existing classes or functions. Moreover, the generated networks can be
  exported into a variety of output file formats for subsequent
  post-processing, meshing and simulation with other software. If
  desired, the geometric data produced by <monospace>Frackit</monospace>
  contains the complete fragmentation of all geometric entities
  involved, i.e. the intersection geometries between all entities are
  computed. Thus, this information can be directly used in the context
  of discrete fracture-matrix (dfm) simulations in a conforming way as
  described before. For instance, the open-source simulator
  <ext-link ext-link-type="uri" xlink:href="https://dumux.org/">DuMuX</ext-link>
  [B. Flemisch et al.
  (<xref alt="2011" rid="ref-Dumux" ref-type="bibr">2011</xref>); Koch
  et al.
  (<xref alt="2020" rid="ref-Kochetal2020Dumux" ref-type="bibr">2020</xref>);
  <ext-link ext-link-type="uri" xlink:href="https://dumux.org/">dumux.org</ext-link>]
  contains a module for conforming dfm simulations of single- and
  multi-phase flow through fractured porous media, which has been used
  in several works
  (<xref alt="Andrianov &amp; Nick, 2019" rid="ref-andrianov2019" ref-type="bibr">Andrianov
  &amp; Nick, 2019</xref>;
  <xref alt="Gläser et al., 2017" rid="ref-glaeser2017" ref-type="bibr">Gläser
  et al., 2017</xref>,
  <xref alt="2019" rid="ref-glaeser2019" ref-type="bibr">2019</xref>).
  It supports the
  <ext-link ext-link-type="uri" xlink:href="https://www.gmsh.info/">Gmsh</ext-link>
  file format, and thus, <monospace>Frackit</monospace> can be used in a
  fully open-source toolchain with
  <ext-link ext-link-type="uri" xlink:href="https://www.gmsh.info/">Gmsh</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://dumux.org/">DuMuX</ext-link>
  to generate random fracture networks, construct computational meshes,
  and perform analyses on them by means of numerical simulations.</p>
</sec>
<sec id="concept">
  <title>Concept</title>
  <p>The design of <monospace>Frackit</monospace> is such that there is
  no predefined program flow, but instead, users should implement their
  own applications using the provided classes and functions. This allows
  for full customization of each step of the network generation.
  Furthermore, in the case of available measurement data, one could skip
  the network generation process and use <monospace>Frackit</monospace>
  to compute the fragmentation of the measured data and to generate CAD
  files for subsequent meshing. The code is structured around three
  fundamental tasks involved in the generation of random networks:</p>
  <list list-type="bullet">
    <list-item>
      <p>Random generation of a new fracture entity candidate based on
      statistical parameters (and possibly information on previously
      generated entities)</p>
    </list-item>
    <list-item>
      <p>Evaluation of geometric constraints for a new entity candidate
      against previously generated entities or the domain boundary</p>
    </list-item>
    <list-item>
      <p>Fragmentation of the generated raw entities and the embedding
      domain</p>
    </list-item>
  </list>
  <p>This paper focusses on the first two of the above-mentioned steps,
  and we refer to the code documentation for details on further
  available functionalities. The presented code snippets focus on the
  implementation in C++, and for details on how to use
  <monospace>Frackit</monospace> from Python we refer to the examples
  provided in the repository
  (<ext-link ext-link-type="uri" xlink:href="https://git.iws.uni-stuttgart.de/tools/frackit">git.iws.uni-stuttgart.de/tools/frackit</ext-link>).</p>
  <sec id="random-generation-of-fracture-entities">
    <title>Random generation of fracture entities</title>
    <p>In the network generation procedure, a domain is populated with
    fracture entities that are generated following user-defined
    statistical properties regarding their size, orientation and spatial
    distribution. In <monospace>Frackit</monospace>, this process is
    termed <italic>geometry sampling</italic> and is realized in the
    code in <italic>sampler</italic> classes. In the current
    implementation, there are three such sampler classes available,
    which sample quadrilaterals, polygons and elliptical disks in
    three-dimensional space. A sampler class of
    <monospace>Frackit</monospace> receives an instance of a
    <monospace>PointSampler</monospace> implementation and a number of
    probability distributions that define the size and orientation of
    the raw entities. <monospace>PointSampler</monospace> classes are
    used to sample the spatial distribution of the geometries inside a
    domain geometry. For example, a point sampler that samples points
    uniformly within the unit cube (defined in the variable
    <monospace>domain</monospace>) could be constructed like this:</p>
    <code language="c++">// the type used for coordinates values
using ctype = double;

// define axis-aligned box in which to sample the centers points
using Domain = Frackit::Box&lt;ctype&gt;;
Domain domain(0.0, 0.0, 0.0,  // xmin, ymin, zmin
              1.0, 1.0, 1.0); // xmax, ymax, zmax

// let us uniformly sample points within this box
auto pointSampler = Frackit::makeUniformPointSampler(domain);</code>
    <p>The convenience function
    <monospace>makeUniformPointSampler()</monospace> can be used for
    uniform sampling over the provided domain geometry. For nun-uniform
    samplers, one can write</p>
    <code language="c++">auto pointSampler = Frackit::makePointSampler&lt;Traits&gt;(domain);</code>
    <p>where in the <monospace>Traits</monospace> class users define the
    type of distribution to be used for each coordinate direction.
    Inside a geometry sampler class, a geometry is created by sampling a
    point from the point sampler, and then constructing an instance of
    the desired geometry around this point using the provided
    distributions for its size and orientation. For example, the
    <monospace>QuadrilateralSampler</monospace> class expects
    distributions for the strike and dip angles, and for the lengths in
    strike and dip direction. The following piece of code shows how an
    instance of the <monospace>QuadrilateralSampler</monospace> class
    can be created, using normal distributions for all parameters
    regarding orientation and uniform distributions for the lengths (we
    reuse the <monospace>pointSampler</monospace> variable defined in
    the previous code snippet):</p>
    <code language="c++">// let us use uniform distributions for the quadrilateral parameters
using NormalDistro = std::normal_distribution&lt;ctype&gt;;
using UniformDistro = std::uniform_real_distribution&lt;ctype&gt;;

// Distributions for strike/dip angles &amp; lengths
NormalDistro strikeAngleDistro(toRadians(45.0), // mean value
                               toRadians(5.0)); // standard deviation
NormalDistro dipAngleDistro(toRadians(45.0),    // mean value
                            toRadians(5.0));    // standard deviation
UniformDistro strikeLengthDistro(0.4, 0.6);     // min &amp; max length
UniformDistro dipLengthDistro(0.4, 0.6);        // min &amp; max length

// instance of the quadrilateral sampler class
using QuadSampler = Frackit::QuadrilateralSampler&lt;/*spaceDimension*/3&gt;;
QuadSampler quadSampler(pointSampler,
                        strikeAngleDistro,
                        dipAngleDistro,
                        strikeLengthDistro,
                        dipLengthDistro);</code>
    <p>As for point samplers, one can use different distributions by
    implementing a <monospace>Traits</monospace> class which is then
    passed to the <monospace>QuadrilateralSampler</monospace> as
    template argument. The definitions of the strike and dip angles as
    used within the <monospace>QuadrilateralSampler</monospace> class
    are illustrated in
    <xref alt="Figure 2" rid="figU003AquadSampler">Figure 2</xref>.
    Consider a quadrilateral whose center is the origin and which lies
    in the plane defined by the two basis vectors
    <inline-formula><alternatives>
    <tex-math><![CDATA[\mathbf{b}_1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>𝐛</mml:mi></mml:mstyle><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    and <inline-formula><alternatives>
    <tex-math><![CDATA[\mathbf{b}_2]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>𝐛</mml:mi></mml:mstyle><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>.
    The latter lies in the <inline-formula><alternatives>
    <tex-math><![CDATA[x]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>x</mml:mi></mml:math></alternatives></inline-formula>-<inline-formula><alternatives>
    <tex-math><![CDATA[y]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>y</mml:mi></mml:math></alternatives></inline-formula>-plane
    and the strike angle is the angle between the
    <inline-formula><alternatives>
    <tex-math><![CDATA[y]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>y</mml:mi></mml:math></alternatives></inline-formula>-axis
    and <inline-formula><alternatives>
    <tex-math><![CDATA[\mathbf{b}_2]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>𝐛</mml:mi></mml:mstyle><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>.
    The dip angle describes the angle between
    <inline-formula><alternatives>
    <tex-math><![CDATA[\mathbf{b}_1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>𝐛</mml:mi></mml:mstyle><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    and the <inline-formula><alternatives>
    <tex-math><![CDATA[x]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>x</mml:mi></mml:math></alternatives></inline-formula>-<inline-formula><alternatives>
    <tex-math><![CDATA[y]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>y</mml:mi></mml:math></alternatives></inline-formula>-plane.</p>
    <fig>
      <caption><p>Illustration of the strike and dip angles involved in
      the random generation of quadrilaterals. The grey plane with the
      structured mesh illustrates the <inline-formula><alternatives>
      <tex-math><![CDATA[x]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>x</mml:mi></mml:math></alternatives></inline-formula>-<inline-formula><alternatives>
      <tex-math><![CDATA[y]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>y</mml:mi></mml:math></alternatives></inline-formula>-plane.<styled-content id="figU003AquadSampler"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="doc/img/quadsampler.png" xlink:title="" />
    </fig>
    <p>In the code, random generation of geometries from sampler classes
    occurs by using the <monospace>()</monospace> operator. For example,
    from the <monospace>quadSampler</monospace> variable defined in the
    previous code snippet, we obtain a random quadrilateral by
    writing:</p>
    <code language="c++">// generate random quadrilateral
const auto quad = quadSampler();</code>
  </sec>
  <sec id="evaluation-of-geometric-constraints">
    <title>Evaluation of geometric constraints</title>
    <p>While the domain is populated with the raw fracture entities,
    users have the possibility to enforce geometric constraints between
    them in order for the network to exhibit the desired topological
    characteristics such as, for instance, fracture spacing.
    Furthermore, constraints can be used to avoid very small length
    scales that could cause problems during mesh generation or could
    lead to ill-shaped elements. In the code, constraints can be defined
    and evaluated using the
    <monospace>EntityNetworkConstraints</monospace> class. These have to
    be fulfilled by a new fracture entity candidate against previously
    accepted entities. If any of the defined constraints is violated,
    the candidate may be rejected and a new one is sampled. The current
    implementation of the
    <monospace>EntityNetworkConstraints</monospace> class allows users
    to define a minimum distance between two entities that do not
    intersect. If two entities intersect, one can choose to enforce a
    minimum length of the intersection curve, a minimum intersection
    angle and a minimum distance between the intersection curve and the
    boundaries of the intersecting entities. An illustration of such
    situations is shown in
    <xref alt="Figure 3" rid="figU003Aconstraints">Figure 3</xref>.</p>
    <fig>
      <caption><p>Illustration of the geometric settings that can be
      avoided using geometric
      constraints.<styled-content id="figU003Aconstraints"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="doc/img/constraints.png" xlink:title="" />
    </fig>
    <p>Please note that internally, the
    <monospace>EntityNetworkConstraints</monospace> class uses geometry
    algorithms that are part of the public interface of
    <monospace>Frackit</monospace>. Thus, one can easily develop custom
    constraints and enforce additional geometric constraints. The
    following code snippet illustrates how to set up an instance of the
    <monospace>EntityNetworkConstraints</monospace> class:</p>
    <code language="c++">// Instantiate constraints class. This leaves all constraints deactivated.
Frackit::EntityNetworkConstraints&lt;ctype&gt; constraints;

// Set values to activate constraints
constraints.setMinDistance(0.1);               // in meter
constraints.setMinIntersectingAngle(M_PI/4.0); // in radians
constraints.setMinIntersectionMagnitude(0.05); // in meter
constraints.setMinIntersectionDistance(0.05);  // in meter

// define geometric tolerance to be used for intersections
constraints.setIntersectionEpsilon(1e-6);</code>
    <p>When using the default constructor of
    <monospace>EntityNetworkConstraints</monospace> all constraints are
    inactive, and when defining values for the different constraint
    types, these get activated internally. The last line in the above
    code snippet shows how to define the geometric tolerance that should
    be used in the intersection algorithms between entities. If no
    tolerance is set, a default value is computed based on the size of
    the entities for which the intersection is to be determined. For two
    quadrilaterals <monospace>quad1</monospace> and
    <monospace>quad2</monospace>, one can then evaluate the defined
    constraints by writing:</p>
    <code language="c++">bool fulfilled = constraints.evaluate(quad1, quad2);</code>
    <p>The function <monospace>evaluate()</monospace> returns true if
    all constraints are fulfilled. One can also check the fulfillment of
    the constraints of a new candidate against an entire set of
    entities. Let <monospace>quad</monospace> be a new candidate for a
    quadrilateral, and <monospace>quadSet</monospace> be a vector of
    quadrilaterals
    (<monospace>std::vector&lt; Quadrilateral&lt;ctype&gt; &gt;</monospace>),
    then one can write</p>
    <code language="c++">bool fulfilled = constraints.evaluate(quadSet, quad);</code>
    <p>to evaluate the constraints between <monospace>quad</monospace>
    and all entities stored in <monospace>quadSet</monospace>.</p>
  </sec>
</sec>
<sec id="example-application">
  <title>Example application</title>
  <p>In the following we want to illustrate an exemplary workflow using
  <monospace>Frackit</monospace> together with
  <ext-link ext-link-type="uri" xlink:href="https://www.gmsh.info/">Gmsh</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://dumux.org/">DuMuX</ext-link>.
  The images are taken from the <monospace>Frackit</monospace>
  documentation
  (<ext-link ext-link-type="uri" xlink:href="https://git.iws.uni-stuttgart.de/tools/frackit">git.iws.uni-stuttgart.de/tools/frackit</ext-link>)
  and the configurations of the geometry samplers are, apart from small
  modifications, very similar to the ones used in
  <ext-link ext-link-type="uri" xlink:href="https://git.iws.uni-stuttgart.de/tools/frackit/tree/master/appl/example3">example
  3</ext-link> provided in the <monospace>Frackit</monospace>
  repository. For further details on how to set up such configurations
  we refer to the source code and the documentation of that example in
  the repository. Note that this example is not meant to represent a
  realistic fracture network, but should rather highlight the
  flexibility of the code with respect to the geometries that can be
  used.</p>
  <p>Let us consider a domain consisting of three solid layers of which
  we want to generate a fracture network only in the center volume. The
  following piece of code shows how to read in the domain geometry from
  a CAD file, extract its three volumes and select the middle one as the
  subdomain in which to place the fracture network (this assumes
  knowledge of the ordering of the volumes).</p>
  <code language="c++">/////////////////////////////////////////////////////
// 1. Read in the domain geometry from .brep file. //
//    The file name is defined in CMakeLists.txt   //
/////////////////////////////////////////////////////
const auto domainShape = Frackit::OCCUtilities::readShape(BREPFILE);

// obtain the three solids contained in the file
const auto solids = Frackit::OCCUtilities::getSolids(domainShape);

// The sub-domain we want to create a network in is the center one.
const auto&amp; networkDomain = solids[1];

// get the bounding box of the domain
const auto bBox = Frackit::OCCUtilities::getBoundingBox(networkDomain);</code>
  <p>The last command constructs the bounding box of the center volume
  of our domain, which we can then use to instantiate point sampler
  classes that define the spatial distribution of the fracture entities.
  With these, we can construct geometry samplers as outlined above. In
  this example, we define three geometry sampler instances to sample
  from three different orientations of fractures, and we use
  quadrilaterals for two of the orientations and elliptical disks for
  the third orientation. Moreover, we define different constraints that
  should be fulfilled between the entities of different orientations. As
  mentioned above, details on how to implement such settings can be
  found in
  <ext-link ext-link-type="uri" xlink:href="https://git.iws.uni-stuttgart.de/tools/frackit/tree/master/appl/example3">example
  3</ext-link> in the <monospace>Frackit</monospace> repository.</p>
  <p>A number of fractures is then generated for each orientation.
  Subsequently, the raw entities and the three volumes of the domain are
  cast into an instance of the
  <monospace>ContainedEntityNetwork</monospace> class. This can be used
  to define arbitrarily many (sub-)domains, and to insert entities to be
  embedded in a specific sub-domain. The
  <monospace>ContainedEntityNetwork</monospace> computes and stores the
  fragments of all entities and sub-domains resulting from mutual
  intersection. Output routines for instances of this class are
  implemented, which generate geometry files that are ready to be meshed
  using designated tools such as
  <ext-link ext-link-type="uri" xlink:href="https://www.gmsh.info/">Gmsh</ext-link>.</p>
  <p>The image below illustrates the workflow chosen in this example,
  using <monospace>Frackit</monospace> to generate a random fracture
  network,
  <ext-link ext-link-type="uri" xlink:href="https://www.gmsh.info/">Gmsh</ext-link>
  to mesh the resulting geometry, and
  <ext-link ext-link-type="uri" xlink:href="https://dumux.org/">DuMuX</ext-link>
  to perform a single-phase flow simulation on the resulting mesh. The
  bottom picture shows the pressure distribution on the fractures and
  the velocities in the domain as computed with
  <ext-link ext-link-type="uri" xlink:href="https://dumux.org/">DuMuX</ext-link>,
  using the illustrated boundary conditions.</p>
  <fig>
    <caption><p>Illustration of the workflow using Frackit, Gmsh and
    DuMuX in the exemplary application.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="doc/img/network_and_solution.png" xlink:title="" />
  </fig>
  <p>The source code of this example, including installation
  instructions, can be found at
  https://git.iws.uni-stuttgart.de/dumux-pub/glaeser2020a.</p>
</sec>
<sec id="future-developments">
  <title>Future developments</title>
  <p>We are planning to add fracture network characterization
  capabilities, such as the detection of isolated clusters of fractures
  or the determination of connectivity measures. In order to do this
  efficiently, we want to integrate data structures and algorithms for
  graphs, together with functionalities to translate the generated
  fracture networks into graph representations.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We thank the German Research Foundation (Deutsche
  Forschungsgemeinschaft) for supporting this work by funding SFB 1313,
  Project Number 327154368.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Assteerawatt2008">
      <element-citation publication-type="thesis">
        <person-group person-group-type="author">
          <name><surname>Assteerawatt</surname><given-names>Anongnart</given-names></name>
        </person-group>
        <article-title>Flow and transport modelling of fractured aquifers based on a geostatistical approach</article-title>
        <publisher-name>Universitätsbibliothek der Universität Stuttgart</publisher-name>
        <publisher-loc>Holzgartenstr. 16, 70174 Stuttgart</publisher-loc>
        <year iso-8601-date="2008-10">2008</year><month>10</month>
        <issn>978-3-933761-80-4</issn>
        <pub-id pub-id-type="doi">10.18419/opus-289</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Kazumasa2003">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <name><surname>Ito</surname><given-names>Kazumasa</given-names></name>
          <name><surname>Yongkoo</surname><given-names>Seol</given-names></name>
        </person-group>
        <article-title>A 3-dimensional discrete fracture network generator to examine fracture-matrix interaction using TOUGH2</article-title>
        <publisher-name>Lawrence Berkeley National Lab.(LBNL), Berkeley, CA (United States)</publisher-name>
        <year iso-8601-date="2003">2003</year>
      </element-citation>
    </ref>
    <ref id="ref-lee2015fracture">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lee</surname><given-names>I-Hsien</given-names></name>
          <name><surname>Ni</surname><given-names>Chuen-Fa</given-names></name>
        </person-group>
        <article-title>Fracture-based modeling of complex flow and CO2 migration in three-dimensional fractured rocks</article-title>
        <source>Computers &amp; geosciences</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <volume>81</volume>
        <pub-id pub-id-type="doi">10.1016/j.cageo.2015.04.012</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-zhang2015finite">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Zhang</surname><given-names>Qi-Hua</given-names></name>
        </person-group>
        <article-title>Finite element generation of arbitrary 3-d fracture networks for flow analysis in complicated discrete fracture networks</article-title>
        <source>Journal of Hydrology</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <volume>529</volume>
        <pub-id pub-id-type="doi">10.1016/j.jhydrol.2015.08.065</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-lee2019stochastic">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lee</surname><given-names>I</given-names></name>
          <name><surname>Ni</surname><given-names>Chuen-Fa</given-names></name>
          <name><surname>Lin</surname><given-names>Fang-Pang</given-names></name>
          <name><surname>Lin</surname><given-names>Chi-Ping</given-names></name>
          <name><surname>Ke</surname><given-names>Chien-Chung</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>Stochastic modeling of flow and conservative transport in three-dimensional discrete fracture networks</article-title>
        <source>Hydrology and Earth System Sciences</source>
        <publisher-name>Copernicus GmbH</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <volume>23</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.5194/hess-23-19-2019</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-alghalandis2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Alghalandis</surname><given-names>Younes Fadakar</given-names></name>
        </person-group>
        <article-title>ADFNE: Open source software for discrete fracture network engineering, two and three dimensional applications</article-title>
        <source>Computers &amp; Geosciences</source>
        <year iso-8601-date="2017">2017</year>
        <volume>102</volume>
        <issn>0098-3004</issn>
        <pub-id pub-id-type="doi">10.1016/j.cageo.2017.02.002</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Dumux">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Flemisch</surname><given-names>B.</given-names></name>
          <name><surname>Darcis</surname><given-names>M.</given-names></name>
          <name><surname>Erbertseder</surname><given-names>K.</given-names></name>
          <name><surname>Faigle</surname><given-names>B.</given-names></name>
          <name><surname>Lauser</surname><given-names>A.</given-names></name>
          <name><surname>Mosthaf</surname><given-names>K.</given-names></name>
          <name><surname>Müthing</surname><given-names>S.</given-names></name>
          <name><surname>Nuske</surname><given-names>P.</given-names></name>
          <name><surname>Tatomir</surname><given-names>A.</given-names></name>
          <name><surname>Wolff</surname><given-names>M.</given-names></name>
          <name><surname>Helmig</surname><given-names>R.</given-names></name>
        </person-group>
        <article-title>DuMux: DUNE for multi-Phase, Component, Scale, Physics, ... Flow and transport in porous media</article-title>
        <source>Advances in Water Resources</source>
        <year iso-8601-date="2011">2011</year>
        <volume>34</volume>
        <pub-id pub-id-type="doi">10.1016/j.advwatres.2011.03.007</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Kochetal2020Dumux">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Koch</surname><given-names>Timo</given-names></name>
          <name><surname>Gläser</surname><given-names>Dennis</given-names></name>
          <name><surname>Weishaupt</surname><given-names>Kilian</given-names></name>
          <name><surname>Ackermann</surname><given-names>Sina</given-names></name>
          <name><surname>Beck</surname><given-names>Martin</given-names></name>
          <name><surname>Becker</surname><given-names>Beatrix</given-names></name>
          <name><surname>Burbulla</surname><given-names>Samuel</given-names></name>
          <name><surname>Class</surname><given-names>Holger</given-names></name>
          <name><surname>Coltman</surname><given-names>Edward</given-names></name>
          <name><surname>Emmert</surname><given-names>Simon</given-names></name>
          <name><surname>Fetzer</surname><given-names>Thomas</given-names></name>
          <name><surname>Grüninger</surname><given-names>Christoph</given-names></name>
          <name><surname>Heck</surname><given-names>Katharina</given-names></name>
          <name><surname>Hommel</surname><given-names>Johannes</given-names></name>
          <name><surname>Kurz</surname><given-names>Theresa</given-names></name>
          <name><surname>Lipp</surname><given-names>Melanie</given-names></name>
          <name><surname>Mohammadi</surname><given-names>Farid</given-names></name>
          <name><surname>Scherrer</surname><given-names>Samuel</given-names></name>
          <name><surname>Schneider</surname><given-names>Martin</given-names></name>
          <name><surname>Seitz</surname><given-names>Gabriele</given-names></name>
          <name><surname>Stadler</surname><given-names>Leopold</given-names></name>
          <name><surname>Utz</surname><given-names>Martin</given-names></name>
          <name><surname>Weinhardt</surname><given-names>Felix</given-names></name>
          <name><surname>Flemisch</surname><given-names>Bernd</given-names></name>
        </person-group>
        <article-title>DuMux 3 - an open-source simulator for solving flow and transport problems in porous media with a focus on model coupling</article-title>
        <source>Computers &amp; Mathematics with Applications</source>
        <year iso-8601-date="2020">2020</year>
        <issn>0898-1221</issn>
        <pub-id pub-id-type="doi">10.1016/j.camwa.2020.02.012</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-glaeser2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gläser</surname><given-names>Dennis</given-names></name>
          <name><surname>Helmig</surname><given-names>Rainer</given-names></name>
          <name><surname>Flemisch</surname><given-names>Bernd</given-names></name>
          <name><surname>Class</surname><given-names>Holger</given-names></name>
        </person-group>
        <article-title>A discrete fracture model for two-phase flow in fractured porous media</article-title>
        <source>Advances in Water Resources</source>
        <year iso-8601-date="2017">2017</year>
        <volume>110</volume>
        <issn>0309-1708</issn>
        <pub-id pub-id-type="doi">10.1016/j.advwatres.2017.10.031</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-glaeser2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gläser</surname><given-names>Dennis</given-names></name>
          <name><surname>Flemisch</surname><given-names>Bernd</given-names></name>
          <name><surname>Helmig</surname><given-names>Rainer</given-names></name>
          <name><surname>Class</surname><given-names>Holger</given-names></name>
        </person-group>
        <article-title>A hybrid-dimensional discrete fracture model for non-isothermal two-phase flow in fractured porous media</article-title>
        <source>GEM-International Journal on Geomathematics</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <volume>10</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1007/s13137-019-0116-8</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-keilegavlen2020porepy">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Keilegavlen</surname><given-names>Eirik</given-names></name>
          <name><surname>Berge</surname><given-names>Runar</given-names></name>
          <name><surname>Fumagalli</surname><given-names>Alessio</given-names></name>
          <name><surname>Starnoni</surname><given-names>Michele</given-names></name>
          <name><surname>Stefansson</surname><given-names>Ivar</given-names></name>
          <name><surname>Varela</surname><given-names>Jhabriel</given-names></name>
          <name><surname>Berre</surname><given-names>Inga</given-names></name>
        </person-group>
        <article-title>PorePy: An open-source software for simulation of multiphysics processes in fractured porous media</article-title>
        <source>Computational Geosciences</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.1007/s10596-020-10002-5</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-gmsh2009">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Geuzaine</surname><given-names>Christophe</given-names></name>
          <name><surname>Remacle</surname><given-names>Jean-François</given-names></name>
        </person-group>
        <article-title>Gmsh: A 3-d finite element mesh generator with built-in pre- and post-processing facilities</article-title>
        <source>International Journal for Numerical Methods in Engineering</source>
        <publisher-name>John Wiley &amp; Sons, Ltd.</publisher-name>
        <year iso-8601-date="2009">2009</year>
        <volume>79</volume>
        <issue>11</issue>
        <issn>1097-0207</issn>
        <pub-id pub-id-type="doi">10.1002/nme.2579</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-berge2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Berge</surname><given-names>Runar L.</given-names></name>
          <name><surname>Berre</surname><given-names>Inga</given-names></name>
          <name><surname>Keilegavlen</surname><given-names>Eirik</given-names></name>
          <name><surname>Nordbotten</surname><given-names>Jan M.</given-names></name>
          <name><surname>Wohlmuth</surname><given-names>Barbara</given-names></name>
        </person-group>
        <article-title>Finite volume discretization for poroelastic media with fractures modeled by contact mechanics</article-title>
        <source>International Journal for Numerical Methods in Engineering</source>
        <year iso-8601-date="2020">2020</year>
        <volume>121</volume>
        <issue>4</issue>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/nme.6238</uri>
        <pub-id pub-id-type="doi">10.1002/nme.6238</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Flemisch2018Benchmarks">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Flemisch</surname><given-names>Bernd</given-names></name>
          <name><surname>Berre</surname><given-names>Inga</given-names></name>
          <name><surname>Boon</surname><given-names>Wietse</given-names></name>
          <name><surname>Fumagalli</surname><given-names>Alessio</given-names></name>
          <name><surname>Schwenck</surname><given-names>Nicolas</given-names></name>
          <name><surname>Scotti</surname><given-names>Anna</given-names></name>
          <name><surname>Stefansson</surname><given-names>Ivar</given-names></name>
          <name><surname>Tatomir</surname><given-names>Alexandru</given-names></name>
        </person-group>
        <article-title>Benchmarks for single-phase flow in fractured porous media</article-title>
        <source>Advances in Water Resources</source>
        <year iso-8601-date="2018">2018</year>
        <volume>111</volume>
        <issn>0309-1708</issn>
        <pub-id pub-id-type="doi">10.1016/j.advwatres.2017.10.036</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-andrianov2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Andrianov</surname><given-names>Nikolai</given-names></name>
          <name><surname>Nick</surname><given-names>Hamidreza M.</given-names></name>
        </person-group>
        <article-title>Modeling of waterflood efficiency using outcrop-based fractured models</article-title>
        <source>Journal of Petroleum Science and Engineering</source>
        <year iso-8601-date="2019">2019</year>
        <volume>183</volume>
        <issn>0920-4105</issn>
        <pub-id pub-id-type="doi">10.1016/j.petrol.2019.106350</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ahmed2015">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Ahmed</surname><given-names>R.</given-names></name>
          <name><surname>Edwards</surname><given-names>M. G.</given-names></name>
          <name><surname>Lamine</surname><given-names>S.</given-names></name>
          <name><surname>Huisman</surname><given-names>B. A. H.</given-names></name>
          <name><surname>Pal</surname><given-names>M.</given-names></name>
        </person-group>
        <article-title>Control-volume distributed multi-point flux approximation coupled with a lower-dimensional fracture model</article-title>
        <source>Journal of Computational Physics</source>
        <year iso-8601-date="2015">2015</year>
        <volume>284</volume>
        <issn>0021-9991</issn>
        <pub-id pub-id-type="doi">10.1016/j.jcp.2014.12.047</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ahmed2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Ahmed</surname><given-names>Raheel</given-names></name>
          <name><surname>Edwards</surname><given-names>Michael G.</given-names></name>
          <name><surname>Lamine</surname><given-names>Sadok</given-names></name>
          <name><surname>Huisman</surname><given-names>Bastiaan A. H.</given-names></name>
          <name><surname>Pal</surname><given-names>Mayur</given-names></name>
        </person-group>
        <article-title>CVD-MPFA full pressure support, coupled unstructured discrete fracture–matrix darcy-flux approximations</article-title>
        <source>Journal of Computational Physics</source>
        <year iso-8601-date="2017">2017</year>
        <volume>349</volume>
        <issn>0021-9991</issn>
        <pub-id pub-id-type="doi">10.1016/j.jcp.2017.07.041</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-koppel2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Köppel</surname><given-names>Markus</given-names></name>
          <name><surname>Martin</surname><given-names>Vincent</given-names></name>
          <name><surname>Roberts</surname><given-names>Jean E</given-names></name>
        </person-group>
        <article-title>A stabilized lagrange multiplier finite-element method for flow in porous media with fractures</article-title>
        <source>GEM-International Journal on Geomathematics</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <volume>10</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1007/s13137-019-0117-7</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-schadle2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Schädle</surname><given-names>Philipp</given-names></name>
          <name><surname>Zulian</surname><given-names>Patrick</given-names></name>
          <name><surname>Vogler</surname><given-names>Daniel</given-names></name>
          <name><surname>Bhopalam</surname><given-names>Sthavishtha R.</given-names></name>
          <name><surname>Nestola</surname><given-names>Maria G. C.</given-names></name>
          <name><surname>Ebigbo</surname><given-names>Anozie</given-names></name>
          <name><surname>Krause</surname><given-names>Rolf</given-names></name>
          <name><surname>Saar</surname><given-names>Martin O.</given-names></name>
        </person-group>
        <article-title>3D non-conforming mesh model for flow in fractured porous media using lagrange multipliers</article-title>
        <source>Computers &amp; Geosciences</source>
        <year iso-8601-date="2019">2019</year>
        <volume>132</volume>
        <issn>0098-3004</issn>
        <pub-id pub-id-type="doi">10.1016/j.cageo.2019.06.014</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-nordbotten2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Nordbotten</surname><given-names>Jan Martin</given-names></name>
          <name><surname>Boon</surname><given-names>Wietse M</given-names></name>
          <name><surname>Fumagalli</surname><given-names>Alessio</given-names></name>
          <name><surname>Keilegavlen</surname><given-names>Eirik</given-names></name>
        </person-group>
        <article-title>Unified approach to discretization of flow in fractured porous media</article-title>
        <source>Computational Geosciences</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <volume>23</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1007/s10596-018-9778-9</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-brenner2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Brenner</surname><given-names>Konstantin</given-names></name>
          <name><surname>Hennicker</surname><given-names>Julian</given-names></name>
          <name><surname>Masson</surname><given-names>Roland</given-names></name>
          <name><surname>Samier</surname><given-names>Pierre</given-names></name>
        </person-group>
        <article-title>Hybrid-dimensional modelling of two-phase flow through fractured porous media with enhanced matrix fracture transmission conditions</article-title>
        <source>Journal of Computational Physics</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2018-03">2018</year><month>03</month>
        <pub-id pub-id-type="doi">10.1016/j.jcp.2017.12.003</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-qian2014">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Qian</surname><given-names>Jiazhong</given-names></name>
          <name><surname>Zhou</surname><given-names>Xiaoping</given-names></name>
          <name><surname>Zhan</surname><given-names>Hongbin</given-names></name>
          <name><surname>Dong</surname><given-names>Hongxin</given-names></name>
          <name><surname>Ma</surname><given-names>Lei</given-names></name>
        </person-group>
        <article-title>Numerical simulation and evaluation of groundwater resources in a fractured chalk aquifer: A case study in zinder well field, niger</article-title>
        <source>Environmental earth sciences</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2014">2014</year>
        <volume>72</volume>
        <issue>8</issue>
        <pub-id pub-id-type="doi">10.1007/s12665-014-3211-z</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-torabi2012">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Torabi</surname><given-names>F</given-names></name>
          <name><surname>Firouz</surname><given-names>A Qazvini</given-names></name>
          <name><surname>Kavousi</surname><given-names>A</given-names></name>
          <name><surname>Asghari</surname><given-names>K</given-names></name>
        </person-group>
        <article-title>Comparative evaluation of immiscible, near miscible and miscible CO2 huff-n-puff to enhance oil recovery from a single matrix–fracture system (experimental and simulation studies)</article-title>
        <source>Fuel</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2012">2012</year>
        <volume>93</volume>
        <pub-id pub-id-type="doi">10.1016/j.fuel.2011.08.037</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-mcfarland1976">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <name><surname>McFarland</surname><given-names>Robert D</given-names></name>
          <name><surname>Murphy</surname><given-names>HD</given-names></name>
        </person-group>
        <article-title>Extracting energy from hydraulically-fractured geothermal reservoirs</article-title>
        <publisher-name>Los Alamos Scientific Lab., N. Mex.(USA)</publisher-name>
        <year iso-8601-date="1976">1976</year>
      </element-citation>
    </ref>
    <ref id="ref-shaik2011">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Shaik</surname><given-names>Abdul Ravoof</given-names></name>
          <name><surname>Rahman</surname><given-names>Sheik S.</given-names></name>
          <name><surname>Tran</surname><given-names>Nam H.</given-names></name>
          <name><surname>Tran</surname><given-names>Thanh</given-names></name>
        </person-group>
        <article-title>Numerical simulation of fluid-rock coupling heat transfer in naturally fractured geothermal system</article-title>
        <source>Applied Thermal Engineering</source>
        <year iso-8601-date="2011">2011</year>
        <volume>31</volume>
        <issue>10</issue>
        <issn>1359-4311</issn>
        <pub-id pub-id-type="doi">10.1016/j.applthermaleng.2011.01.038</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-sovacool2014">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Sovacool</surname><given-names>Benjamin K.</given-names></name>
        </person-group>
        <article-title>Cornucopia or curse? Reviewing the costs and benefits of shale gas hydraulic fracturing (fracking)</article-title>
        <source>Renewable and Sustainable Energy Reviews</source>
        <year iso-8601-date="2014">2014</year>
        <volume>37</volume>
        <issn>1364-0321</issn>
        <pub-id pub-id-type="doi">10.1016/j.rser.2014.04.068</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-LEI2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lei</surname><given-names>Qinghua</given-names></name>
          <name><surname>Latham</surname><given-names>John-Paul</given-names></name>
          <name><surname>Tsang</surname><given-names>Chin-Fu</given-names></name>
        </person-group>
        <article-title>The use of discrete fracture networks for modelling coupled geomechanical and hydrological behaviour of fractured rocks</article-title>
        <source>Computers and Geotechnics</source>
        <year iso-8601-date="2017">2017</year>
        <volume>85</volume>
        <issn>0266-352X</issn>
        <uri>http://www.sciencedirect.com/science/article/pii/S0266352X16303317</uri>
        <pub-id pub-id-type="doi">10.1016/j.compgeo.2016.12.024</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-hyman2015dfnWorks">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hyman</surname><given-names>Jeffrey D</given-names></name>
          <name><surname>Karra</surname><given-names>Satish</given-names></name>
          <name><surname>Makedonska</surname><given-names>Nataliia</given-names></name>
          <name><surname>Gable</surname><given-names>Carl W</given-names></name>
          <name><surname>Painter</surname><given-names>Scott L</given-names></name>
          <name><surname>Viswanathan</surname><given-names>Hari S</given-names></name>
        </person-group>
        <article-title>dfnWorks: A discrete fracture network framework for modeling subsurface flow and transport</article-title>
        <source>Computers &amp; Geosciences</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <volume>84</volume>
        <pub-id pub-id-type="doi">10.1016/j.cageo.2015.08.001</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

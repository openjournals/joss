<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1408</article-id>
<article-id pub-id-type="doi">10.21105/joss.01408</article-id>
<title-group>
<article-title>xml2jupyter: Mapping parameters between XML and Jupyter
widgets</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7440-2905</contrib-id>
<string-name>Randy Heiland</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9450-2850</contrib-id>
<string-name>Daniel Mishler</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-9583-2234</contrib-id>
<string-name>Tyler Zhang</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7166-8329</contrib-id>
<string-name>Eric Bower</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-9925-0151</contrib-id>
<string-name>Paul Macklin</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Intelligent Systems Engineering, Indiana
University</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-01-31">
<day>31</day>
<month>1</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>39</issue>
<fpage>1408</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Jupyter</kwd>
<kwd>XML</kwd>
<kwd>GUI</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Jupyter Notebooks Perkel
  (<xref alt="2018" rid="ref-Nature_2018_Jupyter" ref-type="bibr">2018</xref>)
  provide executable documents (in a variety of programming languages)
  that can be run in a web browser. When a notebook contains graphical
  widgets, it becomes an easy-to-use graphical user interface (GUI).
  Many scientific simulation packages use text-based configuration files
  to provide parameter values and run at the command line without a
  graphical interface. Manually editing these files to explore how
  different values affect a simulation can be burdensome for technical
  users, and impossible to use for those with other scientific
  backgrounds. xml2jupyter is a Python package that addresses these
  scientific bottlenecks. It provides a mapping between configuration
  files, formatted in the Extensible Markup Language (XML), and Jupyter
  widgets. Widgets are automatically generated from the XML file and
  these can, optionally, be incorporated into a larger GUI for a
  simulation package, and optionally hosted on cloud resources. Users
  modify parameter values via the widgets, and the values are written to
  the XML configuration file which is input to the simulation’s
  command-line interface. xml2jupyter has been tested using PhysiCell
  (<xref alt="Ghaffarizadeh et al., 2018" rid="ref-PhysiCellU003A2018" ref-type="bibr">Ghaffarizadeh
  et al., 2018</xref>), an open source, agent-based simulator for
  biology, and it is being used by students for classroom and research
  projects. In addition, we use xml2jupyter to help create Jupyter GUIs
  for PhysiCell-related applications running on nanoHUB
  (<xref alt="Madhavan et al., 2013" rid="ref-nanoHUB_2013" ref-type="bibr">Madhavan
  et al., 2013</xref>).</p>
  <p>A PhysiCell configuration file defines model-specific
  <monospace>&lt;user_parameters&gt;</monospace> in XML. Each parameter
  element consists of its name with attributes, defining its data
  <italic>type</italic>, <italic>units</italic> (optional),
  <italic>description</italic> (optional), whether the widget should be
  <italic>hidden</italic> (optional), and the parameter’s default value.
  The attributes will determine the appearance and behavior of the
  Jupyter widget. For numeric widgets (the most common type for
  PhysiCell), xml2jupyter will calculate a delta step size as a function
  of the default value and this step size will be used by the widget’s
  graphical increment/decrement feature.</p>
  <p>To illustrate, we show the following simple XML example, containing
  each of the four (currently) supported data types and the various
  attributes:</p>
  <preformat>&lt;PhysiCell_settings&gt;
  &lt;user_parameters&gt;
    &lt;radius type=&quot;double&quot; units=&quot;micron&quot;
        description=&quot;initial tumor radius&quot;&gt;250.0
    &lt;/radius&gt;
    &lt;threads type=&quot;int&quot;&gt;8&lt;/threads&gt;
    &lt;color type=&quot;string&quot; hidden=&quot;true&quot;&gt;red&lt;/color&gt;
    &lt;fix_persistence type=&quot;bool&quot;&gt;True&lt;/fix_persistence&gt;
  &lt;/user_parameters&gt;
&lt;/PhysiCell_settings&gt;</preformat>
  <p>When we map this into Jupyter widgets, we obtain the rendered
  results in Figure 1. Notice the <monospace>color</monospace> parameter
  is not displayed since we specified it should be hidden in the XML.
  The name of the other parameters, their values, and attributes, if
  present, are displayed in rows (as disabled Jupyter button widgets).
  Using alternating row colors (“zebra stripes”) helps visually match
  associated fields and avoid changing the wrong parameter value. For
  numeric widgets (type “int” or “double”), we compute a delta step
  value based on the magnitude (log) of the initial value. For example,
  the <monospace>radius</monospace> widget will have a step value of 10,
  whereas <monospace>threads</monospace> will have a step value of
  1.</p>
  <fig>
    <caption><p>Simple example of XML parameters as Jupyter
    widgets.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="images/simple_widgets.png" xlink:title="" />
  </fig>
  <p>For a more realistic example, consider the
  <monospace>config_biorobots.xml</monospace> configuration file (found
  in the <monospace>config_samples</monospace> directory). The XML
  elements in the <monospace>&lt;user_parameters&gt;</monospace> block
  include the (optional) <italic>description</italic> attribute which
  briefly describes the parameter and is displayed in another widget. To
  demonstrate xml2jupyter on this XML file, one would: 1) clone or
  download the repository, 2) copy the XML configuration file to the
  root directory, and 3) run the <monospace>xml2jupyter.py</monospace>
  script, providing the XML file as an argument.</p>
  <preformat>$ cp config_samples/config_biorobots.xml .
$ python xml2jupyter.py config_biorobots.xml</preformat>
  <p>The <monospace>xml2jupyter.py</monospace> script parses the XML and
  generates a Python module, <monospace>user_params.py</monospace>,
  containing the Jupyter widgets, together with methods to populate
  their values from the XML and write their values back to the XML. To
  “validate” the widgets were generated correctly, one could, minimally,
  open <monospace>user_params.py</monospace> in an editor and inspect
  it. But to actually see the widgets rendered in a notebook, we provide
  a simple test:</p>
  <preformat>$ python xml2jupyter.py config_biorobots.xml test_user_params.py
$ jupyter notebook test_gui.ipynb</preformat>
  <p>This should display a minimal notebook in your browser and, after
  selecting <monospace>Run all</monospace> in the
  <monospace>Cell</monospace> menu, you should see the notebook shown in
  Figure 2.</p>
  <fig>
    <caption><p>The biorobots parameters rendered as Jupyter
    widgets.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="images/test_biorobots_params.png" xlink:title="" />
  </fig>
</sec>
<sec id="physicell-jupyter-gui">
  <title>PhysiCell Jupyter GUI</title>
  <p>Our ultimate goal is to generate a fully functional GUI for
  PhysiCell users. xml2jupyter provides one important piece of this -
  dynamically generating widgets for custom user parameters for a model.
  By adding additional Python modules to provide additional components
  (tabs) of the GUI that are common to all PhysiCell models, a user can
  configure, run, and visualize output from a simulation. Two tabs that
  provide visualization of output files are shown in Figure 3 with
  results from the <italic>biorobots</italic> simulation. Note that some
  of the required modules are not available in the Python standard
  library, e.g., Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-HunterU003A2007" ref-type="bibr">Hunter,
  2007</xref>) and SciPy
  (<xref alt="Oliphant, 2007" rid="ref-OliphantU003A2007U003APSCU003A1251563.1251830" ref-type="bibr">Oliphant,
  2007</xref>). We provide instructions for installing these additional
  dependencies in the repository README.</p>
  <fig>
    <caption><p>Plotting the biorobots (cells; left) and signals
    (substrates; right).</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="images/biorobots_About_montage.png" xlink:title="" />
  </fig>
</sec>
<sec id="extensions-and-discussion">
  <title>Extensions and Discussion</title>
  <p>We hope others will be inspired to extend the core idea of this
  project to other text-based configuration files. XML is only one of
  several data-interchange formats and, although we created this tool
  for XML-based configurations based on needs to create GUIs for
  PhysiCell projects, the approach should be more broadly applicable to
  these other formats. And while the additional Python modules that
  provide visualization are also tailored to PhysiCell output, they can
  serve as templates for other scientific applications whose input and
  output file formats provide similar functionality. </p>
  <p>xml2jupyter has helped us port PhysiCell-related Jupyter tools to
  nanoHUB, a scientific cloud for nanoscience education and research
  that includes running interactive simulations in a browser. For
  example, Figure 4 shows the xml2jupyter-generated <italic>User
  Params</italic> tab in our
  <ext-link ext-link-type="uri" xlink:href="https://nanohub.org/tools/pc4cancerbots"><monospace>pc4cancerbots</monospace></ext-link>
  tool running on nanoHUB. Figure 5 shows the cells (upper-left) and
  three different substrate plots for this same tool. This particular
  model and simulation is described in this
  <ext-link ext-link-type="uri" xlink:href="https://www.youtube.com/watch?v=wuDZ40jW__M">video</ext-link>.</p>
  <p>Other PhysiCell-related nanoHUB tools that have been created using
  xml2jupyter include
  <ext-link ext-link-type="uri" xlink:href="https://nanohub.org/tools/pc4heterogen"><monospace>pc4heterogen</monospace></ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://nanohub.org/tools/pcisa"><monospace>pcISA</monospace></ext-link>,
  and
  <ext-link ext-link-type="uri" xlink:href="https://nanohub.org/tools/pc4cancerimmune"><monospace>pc4cancerimmune</monospace></ext-link>.
  Readers can create a free account on nanoHUB and run these simulations
  for themselves. We encourage students to use xml2jupyter to create
  their own nanoHUB tools of PhysiCell models that 1) can be run and
  evaluated by the instructor, 2) can be shared with others, and 3)
  become part of a student’s living portfolio. (Another repository,
  https://github.com/rheiland/tool4nanobio, provides instructions and
  scripts to help generate a full GUI from an existing PhysiCell
  model.)</p>
  <fig>
    <caption><p>The cancer biorobots parameters in a nanoHUB Jupyter
    application.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="images/nanohub_cancerbots_params.png" xlink:title="" />
  </fig>
  <fig>
    <caption><p>The cancer biorobots Jupyter notebook on
    nanoHUB.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="images/nanohub_cancerbots_2x2.png" xlink:title="" />
  </fig>
  <p>We welcome suggestions and contributions to xml2jupyter. For
  example, currently, we arrange the generated parameter widgets
  vertically, one row per parameter. This is an appropriate layout for
  an educational setting. But if a GUI will be used by researchers who
  are already familiar with the parameters, it may be preferable to
  generate a more compact layout of widgets, e.g., in a matrix with only
  the parameter names and values. Moreover, it may be useful to provide
  additional control over styling and placement by a separate style.xml
  or similar file, or by an external cascading style sheet. We will
  explore these options in the future, with the aim of separating as
  much GUI specification and styling from the original scientific
  application as possible. Such a decoupling would make it easier for
  scientific developers to continue refining their scientific codes
  without worrying about impact on the GUI, and without undue
  encumbrance by non-scientific annotations. </p>
  <p>Also, we currently provide just 2-D visualizations of (spatial)
  data. In the near future, we will provide visualizations of 3-D models
  and welcome suggestions from the community.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We thank the National Science Foundation (1720625) and the National
  Cancer Institute (U01-CA232137-01) for generous support. Undergraduate
  and graduate students in the Intelligent Systems Engineering
  department at Indiana University provided internal testing, and
  students and researchers within the NSF nanoMFG (1720701) group
  generously provided external testing. All of their feedback resulted
  in considerable improvements to this project. Finally, we thank our
  collaborators at Purdue University, especially Martin Hunt and Steve
  Clark, who provided technical support with nanoHUB and Jupyter.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-PhysiCellU003A2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Ghaffarizadeh</surname><given-names>Ahmadreza</given-names></name>
          <name><surname>Heiland</surname><given-names>Randy</given-names></name>
          <name><surname>Friedman</surname><given-names>Samuel H.</given-names></name>
          <name><surname>Mumenthaler</surname><given-names>Shannon M.</given-names></name>
          <name><surname>Macklin</surname><given-names>Paul</given-names></name>
        </person-group>
        <article-title>PhysiCell: An open source physics-based cell simulator for 3-d multicellular systems</article-title>
        <source>PLOS Computational Biology</source>
        <publisher-name>Public Library of Science</publisher-name>
        <year iso-8601-date="2018-02">2018</year><month>02</month>
        <volume>14</volume>
        <issue>2</issue>
        <uri>https://doi.org/10.1371/journal.pcbi.1005991</uri>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005991</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-HunterU003A2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>J. D.</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D graphics environment</article-title>
        <source>Computing In Science &amp; Engineering</source>
        <publisher-name>IEEE COMPUTER SOC</publisher-name>
        <year iso-8601-date="2007">2007</year>
        <volume>9</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-KluyverU003A2016aa">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Kluyver</surname><given-names>Thomas</given-names></name>
          <name><surname>Ragan-Kelley</surname><given-names>Benjamin</given-names></name>
          <name><surname>Pérez</surname><given-names>Fernando</given-names></name>
          <name><surname>Granger</surname><given-names>Brian</given-names></name>
          <name><surname>Bussonnier</surname><given-names>Matthias</given-names></name>
          <name><surname>Frederic</surname><given-names>Jonathan</given-names></name>
          <name><surname>Kelley</surname><given-names>Kyle</given-names></name>
          <name><surname>Hamrick</surname><given-names>Jessica</given-names></name>
          <name><surname>Grout</surname><given-names>Jason</given-names></name>
          <name><surname>Corlay</surname><given-names>Sylvain</given-names></name>
          <name><surname>Ivanov</surname><given-names>Paul</given-names></name>
          <name><surname>Avila</surname><given-names>Damián</given-names></name>
          <name><surname>Abdalla</surname><given-names>Safia</given-names></name>
          <name><surname>Willing</surname><given-names>Carol</given-names></name>
        </person-group>
        <article-title>Jupyter notebooks – a publishing format for reproducible computational workflows</article-title>
        <person-group person-group-type="editor">
          <name><surname>Loizides</surname><given-names>F.</given-names></name>
          <name><surname>Schmidt</surname><given-names>B.</given-names></name>
        </person-group>
        <publisher-name>IOS Press</publisher-name>
        <year iso-8601-date="2016">2016</year>
        <pub-id pub-id-type="doi">10.3233/978-1-61499-649-1-87</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-nanoHUB_2013">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Madhavan</surname><given-names>Krishna</given-names></name>
          <name><surname>Zentner</surname><given-names>Lynn</given-names></name>
          <name><surname>Farnsworth</surname><given-names>Victoria</given-names></name>
          <name><surname>Shivarajapura</surname><given-names>Swaroop</given-names></name>
          <name><surname>Zentner</surname><given-names>Michael</given-names></name>
          <name><surname>Denny</surname><given-names>Nathan</given-names></name>
          <name><surname>Klimeck</surname><given-names>Gerhard</given-names></name>
        </person-group>
        <article-title>nanoHUB.org: Cloud-based services for nanoscale modeling, simulation, and education</article-title>
        <source>Nanotechnology Reviews</source>
        <year iso-8601-date="2013">2013</year>
        <volume>2</volume>
        <issn>21919097</issn>
        <uri>https://www.degruyter.com/view/j/ntrev.2013.2.issue-1/ntrev-2012-0043/ntrev-2012-0043.xml</uri>
        <pub-id pub-id-type="doi">10.1515/ntrev-2012-0043</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Nature_2018_Jupyter">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Perkel</surname><given-names>Jeffrey M.</given-names></name>
        </person-group>
        <article-title>Why jupyter is data scientists’ computational notebook of choice</article-title>
        <source>Nature</source>
        <year iso-8601-date="2018">2018</year>
        <volume>563</volume>
        <uri>https://www.nature.com/articles/d41586-018-07196-1</uri>
        <pub-id pub-id-type="doi">10.1038/d41586-018-07196-1</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-OliphantU003A2007U003APSCU003A1251563.1251830">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        </person-group>
        <article-title>Python for scientific computing</article-title>
        <source>Computing in Science and Engg.</source>
        <publisher-name>IEEE Educational Activities Department</publisher-name>
        <publisher-loc>Piscataway, NJ, USA</publisher-loc>
        <year iso-8601-date="2007-05">2007</year><month>05</month>
        <volume>9</volume>
        <issue>3</issue>
        <issn>1521-9615</issn>
        <uri>http://dx.doi.org/10.1109/MCSE.2007.58</uri>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.58</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1083</article-id>
<article-id pub-id-type="doi">10.21105/joss.01083</article-id>
<title-group>
<article-title>GFAKluge: A C++ library and command line utilities for
the Graphical Fragment Assembly formats</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5448-1653</contrib-id>
<string-name>Eric T. Dawson</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-9130-1006</contrib-id>
<string-name>Richard Durbin</string-name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Division of Cancer Epidemiology and Genetics, National
Cancer Institute, Rockville, MD, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Genetics, University of Cambridge, Cambridge,
UK</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Wellcome Sanger Institute, Hinxton, UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2018-09-17">
<day>17</day>
<month>9</month>
<year>2018</year>
</pub-date>
<volume>4</volume>
<issue>33</issue>
<fpage>1083</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>GFA</kwd>
<kwd>genome assembly</kwd>
<kwd>bioinformatics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>GFAKluge is a set of command line utilities and a C++ library for
  parsing and manipulating the Graphical Fragment Assembly (GFA) format.
  Genome assembly algorithms often use graph structures to represent
  relationships between reads during the assembly process. Such
  information is typically thrown away when assemblies are converted to
  FASTA files of contig sequences. Previous attempts to convey graph
  information did not gain widespread acceptance because there were no
  standard representations that were easily parsed and extensively used.
  The Graphical Fragment Assembly (GFA) format was proposed as a way to
  encode the graph structure of an assembly in a human-readable text
  format (<xref alt="Li, 2014" rid="ref-GFAOriginal" ref-type="bibr">Li,
  2014</xref>). GFA aims to provide a single format for interchange
  between software for assembly, scaffolding, assessment and
  visualization. Such programs are often written in high-performance
  programming languages such as C or C++. GFAKluge facilitates
  interprogram exchange by providing a high-level C++ API for developers
  and a set of command line tools for users. We hope the availability of
  an open-source, easily extensible API will encourage software
  developers to consider adding support for GFA to their bioinformatics
  programs.
  <italic>Homepage:</italic> https://github.com/edawson/gfakluge
  <italic>License:</italic> MIT</p>
</sec>
<sec id="command-line-utilities">
  <title>Command Line Utilities</title>
  <p>GFAKluge also provides a command line interface for working with
  GFA. This includes support for common tasks on assemblies such as
  calculating assembly N50 or graph statistics. There are also methods
  for merging assemblies, reformating files for readability, and
  converting between the GFA 1.0 and GFA 2.0 specifications. A tool for
  constructing basic variation graphs from a FASTA file and a VCF file
  is also included. Many other tools exist for manipulating the GFA
  formats
  (<xref alt="Myers et al., 2015" rid="ref-GFA-SPEC" ref-type="bibr">Myers
  et al., 2015</xref>), though only RGFA
  (<xref alt="Gonnella &amp; Kurtz, 2016" rid="ref-RGFA" ref-type="bibr">Gonnella
  &amp; Kurtz, 2016</xref>), GfaPy
  (<xref alt="Gonnella &amp; Kurtz, 2017" rid="ref-GfaPy" ref-type="bibr">Gonnella
  &amp; Kurtz, 2017</xref>) and ABySS2.0
  (<xref alt="Jackman et al., 2017" rid="ref-ABySS2.0" ref-type="bibr">Jackman
  et al., 2017</xref>) are known to produce and consume both versions.
  By allowing interconversion between the compatible subsets of the
  formats, the <monospace>gfak convert</monospace> tool allows programs
  that usually can’t communicate to share data without changes to their
  code. We have used GFAKluge to convert GFA from TwoPaCo
  (<xref alt="Minkin et al., 2016" rid="ref-TwoPaCo" ref-type="bibr">Minkin
  et al., 2016</xref>) for visualization in Bandage
  (<xref alt="Wick et al., 2015" rid="ref-Bandage" ref-type="bibr">Wick
  et al., 2015</xref>), to calculate assembly statistics from the Falcon
  assembler
  (<xref alt="Chin et al., 2016" rid="ref-Falcon" ref-type="bibr">Chin
  et al., 2016</xref>), and to extract FASTA from a
  <monospace>vg msga</monospace> assembly
  (<xref alt="Garrison et al., 2018" rid="ref-vg" ref-type="bibr">Garrison
  et al., 2018</xref>).</p>
  <preformat>   # Convert GFA 2.0 from TwoPaCo to GFA 1.0 for ingestion by Bandage.  
   gfak convert -S 1.0 data/gfa_2.gfa  

   # Calculate assembly statistics  
   gfak stats -a data/gfa_2.gfa  

   # Extract FASTA entries from a GFA file  
   gfak extract data/gfa_2.gfa  
  </preformat>
  <p>The full list of <monospace>gfak</monospace> commands follows:</p>
  <preformat>   convert: Convert between GFA 0.1 &lt;-&gt; 1.0 &lt;-&gt; 2.0
   diff:    Determine whether two GFA files have identical graphs
   extract: Convert the S lines of a GFA file to FASTA format.
   fillseq: Add sequences from a FASTA file to S lines.
   ids:     Coordinate the ID spaces of multiple GFA graphs.
   concat:  Merge GFA graphs (without ID collisions).
   sort:    Print a GFA file in HSLP / HSEFGUO order.
   stats:   Get assembly statistics (e.g. N50) for a GFA file.
   subset:  Extract the subgraph between two IDs in a graph.
   trim:    Remove elements from a GFA graph.</preformat>
  <p>Examples of most commands are included in the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/edawson/gfakluge/blob/master/examples.md">examples.md
  file</ext-link>.</p>
</sec>
<sec id="integrating-gfakluge-into-an-existing-program">
  <title>Integrating GFAKluge into an existing program</title>
  <p>As an example of how to use the GFAKluge API, we briefly summarize
  its use in the variation graph toolkit
  <ext-link ext-link-type="uri" xlink:href="https://github.com/vgteam/vg">vg</ext-link>
  (<xref alt="Garrison et al., 2018" rid="ref-vg" ref-type="bibr">Garrison
  et al., 2018</xref>). vg creates bidirected sequence graphs from
  assemblies and population variation that can then be used for read
  mapping and variant calling. We incorporated GFAKluge into vg to
  support input and output of GFA. Reading in a GFA file requires one
  line of code and is agnostic to the GFA version used. Converting from
  GFA to vg’s internal structures and vice versa requires approximately
  forty lines of code. Changing output from GFA v1.0 to GFA v2.0
  requires a single API call. This allows vg to take assemblies in GFA
  format from TwoPaCo and many other assembly algorithms. The gfak
  command line tools can be used to calculate assembly graph statistics
  on graphs produced by vg. A full description of the developer API is
  available in the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/edawson/gfakluge/blob/master/interface.md">interface.md
  file</ext-link>.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-TwoPaCo">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Minkin</surname><given-names>Ilia</given-names></name>
          <name><surname>Pham</surname><given-names>Son</given-names></name>
          <name><surname>Medvedev</surname><given-names>Paul</given-names></name>
        </person-group>
        <article-title>TwoPaCo: An efficient algorithm to build the compacted de bruijn graph from many complete genomes</article-title>
        <source>Bioinformatics</source>
        <year iso-8601-date="2016">2016</year>
        <volume>33</volume>
        <pub-id pub-id-type="doi">doi:10.1093/bioinformatics/btw609</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Falcon">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Chin</surname><given-names>Chen-Shan</given-names></name>
          <name><surname>Peluso</surname><given-names>Paul</given-names></name>
          <name><surname>Sedlazeck</surname><given-names>Fritz J</given-names></name>
          <name><surname>Nattestad</surname><given-names>Maria</given-names></name>
          <name><surname>Concepcion</surname><given-names>Gregory T</given-names></name>
          <name><surname>Clum</surname><given-names>Alicia</given-names></name>
          <name><surname>Dunn</surname><given-names>Christopher</given-names></name>
          <name><surname>O’Malley</surname><given-names>Ronan</given-names></name>
          <name><surname>Figueroa-Balderas</surname><given-names>Rosa</given-names></name>
          <name><surname>Morales-Cruz</surname><given-names>Abraham</given-names></name>
          <name><surname>Cramer</surname><given-names>Grant R</given-names></name>
          <name><surname>Delledonne</surname><given-names>Massimo</given-names></name>
          <name><surname>Luo</surname><given-names>Chongyuan</given-names></name>
          <name><surname>Ecker</surname><given-names>Joseph R</given-names></name>
          <name><surname>Cantu</surname><given-names>Dario</given-names></name>
          <name><surname>Rank</surname><given-names>David R</given-names></name>
          <name><surname>Schatz</surname><given-names>Michael C</given-names></name>
        </person-group>
        <article-title>Phased diploid genome assembly with single-molecule real-time sequencing</article-title>
        <source>Nature Methods</source>
        <year iso-8601-date="2016">2016</year>
        <volume>13</volume>
        <pub-id pub-id-type="doi">doi:10.1038/nmeth.4035</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-vg">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Garrison</surname><given-names>Erik</given-names></name>
          <name><surname>Sirén</surname><given-names>Jouni</given-names></name>
          <name><surname>Novak</surname><given-names>Adam M</given-names></name>
          <name><surname>Hickey</surname><given-names>Glenn</given-names></name>
          <name><surname>Eizinga</surname><given-names>Jordan M</given-names></name>
          <name><surname>Dawson</surname><given-names>Eric T</given-names></name>
          <name><surname>Jones</surname><given-names>William</given-names></name>
          <name><surname>Lin</surname><given-names>Michael F</given-names></name>
          <name><surname>Paten</surname><given-names>Benedict</given-names></name>
          <name><surname>Durbin</surname><given-names>Richard</given-names></name>
        </person-group>
        <article-title>Variation graph toolkit improves read mapping by representing genetic variation in the reference</article-title>
        <source>Nature Biotechnology</source>
        <year iso-8601-date="2018">2018</year>
        <volume>36</volume>
        <pub-id pub-id-type="doi">doi:10.1038/nbt.4227</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Bandage">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wick</surname><given-names>R. R.</given-names></name>
          <name><surname>Schultz</surname><given-names>M. B.</given-names></name>
          <name><surname>Zobel</surname><given-names>J.</given-names></name>
          <name><surname>Holt</surname><given-names>K. E.</given-names></name>
        </person-group>
        <article-title>Bandage: Interactive visualisation of de novo genome assemblies</article-title>
        <source>Bioinformatics</source>
        <year iso-8601-date="2015">2015</year>
        <volume>31</volume>
        <pub-id pub-id-type="doi">doi:10.1093/bioinformatics/btv383</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-GFAOriginal">
      <element-citation publication-type="webpage">
        <person-group person-group-type="author">
          <name><surname>Li</surname><given-names>Heng</given-names></name>
        </person-group>
        <article-title>A proposal of the grapical fragment assembly format</article-title>
        <year iso-8601-date="2014">2014</year>
        <uri>http://lh3.github.io/2014/07/19/a-proposal-of-the-grapical-fragment-assembly-format</uri>
      </element-citation>
    </ref>
    <ref id="ref-GFA-SPEC">
      <element-citation publication-type="webpage">
        <person-group person-group-type="author">
          <name><surname>Myers</surname><given-names>Gene</given-names></name>
          <name><surname>Jackman</surname><given-names>Shaun</given-names></name>
          <name><surname>Gonnella</surname><given-names>Giorgio</given-names></name>
          <name><surname>Chin</surname><given-names>Jason</given-names></name>
          <name><surname>Durbin</surname><given-names>Richard</given-names></name>
        </person-group>
        <article-title>Graphical fragment assembly (GFA) format specification</article-title>
        <year iso-8601-date="2015">2015</year>
        <uri>https://github.com/GFA-spec/GFA-spec</uri>
      </element-citation>
    </ref>
    <ref id="ref-GfaPy">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gonnella</surname><given-names>Giorgio</given-names></name>
          <name><surname>Kurtz</surname><given-names>Stefan</given-names></name>
        </person-group>
        <article-title>GfaPy: A flexible and extensible software library for handling sequence graphs in python</article-title>
        <source>Bioinformatics</source>
        <year iso-8601-date="2017">2017</year>
        <volume>33</volume>
        <pub-id pub-id-type="doi">doi:10.1093/bioinformatics/btx398</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-RGFA">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gonnella</surname><given-names>Giorgio</given-names></name>
          <name><surname>Kurtz</surname><given-names>Stefan</given-names></name>
        </person-group>
        <article-title>RGFA: Powerful and convenient handling of assembly graphs</article-title>
        <source>PeerJ</source>
        <year iso-8601-date="2016">2016</year>
        <volume>4</volume>
        <pub-id pub-id-type="doi">doi:10.7717/peerj.2681</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ABySS2.0">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Jackman</surname><given-names>Shaun D.</given-names></name>
          <name><surname>Varndervalk</surname><given-names>Benjamin P.</given-names></name>
          <name><surname>Mohamadi</surname><given-names>Hamid</given-names></name>
          <name><surname>Chu</surname><given-names>Justin</given-names></name>
          <name><surname>Yeo</surname><given-names>Sarah</given-names></name>
          <name><surname>Hammond</surname><given-names>S. Austin</given-names></name>
          <name><surname>Jahesh</surname><given-names>Golnaz</given-names></name>
          <name><surname>Khan</surname><given-names>Hamza</given-names></name>
          <name><surname>Coombe</surname><given-names>Lauren</given-names></name>
          <name><surname>Warren</surname><given-names>Rene L.</given-names></name>
          <name><surname>Birol</surname><given-names>Inanc</given-names></name>
        </person-group>
        <article-title>ABySS 2.0: Resource-efficient assembly of large genomes using a bloom filter</article-title>
        <source>Genome Research</source>
        <year iso-8601-date="2017">2017</year>
        <volume>27</volume>
        <pub-id pub-id-type="doi">doi:10.1101/gr.214346.116</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

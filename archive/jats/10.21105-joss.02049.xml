<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2049</article-id>
<article-id pub-id-type="doi">10.21105/joss.02049</article-id>
<title-group>
<article-title>MF2: A Collection of Multi-Fidelity Benchmark Functions
in Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6159-041X</contrib-id>
<string-name>Sander van Rijn</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Sebastian Schmitt</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Leiden University, The Netherlands</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Honda Research Institute Europe, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-04-07">
<day>7</day>
<month>4</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>52</issue>
<fpage>2049</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>optimization</kwd>
<kwd>benchmarks</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The field of (evolutionary) optimization algorithms often works
  with expensive black-box optimization problems. However, for the
  development of novel algorithms and approaches, real-world problems
  are not feasible due to their high computational cost. Instead,
  benchmark functions such as Sphere, Rastrigin, and Ackley are
  typically used. These functions are not only fast to compute, but also
  have known properties which are very helpful when examining the
  performance of new algorithms.</p>
  <p>As only a limited set of benchmark functions are typically used in
  the literature, compiling a set of implementations for the most
  commonly used functions is warranted. This ensures correctness of the
  functions, makes any results directly comparable, and simply saves
  researchers time from not having to implement the functions
  themselves. An example of a commonly used benchmark suite for
  optimizing continuous problems is the COCO BBOB software by Hansen et
  al.
  (<xref alt="2019" rid="ref-nikolaus_hansenU003A2019" ref-type="bibr">2019</xref>).</p>
  <p>As simulation-based problems in engineering are requiring
  increasingly more time and computation power, a new sub-field of
  <italic>multi-fidelity</italic> optimization has gained popularity. A
  multi-fidelity problem is characterised by having multiple versions of
  an evaluation function that differ in their accuracy of describing the
  real objective. A real-world example would be the aerodynamic
  efficiency of an airfoil: A <italic>low-fidelity</italic> simulation
  would use a coarse mesh, and give lower accuracy, but be fast to
  calculate, while a <italic>high-fidelity</italic> simulation would use
  a much finer mesh and therefore be more accurate while taking longer
  to calculate. Multi-fidelity methods aim to combine these multiple
  information sources to obtain better results in equal or less time
  compared to only using a single information source.</p>
  <p>To this end, new multi-fidelity benchmark functions have been
  introduced in the literature and are being adopted by other
  researchers. These multi-fidelity problems naturally benefit from
  having the different fidelities combined into a single ‘problem’. The
  existing single-fidelity benchmark suites that exist cannot be used
  for this field: no existing suite of benchmark functions currently
  uses such a structure, or can easily accomodate it. Therefore, this
  new class of benchmark problems is best served by introducing a new
  implementation suite because their structure is inherently different
  from other benchmarks. A new suite additionally gives more freedom to
  adapt to new multi fidelity benchmarks as the field continues to
  evolve and new needs become apparent.</p>
  <p>The <monospace>MF2</monospace> package provides a consistent Python
  implementation of a collection of these Multi-Fidelity Functions. It
  uses a standard interface that allows for querying single vectors or
  multiple row-vectors as a single matrix, relying on
  <monospace>numpy</monospace>’s optimized back-end to handle
  parallelization. It also offers a simple factory pattern interface for
  functions with parameters for e.g. correlation and dimensionality. A
  plot of how these implementations scale can be seen in
  <xref alt="Figure 1" rid="figU003Ascalability">Figure 1</xref>.</p>
  <p>At this moment, <monospace>MF2</monospace> has collected functions
  from the following previous works:</p>
  <list list-type="bullet">
    <list-item>
      <p>Forrester et al.
      (<xref alt="2007" rid="ref-forresterU003A2007" ref-type="bibr">2007</xref>)
      introduced a simple 1D bi-fidelity function for mostly
      illustrative purposes.</p>
    </list-item>
    <list-item>
      <p>Surjanovic &amp; Bingham
      (<xref alt="2013" rid="ref-simulationlibU003A2017" ref-type="bibr">2013</xref>)
      have previously collected a small collection of MATLAB/R
      implementations for the Borehole, Currin and Park91 A and B
      functions.</p>
    </list-item>
    <list-item>
      <p>Dong et al.
      (<xref alt="2015" rid="ref-dong_multi-fidelityU003A2015" ref-type="bibr">2015</xref>)
      introduced bi-fidelity versions of the Bohachevsky, Booth, Branin,
      Himmelblau and Six-hump Camelback functions.</p>
    </list-item>
    <list-item>
      <p>Toal
      (<xref alt="2015" rid="ref-toal_considerationsU003A2015" ref-type="bibr">2015</xref>)
      introduced correlation-adjustable multi-fidelity versions of the
      Branin, Paciorek, Hartmann3 and Trid functions.</p>
    </list-item>
  </list>
  <p>As no convenient existing implementations written in Python could
  be found during the authors’ research on how the accuracy of
  multi-fidelity surrogate models depends on the number of samples per
  fidelity, which required the evaluation of many independent model
  training and test sets, the decision was made to standardize the
  implementations and make them available for wider use.</p>
  <fig>
    <caption><p><bold>Scalability plot</bold> This plot shows how the
    evaluation time of high- and low-fidelity functions scales with the
    number of points <italic>N</italic> being passed in simultaneously.
    Running times were measured on a desktop PC with an Intel core i7
    5820k 6-core CPU, with Python 3.6.3 and Numpy 1.18.4. The times are
    divided by the time needed for N=1 as a normalization. This is done
    independently for each function and fidelity level. Results are
    grouped by function dimensionality. If there are multiple functions,
    the mean is plotted with error bars indicating the minimum and
    maximum time. Note that the 3D Hartmann3 and 6D Hartmann6 function
    are significantly more computationally expensive than other
    functions by definition, as they requires multiple matrix
    multiplications.
    <styled-content id="figU003Ascalability"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="../docs/_static/scalability.pdf" xlink:title="" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work is part of the research program DAMIOSO with project
  number 628.006.002, which is partly financed by the Netherlands
  Organisation for Scientific Research (NWO).</p>
  <p>The first author would like to thank dr. Matthijs van Leeuwen,
  prof. dr. Thomas Bäck, and dr. Markus Olhofer for their supervision
  and involvement in the DAMIOSO project.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-dong_multi-fidelityU003A2015">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Dong</surname><given-names>Huachao</given-names></name>
          <name><surname>Song</surname><given-names>Baowei</given-names></name>
          <name><surname>Wang</surname><given-names>Peng</given-names></name>
          <name><surname>Huang</surname><given-names>Shuai</given-names></name>
        </person-group>
        <article-title>Multi-Fidelity Information Fusion Based on Prediction of Kriging</article-title>
        <source>Struct. Multidiscip. Optim.</source>
        <year iso-8601-date="2015-06">2015</year><month>06</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2018-11-14">2018</year><month>11</month><day>14</day></date-in-citation>
        <volume>51</volume>
        <issue>6</issue>
        <issn>1615-147X</issn>
        <uri>https://link.springer.com/article/10.1007/s00158-014-1213-9</uri>
        <pub-id pub-id-type="doi">10.1007/s00158-014-1213-9</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-toal_considerationsU003A2015">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Toal</surname><given-names>David J. J.</given-names></name>
        </person-group>
        <article-title>Some Considerations Regarding the Use of Multi-Fidelity Kriging in the Construction of Surrogate Models</article-title>
        <source>Structural and Multidisciplinary Optimization</source>
        <year iso-8601-date="2015-06">2015</year><month>06</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2019-04-09">2019</year><month>04</month><day>09</day></date-in-citation>
        <volume>51</volume>
        <issue>6</issue>
        <issn>1615-147X, 1615-1488</issn>
        <uri>http://link.springer.com/10.1007/s00158-014-1209-5</uri>
        <pub-id pub-id-type="doi">10.1007/s00158-014-1209-5</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-simulationlibU003A2017">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Surjanovic</surname><given-names>S.</given-names></name>
          <name><surname>Bingham</surname><given-names>D.</given-names></name>
        </person-group>
        <article-title>Virtual library of simulation experiments: Test functions and datasets</article-title>
        <publisher-name>Retrieved October 10, 2017, from http://www.sfu.ca/~ssurjano</publisher-name>
        <year iso-8601-date="2013">2013</year>
      </element-citation>
    </ref>
    <ref id="ref-nikolaus_hansenU003A2019">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Hansen</surname><given-names>Nikolaus</given-names></name>
          <name><surname>Brockhoff</surname><given-names>Dimo</given-names></name>
          <name><surname>Mersmann</surname><given-names>Olaf</given-names></name>
          <name><surname>Tusar</surname><given-names>Tea</given-names></name>
          <name><surname>Tusar</surname><given-names>Dejan</given-names></name>
          <name><surname>ElHara</surname><given-names>Ouassim Ait</given-names></name>
          <name><surname>Sampaio</surname><given-names>Phillipe R.</given-names></name>
          <name><surname>Atamna</surname><given-names>Asma</given-names></name>
          <name><surname>Varelas</surname><given-names>Konstantinos</given-names></name>
          <name><surname>Batu</surname><given-names>Umut</given-names></name>
          <name><surname>Nguyen</surname><given-names>Duc Manh</given-names></name>
          <name><surname>Matzner</surname><given-names>Filip</given-names></name>
          <name><surname>Auger</surname><given-names>Anne</given-names></name>
        </person-group>
        <source>COmparing Continuous Optimizers: numbbo/COCO on Github</source>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2019-03">2019</year><month>03</month>
        <uri>https://doi.org/10.5281/zenodo.2594848</uri>
        <pub-id pub-id-type="doi">10.5281/zenodo.2594848</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-forresterU003A2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Forrester</surname><given-names>Alexander I. J</given-names></name>
          <name><surname>Sóbester</surname><given-names>András</given-names></name>
          <name><surname>Keane</surname><given-names>Andy J</given-names></name>
        </person-group>
        <article-title>Multi-Fidelity Optimization via Surrogate Modelling</article-title>
        <source>Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences</source>
        <year iso-8601-date="2007">2007</year>
        <volume>463</volume>
        <issue>2088</issue>
        <uri>https://royalsocietypublishing.org/doi/abs/10.1098/rspa.2007.1900</uri>
        <pub-id pub-id-type="doi">10.1098/rspa.2007.1900</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

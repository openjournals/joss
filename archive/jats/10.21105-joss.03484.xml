<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3484</article-id>
<article-id pub-id-type="doi">10.21105/joss.03484</article-id>
<title-group>
<article-title>SurPyval: Survival Analysis with Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-0872-7098</contrib-id>
<string-name>Derryn Knife</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Independent researcher</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-05-30">
<day>30</day>
<month>5</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>64</issue>
<fpage>3484</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>survival analysis</kwd>
<kwd>parameter estimation</kwd>
<kwd>censored data</kwd>
<kwd>truncated data</kwd>
<kwd>maximum likelihood</kwd>
<kwd>product spacing estimation</kwd>
<kwd>method of moments</kwd>
<kwd>mean square error</kwd>
<kwd>probability plotting</kwd>
<kwd>probability plotting parameter estimation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Survival analysis is being increasingly used by scientists, data
  scientists, engineers, econometricians, and many other professionals
  to solve their problems. Survival analysis is a unique set of tools
  that are used to estimate either the time to an event or the chance of
  an event happening. That is, survival analysis allows you to estimate
  how long something is likely to last or what risk there is of some
  event happening in the future. This is vital for fields such as the
  medical sciences where we need to know how long someone with a
  particular diagnosis might live or if a treatment or intervention is
  successful at prolonging life. In engineering it is useful to
  understand the risk that fielded equipment might fail. For an
  insurance company it is necessary to help price policies and in
  economics it is useful for estimating the durations of recessions or
  the time to the next recession. Survival analysis in these examples
  encounter interesting kinds of data, for example, engineers conducting
  life testing may have components that do not fail during the
  observation period, or that might fail between two inspections. In
  this case the data is said to be censored. In medical trials you might
  have subjects enter a trial later than other subjects while insurance
  claims are only lodged above the excess value on the policy. In these
  cases the data is said to be truncated. These considerations are
  unique to survival analysis and are critical to handle correctly to
  make appropriate predictions or find significant differences.</p>
  <p><italic>SurPyval</italic> is a pure-Python package, making
  installation and maintenance simple. Furthermore,
  <italic>SurPyval</italic> is a flexible and robust survival analysis
  package that can take as input an arbitrary combination of observed,
  censored, and truncated data over a wide number of distributions and
  their variations. For this reason <italic>SurPyval</italic> is likely
  to be of interest to a wide field of analysts in broad industries
  including finance, insurance, engineering, medical science,
  agricultural science, economics, and many others.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Some basic survival analysis techniques are available in
  <italic>SciPy</italic>
  (<xref alt="Virtanen et al., 2020" rid="ref-2020SciPy-NMeth" ref-type="bibr">Virtanen
  et al., 2020</xref>), and other more complete Python packages for
  survival analysis, including <italic>lifelines</italic>
  (<xref alt="Davidson-Pilon, 2019" rid="ref-davidson2019lifelines" ref-type="bibr">Davidson-Pilon,
  2019</xref>) and <italic>reliability</italic>
  (<xref alt="Reid, 2021" rid="ref-matthew_reid_2021_5030847" ref-type="bibr">Reid,
  2021</xref>), offer excellent methods for many applications.
  <italic>SurPyval</italic> fills a gap in the Python ecosystem by
  focusing on the flexibility to accommodate any arbitrary combination
  of observed failures (or deaths); left, right, or interval censored;
  and left or right truncated data with a single format. Another
  powerful feature of <italic>SurPyval</italic> is that it lets users
  select an estimation method for their circumstances. Maximum
  Likelihood Estimation (MLE) is used in most other applications, but
  <italic>SurPyval</italic> also implements Maximum Product of Spacing,
  Method of Moments, Probability Plotting, Mean Square Error, and
  Expectation-Maximisation. This variety of estimation methods gives
  users of <italic>SurPyval</italic> greater flexibility in their choice
  of which parameter estimation technique to use when fitting
  distributions to their data. Commercial packages are well developed
  but can be expensive. <italic>R</italic> is excellent for survival
  analysis but many analysts now use Python as is explained in the
  <italic>lifelines</italic> paper. Therefore there is a need to have
  another flexible and open source python package to do survival
  analysis.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p><italic>SurPyval</italic> is grouped into two modules, these are
  parametric and non-parametric modules. For the parametric module
  <italic>SurPyval</italic> offers several methods to estimate
  parameters; these are Maximum Likelihood Estimation (MLE), Mean Square
  Error (MSE), Method of Probability Plotting (MPP), Maximum Product of
  Spacing (MPS), Method of Moments (MOM), and Expectation-Maximisation
  (EM). The EM is only used for mixture models.</p>
  <p>For the Non-Parametric estimation <italic>SurPyval</italic> can
  estimate the survival distribution using either the Kaplan-Meier
  (<xref alt="Kaplan &amp; Meier, 1958" rid="ref-kaplan1958nonparametric" ref-type="bibr">Kaplan
  &amp; Meier, 1958</xref>), Nelson-Aalen
  (<xref alt="Nelson, 1969" rid="ref-nelson1969hazard" ref-type="bibr">Nelson,
  1969</xref>);
  (<xref alt="Aalen, 1978" rid="ref-aalen1978nonparametric" ref-type="bibr">Aalen,
  1978</xref>), Fleming-Harrington
  (<xref alt="Fleming &amp; Harrington, 1984" rid="ref-fleming1984nonparametric" ref-type="bibr">Fleming
  &amp; Harrington, 1984</xref>), or the Turnbull
  (<xref alt="Turnbull, 1976" rid="ref-turnbull1976empirical" ref-type="bibr">Turnbull,
  1976</xref>) estimators. Support for data types and estimation methods
  can be seen in the table below.</p>
  <table-wrap>
    <table>
      <thead>
        <tr>
          <th>Method</th>
          <th>Para/Non-Para</th>
          <th>Observed</th>
          <th>Censored</th>
          <th>Truncated</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><bold>MLE</bold></td>
          <td>Parametric</td>
          <td>Yes</td>
          <td>Yes</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><bold>MPP</bold></td>
          <td>Parametric</td>
          <td>Yes</td>
          <td>Yes</td>
          <td>Limited</td>
        </tr>
        <tr>
          <td><bold>MSE</bold></td>
          <td>Parametric</td>
          <td>Yes</td>
          <td>Yes</td>
          <td>Limited</td>
        </tr>
        <tr>
          <td><bold>MOM</bold></td>
          <td>Parametric</td>
          <td>Yes</td>
          <td>No</td>
          <td>No</td>
        </tr>
        <tr>
          <td><bold>MPS</bold></td>
          <td>Parametric</td>
          <td>Yes</td>
          <td>Yes</td>
          <td>No</td>
        </tr>
        <tr>
          <td><bold>Kaplan-Meier</bold></td>
          <td>Non-Parametric</td>
          <td>Yes</td>
          <td>Right only</td>
          <td>Left only</td>
        </tr>
        <tr>
          <td><bold>Nelson-Aalen</bold></td>
          <td>Non-Parametric</td>
          <td>Yes</td>
          <td>Right only</td>
          <td>Left only</td>
        </tr>
        <tr>
          <td><bold>Fleming-Harrington</bold></td>
          <td>Non-Parametric</td>
          <td>Yes</td>
          <td>Right only</td>
          <td>Left only</td>
        </tr>
        <tr>
          <td><bold>Turnbull</bold></td>
          <td>Non-Parametric</td>
          <td>Yes</td>
          <td>Yes</td>
          <td>Yes</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p><italic>SurPyval</italic> achieves this flexibility with a simple
  API. <italic>SurPyval</italic> uses a data input API, the ‘xcnt’
  format, that can be used to define any arbitrary combination of
  censored or truncated data. ‘x’ is the value at the observation, ‘c’
  is the censoring flag, ‘n’ is the counts, and ‘t’ is the truncation
  values. <italic>SurPyval</italic> uses the convention for the censor
  flag where -1 is left censored, 0 is an observed value, 1 is right
  censored, and 2 is intervally censored. Utilities have also been
  created to help users transform their data into the ‘xcnt’ format if
  they have it in another format. A lot of survival data is provided in
  an observed and suspended format, this is where you have a list of the
  failure times and a list of the suspended times: for example, failures
  of [1, 2, 3, 4, 5] and suspended times of [1, 2, 3].
  <italic>SurPyval</italic> refers to this format as the ‘fs’
  format.</p>
  <p>For Non-Parametric analysis <italic>SurPyval</italic> takes as
  input the ‘xcnt’ format, but the KM, NA, and FH estimators are
  calculated using the ‘xrd’ format. This format takes ‘x’ as the value
  of the observation, ‘r’ as the count of items at risk at each ‘x’, and
  ‘d’ is the number of deaths/failures at each time ‘x’. Once data is in
  this format it is possible to compute the KM, NA, or FH estimators.
  For the Turnbull estimator the values of ‘x’, ‘r’, and ‘d’ are
  computed using Turnbull’s algorithm; ‘x’, ‘r’, and ‘d’ estimates
  account for truncation and censoring. These values can then be used
  with the KM, NA, or FH estimator to get an estimate of the
  distribution.</p>
  <p>Maximum Likelihood Estimation can be used for any arbitrary
  combination of censoring and truncation. The Probability Plotting and
  Mean Square Error methods can be used with arbitrarily censored data
  and limited truncation. Specifically, these methods are limited if the
  maximum and minimum of the observed data are truncated observations.
  This is because the Turnbull Non-Parametric Maximum Likelihood
  Estimator (NPMLE) cannot assume the shape of the distribution and
  therefore cannot be used to estimate by how much the highest and
  lowest values are truncated. The Maximum Product of Spacing estimation
  can be used with censored observations. The Method of Moment
  estimation can only be used with observed data, i.e. no censoring or
  truncation.</p>
  <p><italic>SurPyval</italic> uses <italic>SciPy</italic> for numerical
  optimisation but also aims to imitate as close as possible the API for
  parameter estimation, specifically, the use of the
  <monospace>fit()</monospace> method. The main difference between
  <italic>SciPy</italic> and <italic>SurPyval</italic> is that
  <italic>SurPyval</italic> returns an object. The intent of this is to
  capture the distribution in an object for subsequent use. This could
  be used in Monte Carlo simulations using the
  <monospace>random()</monospace> method or it could be used in
  applications like <italic>reliability</italic> for interval
  optimisations.</p>
  <p>Unlike other survival analysis packages <italic>SurPyval</italic>
  allows users fix any parameter with any distribution. This is similar
  to <italic>SciPy</italic> which allows the location, shape, and scale
  parameters to be fixed. In <italic>SurPyval</italic> this is done
  using the <monospace>fixed</monospace> keyword with a dictionary of
  the name and value of the fixed parameter and value.</p>
</sec>
<sec id="optimisations">
  <title>Optimisations</title>
  <p><italic>SurPyval</italic>, inspired by <italic>lifelines</italic>,
  uses <italic>autograd</italic>
  (<xref alt="Maclaurin et al., 2015" rid="ref-maclaurin2015autograd" ref-type="bibr">Maclaurin
  et al., 2015</xref>) autodifferentiation to calculate the jacobians
  and hessians needed for optimisations in parametric analysis.
  Additionally, <italic>SurPyval</italic> uses lessons from deep
  learning to improve the stability of estimation. Concretely,
  <italic>SurPyval</italic> uses a modified ELU function
  (<xref alt="Clevert et al., 2015" rid="ref-clevert2015fast" ref-type="bibr">Clevert
  et al., 2015</xref>) to transform bounded parameters to be unbounded.
  For example, the alpha parameter for a Weibull distribution is
  supported on the half-real line, (0, Inf). Using the modified ELU
  function the input to the optimizer is transformed to be supported
  over the full real line (-Inf, Inf) but then will transform this value
  to a positive number when calculating the objective function. This
  reduces the risk of optimisations failing because the numeric gradient
  might ‘overshoot’ and hit a bound therefore produce undefined results
  which in turn causes the autodifferentiation to fail. The ELU is also
  useful for autodifferentiation because it is continuously
  differentiable which eliminates discrete jumps in the gradient.
  Another advantage of this improvement is that it can be used to
  robustly estimate offsets (for example the ‘gamma’ parameter) for half
  real-line supported distributions. For example,
  <italic>SurPyval</italic> can be used to estimate the parameters of
  the four parameter Exponentiated-Weibull distribution, which is a
  feature that is absent from other currently available survival
  packages.</p>
  <p>Another optimisation used by <italic>SurPyval</italic> is the use
  of good initial approximations for parameter initialisation.
  Probability plotting methods do not require initial estimates of the
  parameters; which is in contrast to estimates using optimizers.
  Further, optimisation results are very sensitive to the initial
  estimates, if the initial estimate is too far from the actual result
  it can yield incredulous results. As such <italic>SurPyval</italic>
  uses either probability plotting estimates or estimates using
  transformed data with another distribution to do the initial estimate.
  Combining the use of autogradients, bound transformations, and close
  initial approximations, <italic>SurPyval</italic> is a stable software
  for estimating parameters for statistical distributions.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>Some examples of the API and how flexible it can be. Firstly, a
  simple estimate from random data:</p>
  <code language="python">from surpyval import Weibull
import numpy as np

np.random.seed(10)
# Weibull parameters
alpha = 10
beta  = 2

# Random samples
N = 30

x = Weibull.random(N, alpha, beta)

model = Weibull.fit(x)
print(model)</code>
  <preformat>Parametric Surpyval model with Weibull distribution fitted by MLE yielding 
parameters [9.71565772 2.33944554]</preformat>
  <p>Using offsets with SurPyval is a simple change by setting the
  offset parameter to True. Using data from Weibull’s paper
  (<xref alt="Weibull et al., 1951" rid="ref-weibull1951statistical" ref-type="bibr">Weibull
  et al., 1951</xref>) which introduced the wide applicability of the
  distribution to survival analysis, we can get a three parameter
  Weibull distribution:</p>
  <code language="python">from surpyval import Weibull
from surpyval.datasets import BoforsSteel

data = BoforsSteel.df

x = data['x']
n = data['n']

model = Weibull.fit(x=x, n=n, offset=True)
model.plot()
print(model)</code>
  <preformat>Offset Parametric Surpyval model with Weibull distribution fitted by MLE yielding 
parameters [7.14192522 2.6204524 ] with offset of 39.76562962867473</preformat>
  <fig>
    <caption><p>Weibull Data and Distribution</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="docs/images/weibull_plot.png" xlink:title="" />
  </fig>
  <p>There are more examples of the flexible API in the main
  <ext-link ext-link-type="uri" xlink:href="https://surpyval.readthedocs.io/en/latest/">documentation</ext-link>.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-clevert2015fast">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Clevert</surname><given-names>Djork-Arné</given-names></name>
          <name><surname>Unterthiner</surname><given-names>Thomas</given-names></name>
          <name><surname>Hochreiter</surname><given-names>Sepp</given-names></name>
        </person-group>
        <article-title>Fast and accurate deep network learning by exponential linear units (elus)</article-title>
        <source>arXiv preprint arXiv:1511.07289</source>
        <year iso-8601-date="2015">2015</year>
      </element-citation>
    </ref>
    <ref id="ref-turnbull1976empirical">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Turnbull</surname><given-names>Bruce W</given-names></name>
        </person-group>
        <article-title>The empirical distribution function with arbitrarily grouped, censored and truncated data</article-title>
        <source>Journal of the Royal Statistical Society: Series B (Methodological)</source>
        <publisher-name>Wiley Online Library</publisher-name>
        <year iso-8601-date="1976">1976</year>
        <volume>38</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1111/j.2517-6161.1976.tb01597.x</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-kaplan1958nonparametric">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kaplan</surname><given-names>Edward L</given-names></name>
          <name><surname>Meier</surname><given-names>Paul</given-names></name>
        </person-group>
        <article-title>Nonparametric estimation from incomplete observations</article-title>
        <source>Journal of the American statistical association</source>
        <publisher-name>Taylor &amp; Francis</publisher-name>
        <year iso-8601-date="1958">1958</year>
        <volume>53</volume>
        <issue>282</issue>
        <pub-id pub-id-type="doi">10.2307/2281868</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-nelson1969hazard">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Nelson</surname><given-names>Wayne</given-names></name>
        </person-group>
        <article-title>Hazard plotting for incomplete failure data</article-title>
        <source>Journal of Quality Technology</source>
        <publisher-name>Taylor &amp; Francis</publisher-name>
        <year iso-8601-date="1969">1969</year>
        <volume>1</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1080/00224065.1969.11980344</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-aalen1978nonparametric">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Aalen</surname><given-names>Odd</given-names></name>
        </person-group>
        <article-title>Nonparametric inference for a family of counting processes</article-title>
        <source>The Annals of Statistics</source>
        <publisher-name>JSTOR</publisher-name>
        <year iso-8601-date="1978">1978</year>
        <pub-id pub-id-type="doi">10.1214/aos/1176344247</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-fleming1984nonparametric">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Fleming</surname><given-names>Thomas R</given-names></name>
          <name><surname>Harrington</surname><given-names>David P</given-names></name>
        </person-group>
        <article-title>Nonparametric estimation of the survival distribution in censored data</article-title>
        <source>Communications in Statistics-Theory and Methods</source>
        <publisher-name>Taylor &amp; Francis</publisher-name>
        <year iso-8601-date="1984">1984</year>
        <volume>13</volume>
        <issue>20</issue>
        <pub-id pub-id-type="doi">10.1080/03610928408828837</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-2020SciPy-NMeth">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
          <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
          <name><surname>Haberland</surname><given-names>Matt</given-names></name>
          <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
          <name><surname>Cournapeau</surname><given-names>David</given-names></name>
          <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
          <name><surname>Bright</surname><given-names>Jonathan</given-names></name>
          <name><surname>van der Walt</surname><given-names>Stéfan J.</given-names></name>
          <name><surname>Brett</surname><given-names>Matthew</given-names></name>
          <name><surname>Wilson</surname><given-names>Joshua</given-names></name>
          <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
          <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
          <name><surname>Nelson</surname><given-names>Andrew R. J.</given-names></name>
          <name><surname>Jones</surname><given-names>Eric</given-names></name>
          <name><surname>Kern</surname><given-names>Robert</given-names></name>
          <name><surname>Larson</surname><given-names>Eric</given-names></name>
          <name><surname>Carey</surname><given-names>C J</given-names></name>
          <name><surname>Polat</surname><given-names>İlhan</given-names></name>
          <name><surname>Feng</surname><given-names>Yu</given-names></name>
          <name><surname>Moore</surname><given-names>Eric W.</given-names></name>
          <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
          <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
          <name><surname>Perktold</surname><given-names>Josef</given-names></name>
          <name><surname>Cimrman</surname><given-names>Robert</given-names></name>
          <name><surname>Henriksen</surname><given-names>Ian</given-names></name>
          <name><surname>Quintero</surname><given-names>E. A.</given-names></name>
          <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
          <name><surname>Archibald</surname><given-names>Anne M.</given-names></name>
          <name><surname>Ribeiro</surname><given-names>Antônio H.</given-names></name>
          <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
          <name><surname>van Mulbregt</surname><given-names>Paul</given-names></name>
          <string-name>SciPy 1.0 Contributors</string-name>
        </person-group>
        <article-title>SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python</article-title>
        <source>Nature Methods</source>
        <year iso-8601-date="2020">2020</year>
        <volume>17</volume>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-davidson2019lifelines">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Davidson-Pilon</surname><given-names>Cameron</given-names></name>
        </person-group>
        <article-title>Lifelines: Survival analysis in Python</article-title>
        <source>Journal of Open Source Software</source>
        <year iso-8601-date="2019">2019</year>
        <volume>4</volume>
        <issue>40</issue>
        <pub-id pub-id-type="doi">10.21105/joss.01317</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-maclaurin2015autograd">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Maclaurin</surname><given-names>Dougal</given-names></name>
          <name><surname>Duvenaud</surname><given-names>David</given-names></name>
          <name><surname>Adams</surname><given-names>Ryan P</given-names></name>
        </person-group>
        <article-title>Autograd: Effortless gradients in Numpy</article-title>
        <source>ICML 2015 AutoML workshop</source>
        <year iso-8601-date="2015">2015</year>
        <volume>238</volume>
      </element-citation>
    </ref>
    <ref id="ref-weibull1951statistical">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Weibull</surname><given-names>Waloddi</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>A statistical distribution function of wide applicability</article-title>
        <source>Journal of applied mechanics</source>
        <publisher-name>New York</publisher-name>
        <year iso-8601-date="1951">1951</year>
        <volume>18</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1115/1.4010337</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-matthew_reid_2021_5030847">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Reid</surname><given-names>Matthew</given-names></name>
        </person-group>
        <source>MatthewReid854/reliability: v0.5.7</source>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2021-06">2021</year><month>06</month>
        <uri>https://doi.org/10.5281/zenodo.5030847</uri>
        <pub-id pub-id-type="doi">10.5281/zenodo.5030847</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

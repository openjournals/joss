<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">43</article-id>
<article-id pub-id-type="doi">10.21105/joss.00043</article-id>
<title-group>
<article-title>PyGBe: Python, GPUs and Boundary elements for
biomolecular electrostatics</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-0282-8998</contrib-id>
<string-name>Christopher D. Cooper</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-0575-5520</contrib-id>
<string-name>Natalia C. Clementi</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4983-1978</contrib-id>
<string-name>Gilbert Forsyth</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5812-2711</contrib-id>
<string-name>Lorena A. Barba</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Universidad Técnica Federico Santa María</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>The George Washington University</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2016-07-14">
<day>14</day>
<month>7</month>
<year>2016</year>
</pub-date>
<volume>1</volume>
<issue>4</issue>
<fpage>43</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>electrostatics</kwd>
<kwd>biophysics</kwd>
<kwd>Poisson-Boltzmann</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>PyGBe—pronounced <italic>pigbē</italic>—is a Python code to apply
  the boundary element method for molecular-electrostatics calculations
  in a continuum model. It computes solvation energies for proteins
  modeled with any number of dielectric regions, which is relevant in
  calculations of protein binding affinity, protein-surface interaction,
  acid-dissociation contants, among other applications. The mathematical
  formulation follows Yoon &amp; Lenhoff
  (<xref alt="1990" rid="ref-YoonLenhoff1990" ref-type="bibr">1990</xref>)
  for solving the Poisson-Boltzmann equation of the
  <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Implicit_solvation">implicit-solvent</ext-link>
  model in integral form.</p>
  <p>PyGBe achieves both algorithmic and hardware acceleration, as
  detailed in Cooper et al.
  (<xref alt="2014" rid="ref-CooperBardhanBarba2014" ref-type="bibr">2014</xref>).
  The solution algorithm uses a
  <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Barnes–Hut_simulation">Barnes-Hut</ext-link>
  treecode from Barnes &amp; Hut
  (<xref alt="1986" rid="ref-BarnesHut1986" ref-type="bibr">1986</xref>)
  to accelerate each iteration of a GMRES solver to O(N logN), for N
  unknowns. It exploits NVIDIA GPU hardware on the most computationally
  intensive parts of the code using CUDA kernels in the treecode,
  interfacing with PyCUDA (see Klöckner et al.
  (<xref alt="2012" rid="ref-kloeckner_pycuda_2012" ref-type="bibr">2012</xref>)).
  Some parts of the code are written in C++, wrapped using SWIG.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-YoonLenhoff1990">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Yoon</surname><given-names>B J.</given-names></name>
          <name><surname>Lenhoff</surname><given-names>A. M.</given-names></name>
        </person-group>
        <article-title>A boundary element method for molecular electrostatics with electrolyte effects</article-title>
        <source>J. Comput. Chem.</source>
        <year iso-8601-date="1990">1990</year>
        <volume>11</volume>
        <issue>9</issue>
        <pub-id pub-id-type="doi">10.1002/jcc.540110911</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-BarnesHut1986">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Barnes</surname><given-names>J.</given-names></name>
          <name><surname>Hut</surname><given-names>P.</given-names></name>
        </person-group>
        <article-title>A hierarchical O(N \log N) force-calculation algorithm</article-title>
        <source>Nature</source>
        <year iso-8601-date="1986">1986</year>
        <volume>324</volume>
        <pub-id pub-id-type="doi">10.1038/324446a0</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-kloeckner_pycuda_2012">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Klöckner</surname><given-names>Andreas</given-names></name>
          <name><surname>Pinto</surname><given-names>Nicolas</given-names></name>
          <name><surname>Lee</surname><given-names>Yunsup</given-names></name>
          <name><surname>Catanzaro</surname><given-names>B.</given-names></name>
          <name><surname>Ivanov</surname><given-names>Paul</given-names></name>
          <name><surname>Fasih</surname><given-names>Ahmed</given-names></name>
        </person-group>
        <article-title>PyCUDA and PyOpenCL: A Scripting-Based Approach to GPU Run-Time Code Generation</article-title>
        <source>Parallel Computing</source>
        <year iso-8601-date="2012">2012</year>
        <volume>38</volume>
        <issue>3</issue>
        <issn>0167-8191</issn>
        <pub-id pub-id-type="doi">10.1016/j.parco.2011.09.001</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-CooperBardhanBarba2014">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Cooper</surname><given-names>Christopher D.</given-names></name>
          <name><surname>Bardhan</surname><given-names>Jaydeep P.</given-names></name>
          <name><surname>Barba</surname><given-names>L. A.</given-names></name>
        </person-group>
        <article-title>A biomolecular electrostatics solver using Python, GPUs and boundary elements that can handle solvent-filled cavities and Stern layers.</article-title>
        <source>Comput. Phys. Commun.</source>
        <year iso-8601-date="2014">2014</year>
        <volume>185</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1016/j.cpc.2013.10.028</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3166</article-id>
<article-id pub-id-type="doi">10.21105/joss.03166</article-id>
<title-group>
<article-title>datasailr - An R Package for Row by Row Data Processing,
Using DataSailr Script</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-7015-621X</contrib-id>
<string-name>Toshihiro Umehara</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Independent Researcher</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-04-03">
<day>3</day>
<month>4</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>61</issue>
<fpage>3166</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>statistics</kwd>
<kwd>data processing</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Data processing and data cleaning are essential steps before
  applying statistical or machine learning procedures
  (<xref alt="García et al., 2015" rid="ref-garcia2015" ref-type="bibr">García
  et al., 2015</xref>;
  <xref alt="Pyle, 1999" rid="ref-pyle1999" ref-type="bibr">Pyle,
  1999</xref>). R provides a flexible way for data processing using
  vectors. Additional R packages also provide other ways for
  manipulating data such as using SQL and using chained functions. This
  work presents yet another way to process data in a row by row manner
  using a data manipulation oriented script, DataSailr script. The
  script enables users to instruct data processing in a row-wise manner,
  and the script is intuitive and easy to learn. This article introduces
  the datasailr package, and potential benefits of this row-wise
  approach.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>The
  <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=datasailr">datasailr</ext-link>
  package enables users to instruct data processing in a row-wise manner
  using DataSailr script, which is an easy and intuitive script designed
  especially for data manipulation. This row by row approach is
  different from R’s built-in functionality, which provides data
  processing through column vector calculations. The row-wise approach
  does not require vectors, and can be intuitive compared to R’s default
  column vector approach.</p>
  <p>The DataSailr script is a domain-specific language for data
  processing. Using domain-specific language for data manipulation is a
  similar approach to SAS<xref ref-type="fn" rid="fn1">1</xref> software
  (<xref alt="SAS Institute, 1985" rid="ref-sas1985sasU003A1985" ref-type="bibr">SAS
  Institute, 1985</xref>). SAS software provides DATA blocks, within
  which users can write scripts that are specific for data manipulation
  in a row-wise manner. The separation of data manipulation steps and
  statistical procedures has a benefit of improved readability. Its
  row-wise data manipulation script is easy to understand and learn.
  DataSailr brings the same kind of experience to R.</p>
  <p>For example, you have student health data and you need to calculate
  each student’s body mass index (BMI) from their body weight and
  height. Using R’s built-in functionality, you need to access body
  weight and height as column vectors, conduct vector calculation, and
  assign the result vector to a BMI column. DataSailr script, on the
  other hand, enables you to write code as how to calculate BMI for each
  person.</p>
  <p>There are also other R packages that have been improving data
  manipulation, such as sqldf
  (<xref alt="Grothendieck, 2017" rid="ref-sqldfU003A2017" ref-type="bibr">Grothendieck,
  2017</xref>) and dplyr
  (<xref alt="Wickham et al., 2021" rid="ref-dplyrU003A2021" ref-type="bibr">Wickham
  et al., 2021</xref>). The sqldf package enables users to write SQL for
  data manipulation. The dplyr package enables users to write data
  manipulation procedures in a sequential way by chaining functions
  without thinking much about column vectors. DataSailr enables the same
  kind of things with a single DataSailr script.</p>
</sec>
<sec id="how-datasailr-works">
  <title>How DataSailr Works</title>
  <p>The datasailr package has a main function called sail(). It takes
  R’s data frame and DataSailr script, and the data frame is processed
  following the script. The first argument is a data frame. The second
  argument is the DataSalr script, and each row is processed following
  this script as described in
  <xref alt="Figure 1" rid="figU003Adatasailr_workflow">Figure 1</xref>.</p>
  <fig>
    <caption><p>How DataSailr Processes
    Data.<styled-content id="figU003Adatasailr_workflow"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="datasailr_workflow.png" xlink:title="" />
  </fig>
</sec>
<sec id="datasailr-script">
  <title>DataSailr Script</title>
  <p>The following example script conducts data processing for R’s
  built-in ‘mtcars’ data. The example script generates description,
  country and manufacturer columns for each car using hp (i.e. horse
  power) and mpg (i.e. miles per gallon) columns and row names. The row
  names contain names of cars. The script uses functionality of variable
  assignment, if-else statements, special variables, regular expression
  matching, backreference and built-in functions, which are explained in
  the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/niceume/datasailr/blob/master/README.md">README</ext-link>
  and on the
  <ext-link ext-link-type="uri" xlink:href="https://datasailr.io">DataSailr
  website</ext-link>.</p>
  <list list-type="bullet">
    <list-item>
      <p>Example</p>
    </list-item>
  </list>
  <code language="r script">library(datasailr)
data(mtcars)

# datasailr::sail() function takes data frame for its first argument,
# and DataSailr script as character for its second argument.

result = datasailr::sail( mtcars, '
  // Comments in DataSailr start with double slashes
  // if-else statement:
  // Check if hp column value is larger than 100 or not. 
  if(hp &gt; 100 ){
    // Variable assignment:
    // Variables in codes correspond to the columns with the same name.
    // In this case, powerful column value is set &quot;powerful&quot;.
    powerful = &quot;powerful &quot;
  }else {
    // powerful column value is set empty.
    powerful = &quot;&quot;
  }
  
  // if-else can also be written like this
  if(mpg &gt; 20){ efficient = &quot;efficient&quot; }
  else {  efficient = &quot;&quot; }

  // Regular expressions that match manufacturer names
  // Assigning regular expressions to variables do not affect data frame
  // , but can become reused at different lines.
  germany = re/(^Merc|^Porsche|^Volvo)/
  japan = re/(^Mazda|^Honda|^Toyota)/
  datsun = re/(^Datsun)/
  hornet = re/(^Hornet)/
  valiant = re/(^Valiant)/
  duster = re/(^Duster)/
  
  // Regular expression matching with special variable _rowname_
  if ( _rowname_ =~ germany ) {
    country = &quot;Germany&quot;
    // Backreference to matched strings
    // rexp_matched(1) means the first grouped sub string. 
    manufacturer = rexp_matched(1)
  }else if ( _rowname_ =~ japan ) {
    // semicolons can be used as terminals of statements
    country = &quot;Japan&quot;; manufacturer = rexp_matched(1)
  }else if ( _rowname_ =~ datsun ) {
    country = &quot;Japan&quot;; manufacturer = &quot;Nissan&quot;
  }else if ( _rowname_ =~ hornet ) {
    country = &quot;USA&quot;; manufacturer = &quot;AMC&quot;
  }else if ( _rowname_ =~ valiant ) {
    country = &quot;USA&quot;; manufacturer = &quot;Chrysler&quot;
  }else if ( _rowname_ =~ duster ) {
    country = &quot;France&quot;; manufacturer = &quot;Renault&quot;
  }else{
    country = &quot;&quot;
    manufacturer = &quot;&quot;
  }
  
  // built-in function str_concat()
  desc = str_concat( powerful, efficient)
' )

# show the first 10 rows of result data frame.
result2 = result[c( &quot;hp&quot;, &quot;mpg&quot;, &quot;desc&quot;, &quot;country&quot;, &quot;manufacturer&quot;)]
print(head(result2, 10))</code>
  <list list-type="bullet">
    <list-item>
      <p>Output</p>
    </list-item>
  </list>
  <preformat>                   hp  mpg               desc country manufacturer
Mazda RX4         110 21.0 powerful efficient   Japan        Mazda
Mazda RX4 Wag     110 21.0 powerful efficient   Japan        Mazda
Datsun 710         93 22.8          efficient   Japan       Nissan
Hornet 4 Drive    110 21.4 powerful efficient     USA          AMC
Hornet Sportabout 175 18.7          powerful      USA          AMC
Valiant           105 18.1          powerful      USA     Chrysler
Duster 360        245 14.3          powerful   France      Renault
Merc 240D          62 24.4          efficient Germany         Merc
Merc 230           95 22.8          efficient Germany         Merc
Merc 280          123 19.2          powerful  Germany         Merc</preformat>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-pyle1999">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Pyle</surname><given-names>Dorian</given-names></name>
        </person-group>
        <source>Data preparation for data mining</source>
        <publisher-name>Morgan Kaufmann</publisher-name>
        <publisher-loc>Los Altos, California</publisher-loc>
        <year iso-8601-date="1999">1999</year>
      </element-citation>
    </ref>
    <ref id="ref-garcia2015">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>García</surname><given-names>Salvador</given-names></name>
          <name><surname>Luengo</surname><given-names>Julián</given-names></name>
          <name><surname>Herrera</surname><given-names>Francisco</given-names></name>
        </person-group>
        <source>Data Preprocessing in Data Mining</source>
        <publisher-name>Springer International Publishing</publisher-name>
        <publisher-loc>Switzerland</publisher-loc>
        <year iso-8601-date="2015">2015</year>
      </element-citation>
    </ref>
    <ref id="ref-dplyrU003A2021">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
          <name><surname>François</surname><given-names>Romain</given-names></name>
          <name><surname>Henry</surname><given-names>Lionel</given-names></name>
          <name><surname>Müller</surname><given-names>Kirill</given-names></name>
        </person-group>
        <source>dplyr: A Grammar of Data Manipulation</source>
        <year iso-8601-date="2021">2021</year>
        <uri>https://CRAN.R-project.org/package=dplyr</uri>
      </element-citation>
    </ref>
    <ref id="ref-sqldfU003A2017">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Grothendieck</surname><given-names>G.</given-names></name>
        </person-group>
        <source>sqldf: Manipulate R Data Frames Using SQL</source>
        <year iso-8601-date="2017">2017</year>
        <uri>https://CRAN.R-project.org/package=sqldf</uri>
      </element-citation>
    </ref>
    <ref id="ref-sas1985sasU003A1985">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>SAS Institute</string-name>
        </person-group>
        <source>SAS user’s guide: Statistics</source>
        <publisher-name>Sas Inst</publisher-name>
        <year iso-8601-date="1985">1985</year>
        <volume>2</volume>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p>SAS and all other SAS Institute Inc. product or
    service names are registered trademarks or trademarks of SAS
    Institute Inc. in the USA and other countries.</p>
  </fn>
</fn-group>
</back>
</article>

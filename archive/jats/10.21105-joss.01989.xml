<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1989</article-id>
<article-id pub-id-type="doi">10.21105/joss.01989</article-id>
<title-group>
<article-title>pylustrator: code generation for reproducible figures for
publication</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5893-2650</contrib-id>
<string-name>Richard Gerum</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Physics, University of Erlangen-Nürnberg,
Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-09-06">
<day>6</day>
<month>9</month>
<year>2019</year>
</pub-date>
<volume>5</volume>
<issue>51</issue>
<fpage>1989</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>reproducibility</kwd>
<kwd>code generation</kwd>
<kwd>interactive</kwd>
<kwd>matplotlib</kwd>
<kwd>plotting</kwd>
<kwd>drag</kwd>
<kwd>style</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="background">
  <title>Background</title>
  <p>In recent years, more and more researchers have called attention to
  a growing “reproducibility crisis”
  (<xref alt="Sayre &amp; Riegelman, 2018" rid="ref-CRL16846" ref-type="bibr">Sayre
  &amp; Riegelman, 2018</xref>). An important factor contributing to
  problems in the reproducibility of results from published studies is
  the unavailability of the raw data from the original experiment and
  the unavailability of the methods or code used for the analysis of raw
  data
  (<xref alt="Baker &amp; Penny, 2016" rid="ref-Baker2016" ref-type="bibr">Baker
  &amp; Penny, 2016</xref>). One major step to overcome these
  shortcomings is publishing all raw data and a documented version of
  the code used for analysis
  (<xref alt="Baker, 2016" rid="ref-baker2016scientists" ref-type="bibr">Baker,
  2016</xref>). Ideally, anyone interested should be able to download
  the raw data and reproduce the figures of the publication exactly.</p>
  <p>To address the issue of data availability, researchers are
  encouraged to make their data available in online repositories such as
  Dryad
  (<xref alt="Dryad, n.d." rid="ref-dryad" ref-type="bibr"><italic>Dryad</italic>,
  n.d.</xref>). However, these data are useless unless the complete
  analysis procedure, including all analysis and visualisation steps,
  can be comprehended by other scientists. The best way to achieve this
  is to provide a complete, well-documented analysis code, including all
  important steps from the basic artifact corrections to the final plot
  to be published. Open source scripting languages such as Python
  (<xref alt="Van Rossum &amp; Drake Jr, 1995" rid="ref-Rossum1995" ref-type="bibr">Van
  Rossum &amp; Drake Jr, 1995</xref>) or R
  (<xref alt="R Core Team, 2019" rid="ref-R" ref-type="bibr">R Core
  Team, 2019</xref>) are ideal for such code because open source
  languages are accessible to everyone. In addition, interpreted
  languages do not need to be compiled, therefore present fewer
  obstacles for the user to run the code. The final part of the data
  analysis is the visualisation, which is crucial for communicating the
  results
  (<xref alt="Tufte, 1893" rid="ref-Tufte1893" ref-type="bibr">Tufte,
  1893</xref>). This paper deals with the visualization step, consisting
  of two parts: generating simple plots from data, and composing
  meaningful figures from these plots.</p>
  <p>The first part of generating the building blocks of figures, the
  plots, is already covered in various toolkits, e.g., Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-Hunter2007" ref-type="bibr">Hunter,
  2007</xref>), Bokeh
  (<xref alt="Bokeh Development Team, 2019" rid="ref-Bokeh" ref-type="bibr">Bokeh
  Development Team, 2019</xref>) or Seaborn
  (<xref alt="Waskom et al., 2017" rid="ref-seaborn" ref-type="bibr">Waskom
  et al., 2017</xref>). There already exist some software that records
  user interactions to generate 3D plots <italic>Dragonfly</italic>
  (<xref alt="n.d." rid="ref-dragonfly" ref-type="bibr">n.d.</xref>),
  but no convenient Python toolkit is yet available to generate
  reproducible figures from simple plots scripts. Matplotlib offers
  figures composed of several subplots, but to create a complete,
  publication-ready figure a lot of code is needed to add all
  formatting, annotation and styling commands. Users often prefer
  graphical tools like image manipulation software, e.g., GIMP
  (<xref alt="GIMP Development Team, 2019" rid="ref-GIMP" ref-type="bibr">GIMP
  Development Team, 2019</xref>) or Inkscape
  (<xref alt="Team, 2019" rid="ref-Inkscape" ref-type="bibr">Team,
  2019</xref>). These offer great flexibility, but do not provide a
  reproducible way of generating figures and bear the risk of
  accidentally changing data points. It is also important to note that
  when using an image manipulation software, every small change in the
  analysis requires re-editing the figure in the image manipulation
  software. This process slows down the creation of figures and is prone
  to errors. The <monospace>pylustrator</monospace> package was
  developed to address this issue.</p>
</sec>
<sec id="algorithm-and-examples">
  <title>Algorithm and Examples</title>
  <p><monospace>Pylustrator</monospace> fills the gap from single plots
  to complete figures via a code-generation algorithm that converts user
  input into Python code for reproducible figure assembly (Fig. 1).
  Minor changes to the analysis or new data only require re-execution of
  the code to update the figure.</p>
  <fig>
    <caption><p>Example of composing a figure with
    pylustrator.</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="figure1.pdf" xlink:title="" />
  </fig>
  <p>Using <monospace>pylustrator</monospace> in any Python file that
  uses Matplotlib to plot data requires only the addition of two lines
  of code:</p>
  <preformat>import pylustrator
pylustrator.start()</preformat>
  <p>The Matplotlib figure is then displayed in an interactive window
  (Fig. 2) when the command <monospace>plt.show()</monospace> is called.
  In this interactive window <monospace>pylustrator</monospace> allows
  the user to:</p>
  <list list-type="bullet">
    <list-item>
      <p>resize and position plots by dragging with the mouse</p>
    </list-item>
    <list-item>
      <p>adjust the position of plots legends</p>
    </list-item>
    <list-item>
      <p>align elements easily through automatic “snap-in” mechanism</p>
    </list-item>
    <list-item>
      <p>change the size of the whole figure in cm/inch</p>
    </list-item>
    <list-item>
      <p>add text and annotations and change their style and color</p>
    </list-item>
    <list-item>
      <p>adjust plot ticks and tick labels</p>
    </list-item>
  </list>
  <fig>
    <caption><p>The interface of <monospace>pylustrator</monospace>. The
    user can view the elements of the plot, edit their properties, edit
    them in the plot preview and experiment with different color
    schemes.</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="figure2.pdf" xlink:title="" />
  </fig>
  <p><monospace>pylustrator</monospace> tracks all changes to the figure
  and translates them into Python code. To do so, the internal
  representation of changes has to fulfill some requirements. Changes
  need to be able to be replaced by newer changes that affect the same
  property of the same object, they need to be able to be converted to
  code, and changes need to be retrieved from generated code when
  loading a file that has already
  <monospace>pylustrator</monospace>-generated code in it.</p>
  <p>Each change is defined by two parts: the affected object (e.g., a
  text object) and the affected property (e.g., its color). If a change
  has the same object and property as a previous change, it overwrites
  the previous change.</p>
  <p>Changes are converted to code by first serializing the affected
  object by iteratively going up the parent-child tree from, e.g., a
  text object, to the axis that contains the text to the figure that
  contains the axis. From this dependency relation, a Python code
  segment is generated (e.g.,
  <monospace>plt.figure(1).axes[0].texts[0]</monospace>, the first text
  of the first axis of figure 1). Then the property command is added
  (e.g., <monospace>.set_color(&quot;#ff0000ff&quot;)</monospace>). When
  saving, <monospace>pylustrator</monospace> introspects its current
  execution stack to find the line of code from where it was called and
  inserts the automatically generated code directly before the command
  calling <monospace>pylustrator</monospace>.</p>
  <p>When a file with automatically generated code is loaded (see code
  example in figure 1), <monospace>pylustrator</monospace> splits all
  the automatically generated lines into the affected objects and
  affected properties. New changes, where both the affected object and
  the affected property match a previous change, overwrite the previous
  change. This ensures that previously generated code can be loaded
  appropriately, and saving the same figure multiple times does not
  generate the line of code for this change multiple times.</p>
  <p>It is important to note that the automatically generated code only
  relies on Matplotlib and does not need the
  <monospace>pylustrator</monospace> package anymore. Thus, the
  <monospace>pylustrator</monospace> import can later be removed to
  allow sharing the code without an additional introduced
  dependency.</p>
  <p>The documentation of <monospace>pylustrator</monospace> can be
  found on https://pylustrator.readthedocs.org.</p>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>This packages offers an improvement to create publishable figures
  from single plots based on an open source Python library called
  <monospace>pylustrator</monospace>. The figures can be arranged by
  drag-and-drop, and the <monospace>pylustrator</monospace> library
  generates the corresponding code. This library provides a valuable
  contribution to improve reproducibility of scientific results.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We acknowledge testing, support and feedback from Christoph Mark,
  Sebastian Richter, and Achim Schilling and Ronny Reimann for the
  design of the Pylustrator Logo.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Rossum1995">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Van Rossum</surname><given-names>Guido</given-names></name>
          <name><surname>Drake Jr</surname><given-names>Fred L</given-names></name>
        </person-group>
        <source>Python tutorial</source>
        <publisher-name>Centrum voor Wiskunde en Informatica Amsterdam, The Netherlands</publisher-name>
        <year iso-8601-date="1995">1995</year>
      </element-citation>
    </ref>
    <ref id="ref-Hunter2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>J D</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D graphics environment</article-title>
        <source>Comput. Sci. Eng.</source>
        <publisher-name>IEEE COMPUTER SOC</publisher-name>
        <year iso-8601-date="2007">2007</year>
        <volume>9</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Tufte1893">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Tufte</surname><given-names>Edward</given-names></name>
        </person-group>
        <source>The visual display of quantitative information</source>
        <publisher-name>Graphics Press</publisher-name>
        <publisher-loc>Cheshire, Connecticut</publisher-loc>
        <year iso-8601-date="1893">1893</year>
      </element-citation>
    </ref>
    <ref id="ref-Baker2016">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Baker</surname><given-names>Monya</given-names></name>
          <name><surname>Penny</surname><given-names>Dan</given-names></name>
        </person-group>
        <article-title>Is there a reproducibility crisis?</article-title>
        <year iso-8601-date="2016-05">2016</year><month>05</month>
        <volume>533</volume>
        <issn>14764687</issn>
        <uri>http://www.nature.com/articles/533452a</uri>
        <pub-id pub-id-type="doi">10.1038/533452A</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-dryad">
      <element-citation>
        <article-title>Dryad</article-title>
        <publisher-name>https://datadryad.org</publisher-name>
      </element-citation>
    </ref>
    <ref id="ref-dragonfly">
      <element-citation>
        <article-title>Dragonfly</article-title>
        <publisher-name>https://www.theobjects.com/dragonfly/</publisher-name>
      </element-citation>
    </ref>
    <ref id="ref-westenberger2008avizo">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Westenberger</surname><given-names>Peter</given-names></name>
        </person-group>
        <article-title>AVIZO-3D visualization framework</article-title>
        <source>Geoinformatics conference</source>
        <year iso-8601-date="2008">2008</year>
      </element-citation>
    </ref>
    <ref id="ref-ahrens2005paraview">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Ahrens</surname><given-names>James</given-names></name>
          <name><surname>Geveci</surname><given-names>Berk</given-names></name>
          <name><surname>Law</surname><given-names>Charles</given-names></name>
        </person-group>
        <article-title>Paraview: An end-user tool for large data visualization</article-title>
        <source>The visualization handbook</source>
        <publisher-name>Elsevier München</publisher-name>
        <year iso-8601-date="2005">2005</year>
        <pub-id pub-id-type="doi">10.1016/B978-012387582-2/50038-1</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-R">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>R Core Team</string-name>
        </person-group>
        <source>R: A language and environment for statistical computing</source>
        <publisher-name>R Foundation for Statistical Computing</publisher-name>
        <publisher-loc>Vienna, Austria</publisher-loc>
        <year iso-8601-date="2019">2019</year>
        <uri>https://www.R-project.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-Bokeh">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>Bokeh Development Team</string-name>
        </person-group>
        <source>Bokeh: Python library for interactive visualization</source>
        <year iso-8601-date="2019">2019</year>
        <uri>https://bokeh.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-seaborn">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Waskom</surname><given-names>Michael</given-names></name>
          <name><surname>Botvinnik</surname><given-names>Olga</given-names></name>
          <name><surname>O’Kane</surname><given-names>Drew</given-names></name>
          <name><surname>Hobson</surname><given-names>Paul</given-names></name>
          <name><surname>Lukauskas</surname><given-names>Saulius</given-names></name>
          <name><surname>Gemperline</surname><given-names>David C</given-names></name>
          <name><surname>Augspurger</surname><given-names>Tom</given-names></name>
          <name><surname>Halchenko</surname><given-names>Yaroslav</given-names></name>
          <name><surname>Cole</surname><given-names>John B.</given-names></name>
          <name><surname>Warmenhoven</surname><given-names>Jordi</given-names></name>
          <name><surname>Ruiter</surname><given-names>Julian de</given-names></name>
          <name><surname>Pye</surname><given-names>Cameron</given-names></name>
          <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
          <name><surname>Vanderplas</surname><given-names>Jake</given-names></name>
          <name><surname>Villalba</surname><given-names>Santi</given-names></name>
          <name><surname>Kunter</surname><given-names>Gero</given-names></name>
          <name><surname>Quintero</surname><given-names>Eric</given-names></name>
          <name><surname>Bachant</surname><given-names>Pete</given-names></name>
          <name><surname>Martin</surname><given-names>Marcel</given-names></name>
          <name><surname>Meyer</surname><given-names>Kyle</given-names></name>
          <name><surname>Miles</surname><given-names>Alistair</given-names></name>
          <name><surname>Ram</surname><given-names>Yoav</given-names></name>
          <name><surname>Yarkoni</surname><given-names>Tal</given-names></name>
          <name><surname>Williams</surname><given-names>Mike Lee</given-names></name>
          <name><surname>Evans</surname><given-names>Constantine</given-names></name>
          <name><surname>Fitzgerald</surname><given-names>Clark</given-names></name>
          <name><surname>Brian</surname></name>
          <name><surname>Fonnesbeck</surname><given-names>Chris</given-names></name>
          <name><surname>Lee</surname><given-names>Antony</given-names></name>
          <name><surname>Qalieh</surname><given-names>Adel</given-names></name>
        </person-group>
        <article-title>Mwaskom/seaborn: v0.8.1 (september 2017)</article-title>
        <year iso-8601-date="2017-09">2017</year><month>09</month>
        <uri>https://doi.org/10.5281/zenodo.883859</uri>
        <pub-id pub-id-type="doi">10.5281/zenodo.883859</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-GIMP">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>GIMP Development Team</string-name>
        </person-group>
        <source>GIMP:GNU image manipulation program</source>
        <year iso-8601-date="2019">2019</year>
        <uri>https://gimp.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-Inkscape">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Team</surname><given-names>The Inkscape</given-names></name>
        </person-group>
        <source>Inkscape</source>
        <year iso-8601-date="2019">2019</year>
        <uri>https://inkscape.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-CRL16846">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Sayre</surname><given-names>Franklin</given-names></name>
          <name><surname>Riegelman</surname><given-names>Amy</given-names></name>
        </person-group>
        <article-title>The reproducibility crisis and academic libraries</article-title>
        <source>College &amp; Research Libraries</source>
        <year iso-8601-date="2018">2018</year>
        <volume>79</volume>
        <issue>1</issue>
        <issn>2150-6701</issn>
        <uri>https://crl.acrl.org/index.php/crl/article/view/16846</uri>
        <pub-id pub-id-type="doi">10.5860/crl.79.1.2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-baker2016scientists">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Baker</surname><given-names>Monya</given-names></name>
        </person-group>
        <article-title>Why scientists must share their research code</article-title>
        <source>Nature News</source>
        <year iso-8601-date="2016">2016</year>
        <pub-id pub-id-type="doi">10.1038/nature.2016.20504</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

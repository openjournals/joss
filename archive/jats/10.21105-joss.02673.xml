<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2673</article-id>
<article-id pub-id-type="doi">10.21105/joss.02673</article-id>
<title-group>
<article-title>DrWatson: the perfect sidekick for your scientific
inquiries</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-0872-7098</contrib-id>
<string-name>George Datseris</string-name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6600-5590</contrib-id>
<string-name>Jonas Isensee</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8415-2823</contrib-id>
<string-name>Sebastian Pech</string-name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-7821-8673</contrib-id>
<string-name>Tamás Gál</string-name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Max Planck Institute for Dynamics and Self
Organization</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Erlangen Centre for Astroparticle Physics</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Friedrich-Alexander-Universität
Erlangen-Nürnberg</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Max Planck Institute for Meteorology</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Institute for Mechanics of Materials and Structures, TU
Wien</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-06-30">
<day>30</day>
<month>6</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>54</issue>
<fpage>2673</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>research</kwd>
<kwd>project management</kwd>
<kwd>data management</kwd>
<kwd>provenance</kwd>
<kwd>general purpose</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Doing scientific work always involves a lot of focus and scrutiny,
  since producing a scientific result requires several levels of depth
  of analysis, all of which must be as accurate and as reproducible as
  possible. All this required scrutiny <italic>should</italic> be
  naturally translated into the codebase of the scientific project. One
  should strive for a code that is doing what it is supposed to, is
  reproducible, doesn’t break over time, is sufficiently clear of bugs,
  and with simulation results that are appropriately labelled, and more.
  The challenges associated with carrying out scientific work should not
  be made any worse by the difficulties of managing the codebase and
  resulting data/simulations. An unfortunate but likely outcome of this
  stress is that scientific codebases tend to be
  <italic>sloppy</italic>: folders are not organized, there is no
  version control, data are not provenanced properly, most scripts break
  over time, and the whole project is very hard, if not impossible, to
  reproduce. We have created the software DrWatson to make the process
  of scientific project management easier. In this paper we will
  describe how DrWatson results in an efficient scientific workflow,
  taking time away from project management and giving it to doing
  science.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>DrWatson is a <bold>scientific project assistance software</bold>.
  Its purpose is to help scientists manage their scientific codebase in
  a simple and clear manner, to make the process of creating the
  codebase faster and to enable true full reproducibility and project
  sharing. DrWatson achieves this while being entirely non-invasive
  throughout the process. It provides a well-tested science-driven
  framework for managing a scientific project, thus removing the
  unnecessary stress and giving more time to doing actual science.</p>
  <p>Technically DrWatson is a package for the Julia language. It is
  likely that Julia is the only language that can allow DrWatson to be
  the powerful framework that will be presented here, because Julia
  combines multiple dispatch, an integrated package manager, macros and
  code introspection. That said, however, we believe that a large part
  of the design of DrWatson can be applied to other languages as
  well.</p>
  <p>In this paper we provide a summary of what DrWatson can do
  (detailed documentation that is regularly updated is hosted on
  <ext-link ext-link-type="uri" xlink:href="https://juliadynamics.github.io/DrWatson.jl/stable/">GitHub</ext-link>).
  We will then highlight some examples of how using DrWatson speeds up
  the scientific workflow in real-world scenarios. We close with a
  comparison with existing software.</p>
</sec>
<sec id="features-and-functionality">
  <title>Features and Functionality</title>
  <p>DrWatson has an opt-in design. This means that DrWatson’s features
  can be grouped into the following few main categories, which remain
  independent of each other (and thus you “opt-in” which to use).</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>Project setup &amp; navigation</bold>: A universal
      project structure and functions that allow you to consistently and
      robustly navigate through your project, no matter where it is
      located.</p>
    </list-item>
    <list-item>
      <p><bold>Naming schemes</bold>: A robust and deterministic scheme
      for naming and handling your data structures.</p>
    </list-item>
    <list-item>
      <p><bold>Saving tools</bold>: Tools for safely saving and loading
      your data, automatically tagging the Git commit ID to your saved
      files, and more.</p>
    </list-item>
    <list-item>
      <p><bold>Running &amp; listing simulations</bold>: Tools for
      producing tables of existing simulations/results, adding new
      simulation results to the tables, preparing batch parameter
      containers, and more.</p>
    </list-item>
  </list>
  <p>The next section illustrates these categories. For a more thorough
  explanation, the reader is referred to DrWatson’s main
  documentation.</p>
  <p>Please note that DrWatson is not a data management system and
  provides only basic data management functionality that remains
  self-contained in a single scientific project. One of our main future
  goals is to integrate DrWatson with a Relational Data Management
  System, specifically CaosDB
  (<xref alt="Fitschen et al., 2019" rid="ref-Fitschen2019" ref-type="bibr">Fitschen
  et al., 2019</xref>), which has been developed specifically to handle
  large data bases connecting several scientific projects.</p>
</sec>
<sec id="typical-workflow-with-drwatson">
  <title>Typical workflow with DrWatson</title>
  <p>In this section we demonstrate how using DrWatson makes the typical
  scientific workflow faster, more robust, and easily reproducible. This
  section is a brief summary of the
  <ext-link ext-link-type="uri" xlink:href="https://juliadynamics.github.io/DrWatson.jl/dev/workflow/">DrWatson
  Workflow Tutorial</ext-link>, which in itself showcases a subset of
  DrWatson’s functionality. There the workflow is discussed and
  demonstrated more thoroughly via explicitly running every code
  command.</p>
  <p>Typically, one starts a scientific project with the function
  <monospace>initialize_project</monospace>. This creates a project
  folder that contains sensible default structure (e.g. folders for
  data, papers, scripts, etc.), while also making the project a Julia
  project. This allows the scientific project to be tied with the full
  hierarchy of exact package versions used, which remains entirely
  independent from the main Julia installation (or any other project).
  The project is also a git repository, which allows code versioning and
  reproducibility, and DrWatson provides functions that make this
  process seamless (see below).</p>
  <p>Within the context of DrWatson, all project-related code runs
  <italic>after</italic> the corresponding Julia project has been
  activated. Several DrWatson functions like
  <monospace>projectdir</monospace>, <monospace>datadir</monospace>,
  <monospace>plotsdir</monospace> and similar are then made available.
  When these functions are called they always return the absolute path
  to the directory (or the appropriate subdirectories) in the active
  project, independently of the current working directory or the script
  directory these functions are called from. This establishes a
  relative-only path relationship within the project, which allows it to
  naturally run on other machines when shared or synced via e.g. a cloud
  service. Adding the command
  <monospace>@quickactivate &quot;ProjectName&quot;</monospace> to the
  start of every script automatically activates the appropriate project
  and thus enables all DrWatson features with minimal effort.</p>
  <p>Once the project structure and navigation has been established,
  there are several functions that help the scientific workflow. For
  example, the function <monospace>dict_list</monospace> provides a
  convenient and consistent way of defining containers of parameter
  values. <monospace>savename</monospace> can be used for preparing a
  file name or a figure title. Using it would transform the following
  dictionary</p>
  <code language="julia">parameters = Dict(:phi =&gt; 3, :pos_z =&gt; 0.5, :date =&gt; Date(2020,5,23))</code>
  <p>into</p>
  <code language="julia">savename(parameters, &quot;jld2&quot;)</code>
  <p>with output:</p>
  <preformat>&quot;date=2020-05-23_pos_z=0.5_phi=3.jld2&quot;</preformat>
  <p>Once a simulation script is created, taking advantage of
  e.g. <monospace>projectdir, dict_list, savename</monospace> among
  other functions, the user will typically want to save numeric results
  on disk. DrWatson offers many functions that help the workflow at this
  level. <monospace>safesave</monospace> ensures that saved data will
  never overwrite existing files, but make a new version instead (and
  back up the original file). <monospace>tagsave</monospace> allows one
  to add git-related information to saved data.
  <monospace>tagsave</monospace> is a function that excellently
  highlights how DrWatson is a minimally invasive framework. Continuing
  from the dictionary <monospace>parameters</monospace> defined above,
  we would save any kind of <monospace>data</monospace> wrapped in a
  dictionary with the command
  <monospace>save(savename(parameters, &quot;jld2&quot;), data)</monospace>
  (ending <monospace>.jld2</monospace> is used as an example). By only
  replacing the function <monospace>save</monospace> with
  <monospace>@tagsave</monospace>, it is possible to attach important
  information to the saved data</p>
  <code language="julia">@tagsave(savename(parameters, &quot;jld2&quot;), Dict(&quot;data&quot; =&gt; [1,2,3]));

load(savename(parameters, &quot;jld2&quot;)) # load back saved data</code>
  <p>yielding the output:</p>
  <preformat>Dict{Symbol,Any} with 6 entries:
  :gitcommit =&gt; &quot;v1.13.0-1-g3a5364f&quot;
  :script    =&gt; &quot;docs/build/string#3&quot;
  :data      =&gt; [1, 2, 3]
  :gitpatch  =&gt; &quot;&quot;</preformat>
  <p>The fields <monospace>:gitcommit, :script, :gitpatch</monospace>
  were added automatically and provide the necessary information for
  reproducibility. In case of uncommitted modifications (also called a
  “dirty git repository”), a patch is saved under the
  <monospace>:gitpatch</monospace> key which can be applied to the
  <monospace>:gitcommit</monospace> to restore the exact state of the
  repository. Calling <monospace>@tagsave</monospace> without extra
  arguments assumes that you use DrWatson’s suggested folder structure
  using <monospace>initialize_project</monospace>, and thus that it can
  find all git-related information automatically. However this is not
  necessary: you can instead provide a keyword argument
  <monospace>gitpath</monospace> to <monospace>@tagsave</monospace> and
  explictly specify a git path. Finally, the
  <monospace>parse_savename(filename; kwargs...)</monospace> function
  can be used to obtain the parameters dictionary from the filename.</p>
  <p>A last step is data aggregation. The function
  <monospace>collect_results</monospace> can traverse the data folder
  and collect all saved files into a <monospace>DataFrame</monospace>
  (the major Julia tabular datastructure) for further analysis. The
  function is adaptive in that it expands the table as needed when
  adding new simulations with potentially different parameters.</p>
  <p>Sharing and reproducing a DrWatson project is in every respect
  trivial. The entire project folder is simply sent to a different
  machine, and in a Julia session the user does the following:</p>
  <preformat>using Pkg
Pkg.activate(&quot;path/to/project&quot;)
Pkg.instantiate()</preformat>
  <p>and all necessary dependencies are installed automatically. Since
  the project uses only relative paths because of the function
  <monospace>projectdir</monospace>, every script runs as it did on the
  original machine. If all saved data are tagged with a git-commit, one
  can potentially re-create previous results by simply checking out the
  appropriate commit. Finally, since all package versions used are
  “baked” into the project, a DrWatson project does not break over time
  even if the main Julia installation is regularly updated.</p>
  <p>One thing that we hope to have highlighted in this section is how
  DrWatson’s functionality is not only minimally invasive, but is also
  achieved with minimal effort. All functionality is contained within
  the Julia programming language and within the script files naturally
  belonging to the project: no command-line usage or special commands
  are necessary, and neither is the preparation of additional
  configuration files outside of the scripts. DrWatson’s functionality
  comes directly from using the functions and macros exported by the
  package. While this is a great advantage in many use cases, it does
  come with a natural limitation: When running and interacting with code
  from different languages, the relevant file-IO logic needs to happen
  in Julia to leverage the full power of DrWatson.</p>
</sec>
<sec id="comparison-with-existing-software">
  <title>Comparison with existing software</title>
  <p>There are numerous tools, software packages and language extensions
  that provide functions to improve the scientific workflow and allow
  full reproducibility. They contain features like version control,
  templates for folder structures, management of external code
  dependencies and data provenance. Although the tools we investigated
  perform well in their respective domains and in some parts, such as
  data provenance, even outperform DrWatson, none of them supports the
  wide range of functions required for a scientific project, while being
  non-invasive and easy to use. Therefore, several tools must be
  combined to provide a similar set of functions as those provided by
  DrWatson.</p>
  <p>One main aspect, and the entry point to every scientific project,
  is a consistent folder structure. While DrWatson comes with a
  predefined structure, packages like <monospace>rrtools</monospace>
  (<xref alt="Sills, 2004" rid="ref-rrtools" ref-type="bibr">Sills,
  2004</xref>), <monospace>prodigenr</monospace>
  (<xref alt="Johnston, 2019 (accessed June 30, 2020)" rid="ref-prodigenr" ref-type="bibr">Johnston,
  2019 (accessed June 30, 2020)</xref>) and
  <monospace>starters</monospace>
  (<xref alt="Locke, 2019 (accessed June 30, 2020)" rid="ref-starters" ref-type="bibr">Locke,
  2019 (accessed June 30, 2020)</xref>) for R or
  <monospace>Cookiecutter</monospace>
  (<xref alt="Roy, 2020 (accessed June 30, 2020)" rid="ref-cookiecutter" ref-type="bibr">Roy,
  2020 (accessed June 30, 2020)</xref>) (with a template for scientific
  projects like <monospace>Cookiecutter-data-science</monospace>
  (<xref alt="Inc., 2020 (accessed June 30, 2020)" rid="ref-cookiecutter-data-science" ref-type="bibr">Inc.,
  2020 (accessed June 30, 2020)</xref>)) for Python, allow having a
  user-defined one. Like DrWatson, most of the tools that initialize a
  folder structure also initialize a Git repository for version control.
  In order to gain advantage from having code in version control,
  e.g. extracting diffs or commit ids, additional software packages,
  focused on data provenance, are needed.</p>
  <p>Applications like <monospace>sumatra</monospace>
  (<xref alt="Davison et al., 2014" rid="ref-sumatra" ref-type="bibr">Davison
  et al., 2014</xref>), which is written in Python and also supports
  MATLAB, R, and BASH, while also providing extensibility for other
  languages, work mainly by executing scripts through a separate
  standalone tool that captures and tags all files created at runtime.
  Another example of such an external manager is
  <monospace>ReproZip</monospace>
  (<xref alt="Chirigati et al., 2016" rid="ref-ChirigatiRSF16" ref-type="bibr">Chirigati
  et al., 2016</xref>), which traces system calls to identify which
  files are part of a specific analysis and generates additional
  metadata to combine everything together into zip-file in a
  reproducible manner. <monospace>ActivePapers</monospace>
  (<xref alt="Hinsen, 2011" rid="ref-HINSEN2011579" ref-type="bibr">Hinsen,
  2011</xref>) falls into the same category and provides a concept and
  guidelines for reproducible science. There are reference
  implementations of the ActivePapers concept for Python, JVM (Java
  Virtual Machine) and Pharo, see
  (<xref alt="ActivePapers, 2020 (accessed October 22, 2020)" rid="ref-activepapers" ref-type="bibr"><italic>ActivePapers</italic>,
  2020 (accessed October 22, 2020)</xref>). Specialised alternatives
  like <monospace>recordr</monospace>
  (<xref alt="Peter Slaughter, 2020 (accessed June 30, 2020)" rid="ref-recordr" ref-type="bibr">Peter
  Slaughter, 2020 (accessed June 30, 2020)</xref>) for R,
  <monospace>explore</monospace> for Matlab or
  <monospace>recipy</monospace>
  (<xref alt="Jackson et al., 2018" rid="ref-recipy" ref-type="bibr">Jackson
  et al., 2018</xref>) for Python aim at the non-invasive approach by
  redefining IO functions for logging metadata during saving.</p>
  <p>The outlined tools, however, come with a cost of being limited to
  certain supported IO functions or the need of additional software to
  run code or a server infrastructure. Moreover, most of them are tied
  to a specific programming language and data provenance is only
  provided in their own context and usually within a single process.
  Scientific projects, however, often deal with heterogeneous computing
  environments and pipelines running a multitude of scripts and
  applications connected to each other, thus the orchestration and data
  provenance needs to be implemented in a more language-agnostic way. An
  example for such a framework (with significantly different end-goals
  compared to DrWatson) is the Common Workflow Language
  (<xref alt="Amstutz et al., 2016" rid="ref-cwl" ref-type="bibr">Amstutz
  et al., 2016</xref>). Notice that in principle DrWatson is tied to
  Julia, a single programming language. But because Julia has strong
  interop capabilities, allowing native C/FORTRAN calls and calls to
  Python or R (for example) via PyCall and RCall, the Julia-based design
  of DrWatson is much less of a limiting factor than for other
  languages. In addition, DrWatson is suitable for both making
  repetitive workflows reproducible (which CWL targets) but also
  exploratory scientific work.</p>
  <p>Therefore, DrWatson only implements basic data provenance features
  like logging version control information in Julia dictionaries and
  storing parameter configurations in paths using the
  <monospace>savename</monospace> function, which in many cases already
  covers the basic requirements. The latter approach allows for a
  simple, universal, file-format-independent method for keeping
  simulation parameters together with result files.</p>
  <p>In terms of portability of scientific projects, management of
  external code dependencies and packages is crucial. Most of the
  mentioned languages come with a package manager enabling such
  functionality. <monospace>renv</monospace>
  (<xref alt="Ushey, 2020 (accessed June 30, 2020)" rid="ref-renv" ref-type="bibr">Ushey,
  2020 (accessed June 30, 2020)</xref>) for R implements a feature
  similar to projects that can be created with
  <monospace>Pkg.jl</monospace>, that DrWatson uses. Dependency
  management is also possible in Python, e.g. by using virtual
  environments, which are included in the standard library of Python
  since version 3.5.</p>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>In summary, DrWatson combines several functionalities, all
  communicating excellently with each other and almost all being
  entirely opt-in, while it goes well beyond only aiding data provenance
  or simply providing a default folder structure. This results in an
  efficient scientific workflow, taking time off of project management
  and giving it to doing science.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-rrtools">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Sills</surname><given-names>Andrew V.</given-names></name>
        </person-group>
        <article-title>RRtools—a maple package for aiding the discovery and proof of finite rogers–ramanujan type identities</article-title>
        <source>Journal of Symbolic Computation</source>
        <year iso-8601-date="2004">2004</year>
        <volume>37</volume>
        <issue>4</issue>
        <issn>0747-7171</issn>
        <uri>http://www.sciencedirect.com/science/article/pii/S0747717103001184</uri>
        <pub-id pub-id-type="doi">10.1016/j.jsc.2003.04.002</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-prodigenr">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Johnston</surname><given-names>Luke W.</given-names></name>
        </person-group>
        <source>Prodigenr-a component of reproducible and open scientific projects</source>
        <uri>https://github.com/lwjohnst86/prodigenr</uri>
      </element-citation>
    </ref>
    <ref id="ref-starters">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Locke</surname><given-names>Steph</given-names></name>
        </person-group>
        <source>Starters</source>
        <uri>https://github.com/lockedata/starters</uri>
      </element-citation>
    </ref>
    <ref id="ref-cookiecutter">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Roy</surname><given-names>Audrey</given-names></name>
        </person-group>
        <source>Cookiecutter</source>
        <uri>https://cookiecutter.readthedocs.io/en/1.7.2/</uri>
      </element-citation>
    </ref>
    <ref id="ref-cookiecutter-data-science">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Inc.</surname><given-names>DrivenData</given-names></name>
        </person-group>
        <source>Cookiecutter data science</source>
        <uri>https://drivendata.github.io/cookiecutter-data-science/#cookiecutter-data-science</uri>
      </element-citation>
    </ref>
    <ref id="ref-sumatra">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Davison</surname><given-names>Andrew</given-names></name>
          <name><surname>Mattioni</surname><given-names>Michele</given-names></name>
          <name><surname>Samarkanov</surname><given-names>D</given-names></name>
          <name><surname>Teleńczuk</surname><given-names>B</given-names></name>
        </person-group>
        <article-title>Sumatra: A toolkit for reproducible research</article-title>
        <source>Implementing Reproducible Research</source>
        <year iso-8601-date="2014-03">2014</year><month>03</month>
        <pub-id pub-id-type="doi">10.1201/9781315373461-3</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-recordr">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Peter Slaughter</surname><given-names>Christopher Jones</given-names><suffix>Matthew B. Jones</suffix></name>
        </person-group>
        <source>Recordr</source>
        <uri>https://github.com/NCEAS/recordr</uri>
        <pub-id pub-id-type="doi">10.5063/F1GF0RF6</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-recipy">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Jackson</surname><given-names>Michael</given-names></name>
          <name><surname>Wilson</surname><given-names>Robin</given-names></name>
          <name><surname>Zwaan</surname><given-names>Janneke van der</given-names></name>
          <name><surname>Steinbrook</surname><given-names>Daniel W.</given-names></name>
          <name><surname>Rathgeber</surname><given-names>Florian</given-names></name>
          <name><surname>Alegre</surname><given-names>Raquel</given-names></name>
          <name><surname>Edwards</surname><given-names>Thomas</given-names></name>
          <name><surname>Costello</surname><given-names>Cash</given-names></name>
          <name><surname>Danny</surname><given-names>Samuel</given-names></name>
          <name><surname>Chwiejczak</surname><given-names>Jan</given-names></name>
          <name><surname>Cottaar</surname><given-names>Michiel</given-names></name>
          <name><surname>Martinez-Ortiz</surname><given-names>Carlos</given-names></name>
          <name><surname>Vieglais</surname><given-names>Dave</given-names></name>
          <name><surname>Kucharavy</surname><given-names>Andrei</given-names></name>
          <name><surname>Ruben</surname><given-names>Gary</given-names></name>
          <name><surname>Upadhyay</surname><given-names>Utkarsh</given-names></name>
        </person-group>
        <article-title>Recipy</article-title>
        <year iso-8601-date="2018-10">2018</year><month>10</month>
        <uri>https://github.com/recipy/recipy</uri>
      </element-citation>
    </ref>
    <ref id="ref-renv">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Ushey</surname><given-names>Kevin</given-names></name>
        </person-group>
        <source>Introduction to renv</source>
        <uri>https://rstudio.github.io/renv/articles/renv.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-cwl">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Amstutz</surname><given-names>Peter</given-names></name>
          <name><surname>Crusoe</surname><given-names>Michael R.</given-names></name>
          <name><surname>Tijanić</surname><given-names>Nebojša</given-names></name>
          <name><surname>Chapman</surname><given-names>Brad</given-names></name>
          <name><surname>Chilton</surname><given-names>John</given-names></name>
          <name><surname>Heuer</surname><given-names>Michael</given-names></name>
          <name><surname>Kartashov</surname><given-names>Andrey</given-names></name>
          <name><surname>Leehr</surname><given-names>Dan</given-names></name>
          <name><surname>Ménager</surname><given-names>Hervé</given-names></name>
          <name><surname>Nedeljkovich</surname><given-names>Maya</given-names></name>
          <name><surname>Scales</surname><given-names>Matt</given-names></name>
          <name><surname>Soiland-Reyes</surname><given-names>Stian</given-names></name>
          <name><surname>Stojanovic</surname><given-names>Luka</given-names></name>
        </person-group>
        <article-title>Common Workflow Language, v1.0</article-title>
        <year iso-8601-date="2016-07">2016</year><month>07</month>
        <uri>https://figshare.com/articles/dataset/Common_Workflow_Language_draft_3/3115156</uri>
        <pub-id pub-id-type="doi">10.6084/m9.figshare.3115156.v2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Fitschen2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Fitschen</surname><given-names>Timm</given-names></name>
          <name><surname>Schlemmer</surname><given-names>Alexander</given-names></name>
          <name><surname>Hornung</surname><given-names>Daniel</given-names></name>
          <name><surname>Wörden</surname><given-names>Henrik tom</given-names></name>
          <name><surname>Parlitz</surname><given-names>Ulrich</given-names></name>
          <name><surname>Luther</surname><given-names>Stefan</given-names></name>
        </person-group>
        <article-title>CaosDBresearch data management for complex, changing, and automated research workflows</article-title>
        <source>Data</source>
        <publisher-name>MDPI AG</publisher-name>
        <year iso-8601-date="2019-06">2019</year><month>06</month>
        <volume>4</volume>
        <issue>2</issue>
        <uri>https://doi.org/10.3390/data4020083</uri>
        <pub-id pub-id-type="doi">10.3390/data4020083</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ChirigatiRSF16">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Chirigati</surname><given-names>Fernando</given-names></name>
          <name><surname>Rampin</surname><given-names>Rémi</given-names></name>
          <name><surname>Shasha</surname><given-names>Dennis</given-names></name>
          <name><surname>Freire</surname><given-names>Juliana</given-names></name>
        </person-group>
        <article-title>ReproZip: Computational reproducibility with ease</article-title>
        <source>Proceedings of the 2016 international conference on management of data</source>
        <publisher-name>ACM</publisher-name>
        <publisher-loc>San Francisco, California, USA</publisher-loc>
        <year iso-8601-date="2016">2016</year>
        <isbn>978-1-4503-3531-7</isbn>
        <pub-id pub-id-type="doi">10.1145/2882903.2899401</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-HINSEN2011579">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hinsen</surname><given-names>Konrad</given-names></name>
        </person-group>
        <article-title>A data and code model for reproducible research and executable papers</article-title>
        <source>Procedia Computer Science</source>
        <year iso-8601-date="2011">2011</year>
        <volume>4</volume>
        <issn>1877-0509</issn>
        <uri>http://www.sciencedirect.com/science/article/pii/S1877050911001190</uri>
        <pub-id pub-id-type="doi">10.1016/j.procs.2011.04.061</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-activepapers">
      <element-citation publication-type="book">
        <source>ActivePapers</source>
        <uri>http://www.activepapers.org/</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1043</article-id>
<article-id pub-id-type="doi">10.21105/joss.01043</article-id>
<title-group>
<article-title>TaylorSeries.jl: Taylor expansions in one and several
variables in Julia</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8470-9054</contrib-id>
<string-name>Luis Benet</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5593-1564</contrib-id>
<string-name>David P. Sanders</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Instituto de Ciencias F√≠sicas, Universidad Nacional
Aut√≥noma de M√©xico (UNAM)</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Departamento de F√≠sica, Facultad de Ciencias, Universidad
Nacional Aut√≥noma de M√©xico (UNAM)</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2018-09-20">
<day>20</day>
<month>9</month>
<year>2018</year>
</pub-date>
<volume>4</volume>
<issue>36</issue>
<fpage>1043</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Taylor series</kwd>
<kwd>Automatic differentiation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The purpose of the <monospace>TaylorSeries.jl</monospace> package
  is to provide a framework to exploit Taylor polynomials in one and
  several variables in the
  <ext-link ext-link-type="uri" xlink:href="https://julialang.org">Julia
  programming language</ext-link>
  (<xref alt="Bezanson et al., 2017" rid="ref-julia" ref-type="bibr">Bezanson
  et al., 2017</xref>). It can be thought of as providing a primitive
  CAS (computer algebra system), which works numerically and not
  symbolically. The package allows the user to define dense polynomials
  <inline-formula><alternatives>
  <tex-math><![CDATA[p(x)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>p</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  of one variable and <inline-formula><alternatives>
  <tex-math><![CDATA[p(\mathbf{x})]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>p</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>ùê±</mml:mi></mml:mstyle><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  of several variables with a specified maximum degree, and perform
  operations on them, including powers and composition, as well as
  series expansions for elementary functions of polynomials, for example
  <inline-formula><alternatives>
  <tex-math><![CDATA[\exp[p(x)]]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo>exp</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mi>p</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>x</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  where techniques of automatic differentiation are used
  (<xref alt="Haro et al., 2016" rid="ref-HaroEtAlU003AParameterizMeth" ref-type="bibr">Haro
  et al., 2016</xref>;
  <xref alt="Tucker, 2011" rid="ref-TuckerU003AValidatedNumerics" ref-type="bibr">Tucker,
  2011</xref>). Differentiation and integration are also
  implemented.</p>
  <p>Two basic immutable types are defined,
  <monospace>Taylor1{T}</monospace> and
  <monospace>TaylorN{T}</monospace>, which represent polynomials in one
  and several variables, respectively; the maximum degree is a field of
  the types. These types are parametrized by the type
  <monospace>T</monospace> of the polynomial coefficients; they
  essentially consist of one-dimensional arrays of coefficients, ordered
  by increasing degree.</p>
  <p>In the case of <monospace>TaylorN</monospace>, the coefficients are
  <monospace>HomogeneousPolynomial</monospace>s, which in turn are
  vectors of coefficients representing all monomials with a given number
  of variables and order (total degree), ordered lexicographically.
  Higher degree polynomials require more memory allocation, especially
  for several variables; while we have not extensively tested the limits
  of the degree of the polynomials that can be used,
  <monospace>Taylor1</monospace> polynomials up to degree 80 and
  <monospace>TaylorN</monospace> polynomials up to degree 60 in 4
  variables have been successfully used. Note that the current
  implementation of multi-variable series builds up extensive tables in
  memory which allow to speed up the index calculations.</p>
  <p>Julia‚Äôs parametrized type system allows the construction of Taylor
  series whose coefficient type is any subtype of the
  <monospace>Number</monospace> abstract type. Use cases include complex
  numbers, arbitrary precision <monospace>BigFloat</monospace>s
  (<xref alt="Fousse et al., 2007" rid="ref-MPFR" ref-type="bibr">Fousse
  et al., 2007</xref>), <monospace>Interval</monospace>s
  (<xref alt="Sanders &amp; Benet, 2019" rid="ref-IntervalArithmetic.jl" ref-type="bibr">Sanders
  &amp; Benet, 2019</xref>), <monospace>ArbFloat</monospace>s
  (<xref alt="Sarnoff, 2019" rid="ref-ArbFloats.jl" ref-type="bibr">Sarnoff,
  2019</xref>), as well as <monospace>Taylor1</monospace> and
  <monospace>TaylorN</monospace> objects themselves.</p>
  <p><monospace>TaylorSeries.jl</monospace> is the main component of
  <ext-link ext-link-type="uri" xlink:href="https://github.com/PerezHz/TaylorIntegration.jl"><monospace>TaylorIntegration.jl</monospace></ext-link>
  (<xref alt="P√©rez-Hern√°ndez &amp; Benet, 2019" rid="ref-TaylorIntegration.jl" ref-type="bibr">P√©rez-Hern√°ndez
  &amp; Benet, 2019</xref>), whose aim is to perform accurate
  integration of ODEs using the Taylor method, including jet transport
  techniques, where a small region around an initial condition is
  integrated. It is also a key component of
  <ext-link ext-link-type="uri" xlink:href="https://github.com/JuliaIntervals/TaylorModels.jl"><monospace>TaylorModels.jl</monospace></ext-link>
  (<xref alt="Benet &amp; Sanders, 2019" rid="ref-TaylorModels.jl" ref-type="bibr">Benet
  &amp; Sanders, 2019</xref>), whose aim is to construct rigorous
  polynomial approximations of functions.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>We present three examples to illustrate the use of
  <monospace>TaylorSeries.jl</monospace>. Other examples, as well as a
  detailed user guide, can be found in the
  <ext-link ext-link-type="uri" xlink:href="http://www.juliadiff.org/TaylorSeries.jl/stable">documentation</ext-link>.</p>
  <sec id="hermite-polynomials">
    <title>Hermite polynomials</title>
    <p>As a first example we describe how to generate the
    <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Hermite_polynomials">Hermite
    polynomials</ext-link> (‚Äúphysicist‚Äôs‚Äù version) up to a given maximum
    order. Firstly we directly exploit the recurrence relation satisfied
    by the polynomials.</p>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="Fig1.pdf" />
    The example above can be slightly modified to compute, for example,
    the 100th Hermite polynomial. In this case, the coefficients will be
    larger than <inline-formula><alternatives>
    <tex-math><![CDATA[2^{63}-1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msup><mml:mn>2</mml:mn><mml:mn>63</mml:mn></mml:msup><mml:mo>‚àí</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>,
    so the modular behavior, under overflow of the standard
    <monospace>Int64</monospace> type, will not suffice. Rather, the
    polynomials should be generated with
    <monospace>hermite_polynomials(BigInt, 100)</monospace> to ensure
    the use of arbitrary-length integers.</p>
  </sec>
  <sec id="using-a-generating-function">
    <title>Using a generating function</title>
    <p>As a second example, we describe a numerical way of obtaining the
    Hermite polynomials from their generating function: the
    <inline-formula><alternatives>
    <tex-math><![CDATA[n]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>n</mml:mi></mml:math></alternatives></inline-formula>th
    Hermite polynomial corresponds to the <inline-formula><alternatives>
    <tex-math><![CDATA[n]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>n</mml:mi></mml:math></alternatives></inline-formula>th
    derivative of the function <inline-formula><alternatives>
    <tex-math><![CDATA[\exp(2t \, x - t^2)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo>exp</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>2</mml:mn><mml:mi>t</mml:mi><mml:mspace width="0.167em"></mml:mspace><mml:mi>x</mml:mi><mml:mo>‚àí</mml:mo><mml:msup><mml:mi>t</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>.</p>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="Fig2.pdf" />
    This example shows that the calculations are performed numerically
    and not symbolically, using <monospace>TaylorSeries.jl</monospace>
    as a polynomial manipulator; this is manifested by the fact that the
    last coefficient of <monospace>HH(6)</monospace> is not identical to
    an integer.</p>
  </sec>
  <sec id="taylor-method-for-integrating-ordinary-differential-equations">
    <title>Taylor method for integrating ordinary differential
    equations</title>
    <p>As a final example, we give a simple implementation of Picard
    iteration to integrate an ordinary differential equation, which is
    equivalent to the Taylor method.</p>
    <p>We consider the initial-value problem
    <inline-formula><alternatives>
    <tex-math><![CDATA[\dot{x} = x]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mover><mml:mi>x</mml:mi><mml:mo accent="true">Ãá</mml:mo></mml:mover><mml:mo>=</mml:mo><mml:mi>x</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>,
    with initial condition <inline-formula><alternatives>
    <tex-math><![CDATA[x(0) = 1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>x</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>.
    One step of the integration corresponds to constructing the Taylor
    series of the solution <inline-formula><alternatives>
    <tex-math><![CDATA[x(t)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>x</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>t</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
    in powers of <inline-formula><alternatives>
    <tex-math><![CDATA[t]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>t</mml:mi></mml:math></alternatives></inline-formula>:</p>
    <p><inline-graphic mimetype="application" mime-subtype="pdf" xlink:href="Fig3.pdf" />
    Thus this Taylor expansion of order 20 around
    <inline-formula><alternatives>
    <tex-math><![CDATA[t_0=0]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
    suffices to obtain the exact solution at
    <inline-formula><alternatives>
    <tex-math><![CDATA[t=1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>,
    while the error at time <inline-formula><alternatives>
    <tex-math><![CDATA[t=2]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mn>2</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
    from the same expansion is <inline-formula><alternatives>
    <tex-math><![CDATA[4.53 \times 10^{-14}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>4.53</mml:mn><mml:mo>√ó</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>‚àí</mml:mo><mml:mn>14</mml:mn></mml:mrow></mml:msup></mml:mrow></mml:math></alternatives></inline-formula>.
    This indicates that a proper treatment should estimate the size of
    the required step that should be taken as a function of the
    solution.</p>
  </sec>
  <sec id="acknowledgements">
    <title>Acknowledgements</title>
    <p>We are thankful for the additions of
    <ext-link ext-link-type="uri" xlink:href="https://github.com/JuliaDiff/TaylorSeries.jl/graphs/contributors">all
    contributors</ext-link> to this project. We acknowledge financial
    support from PAPIME grants PE-105911 and PE-107114, and PAPIIT
    grants IG-101113, IG-100616 and IN-117117. LB and DPS acknowledge
    support via the C√°tedra Marcos Moshinsky (2013 and 2018,
    respectively).</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-julia">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bezanson</surname><given-names>Jeff</given-names></name>
          <name><surname>Edelman</surname><given-names>Alan</given-names></name>
          <name><surname>Karpinski</surname><given-names>Stefan</given-names></name>
          <name><surname>Shah</surname><given-names>Viral B.</given-names></name>
        </person-group>
        <article-title>Julia: A fresh approach to numerical computing</article-title>
        <source>SIAM Review</source>
        <year iso-8601-date="2017">2017</year>
        <volume>59</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1137/141000671</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-TuckerU003AValidatedNumerics">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Tucker</surname><given-names>Warwick</given-names></name>
        </person-group>
        <source>Validated numerics: A short introduction to rigorous computations</source>
        <publisher-name>Princeton University Press</publisher-name>
        <publisher-loc>Princeton, NJ, USA</publisher-loc>
        <year iso-8601-date="2011">2011</year>
        <isbn>0691147817, 9780691147819</isbn>
      </element-citation>
    </ref>
    <ref id="ref-HaroEtAlU003AParameterizMeth">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Haro</surname><given-names>√Älex</given-names></name>
          <name><surname>Canadell</surname><given-names>Marta</given-names></name>
          <name><surname>Figueras</surname><given-names>Jordi-Lluis</given-names></name>
          <name><surname>Luque</surname><given-names>Alejandro</given-names></name>
          <name><surname>Mondelo</surname><given-names>Josep Maria</given-names></name>
        </person-group>
        <source>The parameterization method for invariant manifolds: From rigorous results to effective computations</source>
        <publisher-name>Springer International Publishing</publisher-name>
        <publisher-loc>Switzerland</publisher-loc>
        <year iso-8601-date="2016">2016</year>
        <uri>https://cds.cern.ch/record/2151752</uri>
        <pub-id pub-id-type="doi">10.1007/978-3-319-29662-3</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-MPFR">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Fousse</surname><given-names>Laurent</given-names></name>
          <name><surname>Hanrot</surname><given-names>Guillaume</given-names></name>
          <name><surname>Lef√®vre</surname><given-names>Vincent</given-names></name>
          <name><surname>P√©lissier</surname><given-names>Patrick</given-names></name>
          <name><surname>Zimmermann</surname><given-names>Paul</given-names></name>
        </person-group>
        <article-title>MPFR: A multiple-precision binary floating-point library with correct rounding</article-title>
        <source>ACM Trans. Math. Softw.</source>
        <publisher-name>ACM</publisher-name>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <year iso-8601-date="2007-06">2007</year><month>06</month>
        <volume>33</volume>
        <issue>2</issue>
        <issn>0098-3500</issn>
        <uri>http://doi.acm.org/10.1145/1236463.1236468</uri>
        <pub-id pub-id-type="doi">10.1145/1236463.1236468</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-IntervalArithmetic.jl">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Sanders</surname><given-names>David P.</given-names></name>
          <name><surname>Benet</surname><given-names>Luis</given-names></name>
        </person-group>
        <article-title>IntervalArithmetic.jl: Rigorous floating-point calculations using interval arithmetic in Julia</article-title>
        <year iso-8601-date="2019">2019</year>
        <uri>https://github.com/JuliaIntervals/IntervalArithmetic.jl</uri>
      </element-citation>
    </ref>
    <ref id="ref-ArbFloats.jl">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Sarnoff</surname><given-names>Jeffrey</given-names></name>
        </person-group>
        <article-title>ArbFloats.jl</article-title>
        <year iso-8601-date="2019">2019</year>
        <uri>https://github.com/JuliaArbTypes/ArbFloats.jl</uri>
      </element-citation>
    </ref>
    <ref id="ref-TaylorIntegration.jl">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>P√©rez-Hern√°ndez</surname><given-names>Jorge A.</given-names></name>
          <name><surname>Benet</surname><given-names>Luis</given-names></name>
        </person-group>
        <article-title>TaylorIntegration.jl: Precise ODE integration using Taylor‚Äôs method in Julia</article-title>
        <year iso-8601-date="2019">2019</year>
        <uri>https://github.com/PerezHz/TaylorIntegration.jl</uri>
        <pub-id pub-id-type="doi">10.5281/zenodo.2562364</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-TaylorModels.jl">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Benet</surname><given-names>Luis</given-names></name>
          <name><surname>Sanders</surname><given-names>David P.</given-names></name>
        </person-group>
        <article-title>TaylorModels.jl: Rigorous function approximation with Taylor models in Julia</article-title>
        <year iso-8601-date="2019">2019</year>
        <uri>https://github.com/JuliaIntervals/TaylorModels.jl</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2646</article-id>
<article-id pub-id-type="doi">10.21105/joss.02646</article-id>
<title-group>
<article-title>CircuitGraph: A Python package for Boolean
circuits</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Joseph Sweeney</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Ruben Purdy</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Ronald D Blanton</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Lawrence Pileggi</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Electrical and Computer Engineering, Carnegie
Mellon University, Pittsburgh, PA 15213</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-08-13">
<day>13</day>
<month>8</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>56</issue>
<fpage>2646</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Boolean circuits</kwd>
<kwd>satisfiability</kwd>
<kwd>graph</kwd>
<kwd>electronic design automation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>A Boolean circuit is a fundamental mathematical model ubiquitous in
  the design of modern computers. The model consists of a directed graph
  wherein nodes are logic gates with corresponding Boolean functions and
  edges are wires which determine the composition of the gates.
  <monospace>CircuitGraph</monospace> is a open-source Python library
  for manipulating and analyzing Boolean circuits.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Analysis, manipulation, and generation of Boolean circuits is
  fundamental to many aspects of digital hardware design, cryptography,
  constraint solving, and other areas. Highly optimized software for
  processing Boolean circuits exists. Unfortunately it generally is
  proprietary, with expensive license fees. Furthermore, these options
  suffer from poor documentation, are closed source, and typically rely
  on Tool control language (Tcl). While simple, Tcl is slow, has limited
  libraries and supporting community, and is unnecessarily verbose.
  These reasons motivate the development of our open source solution.
  While this software will directly benefit our lab as a research
  platform, it certainly has application in other environments such as
  the classroom.</p>
</sec>
<sec id="functionality">
  <title>Functionality</title>
  <p>The functionality of <monospace>CircuitGraph</monospace> has been
  tailored to our research needs, however, the library is easily
  extensible to many other applications of Boolean circuits. In the
  following sub sections, we highlight some of the libraryâ€™s key
  features.</p>
  <p>The core of the library is the <monospace>Circuit</monospace>
  class, which internally uses a <monospace>networkx.DiGraph</monospace>
  data structure from Hagberg et al.
  (<xref alt="2008" rid="ref-SciPyProceedings_11" ref-type="bibr">2008</xref>).
  The class implements key Boolean circuit functionalities on top of the
  graph as we describe below.</p>
  <sec id="interfaces">
    <title>Interfaces</title>
    <p>Compatibility with existing systems is a primary goal for our
    library. Towards this end, we have built interfaces for a subset of
    Verilog, the most commonly used Boolean circuit format. This library
    supports generic stuctural Verilog which is the typical output of
    synthesis tools. Specifically, the library can parse combinational
    gates in the following forms. We also provide an interface to parse
    sequential elements.</p>
    <code language="verilog">assign a = b|(c^d);
xor(e,f,g);</code>
    <p>Additionally, we have provided a library of generic and benchmark
    circuits that can be quickly instantiated.</p>
    <code language="python">import circuitgraph as cg
c0 = cg.from_file('path/circuit.v')
c1 = cg.from_file('path/circuit.bench')
c2 = cg.from_lib('c17')</code>
  </sec>
  <sec id="composition">
    <title>Composition</title>
    <p>A common issue found in similar tools is the poor expressivity of
    circuit construction primitives. We aim to build a simple, but
    powerful syntax for creating and connecting nodes in a circuit. The
    ease of our syntax is enabled by the Python language. An example of
    this syntax is below.</p>
    <code language="python"># add an OR gate named 'a'
c0.add('a','or')

# create an AND gate with circuit inputs in a single line. Input connections to the gate can be spcified with the fanin argument, output connections with fanout. 
c0.add('g','and',fanin=[c.add(f'in_{i}','input') for i in range(4)])</code>
  </sec>
  <sec id="synthesis">
    <title>Synthesis</title>
    <p>We provide an interface to common synthesis tools including
    <monospace>yosys</monospace> from Wolf
    (<xref alt="n.d." rid="ref-wolf2019yosys" ref-type="bibr">n.d.</xref>)
    and <monospace>Cadence Genus</monospace>. This allows the user to
    run basic synthesis routines on circuits from within Python.
    Specifically, we support the generic multi-level synthesis routines
    of both tools.</p>
    <code language="python"># synthesize circuit with yosys
c_syn = cg.syn(c0, &quot;Yosys&quot;)</code>
  </sec>
  <sec id="satisfiability">
    <title>Satisfiability</title>
    <p>Satisfiability is an essential problem related to Boolean
    circuits. Surprisingly, commercial synthesis tools do not directly
    support its use (although the open source tools yosys does). We add
    satisfiability to our library which in turn enables a wide array of
    analysis including sensitization, sensitivity, and influence. Our
    implementation utilizes <monospace>pysat</monospace> from Ignatiev
    et al.
    (<xref alt="2018" rid="ref-imms-sat18" ref-type="bibr">2018</xref>).
    The main interface is simple allowing the user to determine
    satisfiability of a circuit under a set of variable assignments. To
    develop more complex routines, the user can also access the
    underlying <monospace>pysat.solver</monospace> instance. In
    conjunction with satisfiability, we provide interfaces to
    approximate and exact model count algorithms.</p>
    <code language="python"># check satisfiability assuming 'a' is False
cg.sat(c0,{'a':False})

# get number of solutions to circuit with 'a' False
cg.model_count(c0,{'a':False})</code>
  </sec>
</sec>
<sec id="future-work">
  <title>Future Work</title>
  <p>We plan on adding support for the BLIF and Bench formats.
  Additionally, we may expand the compatibility with Verilog standards
  if a need is shown. Support for timing-based synthesis may be useful
  in some scenarios. Other improvements could interfaces to open source
  simulation and Automatic Test Pattern Generation (ATPG) tools.</p>
</sec>
<sec id="requirements">
  <title>Requirements</title>
  <p>As previously mentioned, <monospace>CircuitGraph</monospace> relies
  on the <monospace>networkx</monospace> and
  <monospace>pysat</monospace> libraries. Additionally, it uses
  <monospace>pyverilog</monospace> to parse verilog netlists.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-imms-sat18">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Ignatiev</surname><given-names>Alexey</given-names></name>
          <name><surname>Morgado</surname><given-names>Antonio</given-names></name>
          <name><surname>Marques-Silva</surname><given-names>Joao</given-names></name>
        </person-group>
        <article-title>PySAT: A Python toolkit for prototyping with SAT oracles</article-title>
        <source>SAT</source>
        <year iso-8601-date="2018">2018</year>
        <uri>https://doi.org/10.1007/978-3-319-94144-8_26</uri>
        <pub-id pub-id-type="doi">10.1007/978-3-319-94144-8_26</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-wolf2019yosys">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Wolf</surname><given-names>Clifford</given-names></name>
        </person-group>
        <article-title>Yosys manual</article-title>
      </element-citation>
    </ref>
    <ref id="ref-SciPyProceedings_11">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Hagberg</surname><given-names>Aric A.</given-names></name>
          <name><surname>Schult</surname><given-names>Daniel A.</given-names></name>
          <name><surname>Swart</surname><given-names>Pieter J.</given-names></name>
        </person-group>
        <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
        <source>Proceedings of the 7th Python in Science Conference (SciPy2008)</source>
        <person-group person-group-type="editor">
          <name><surname>Varoquaux</surname><given-names>GaÃ«l</given-names></name>
          <name><surname>Vaught</surname><given-names>Travis</given-names></name>
          <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
        </person-group>
        <publisher-loc>Pasadena, CA USA</publisher-loc>
        <year iso-8601-date="2008">2008</year>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3049</article-id>
<article-id pub-id-type="doi">10.21105/joss.03049</article-id>
<title-group>
<article-title>Autosubmit GUI: A Javascript-based Graphical User
Interface to Monitor Experiments Workflow Execution</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-0842-0459</contrib-id>
<string-name>Wilmer Uruchi</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Miguel Castrillo</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Daniel Beltrán</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Barcelona Supercomputing Center</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-12-16">
<day>16</day>
<month>12</month>
<year>2020</year>
</pub-date>
<volume>6</volume>
<issue>59</issue>
<fpage>3049</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Python</kwd>
<kwd>High Performance Computing</kwd>
<kwd>Workflow Manager</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>Autosubmit GUI</monospace> is a front-end software
  developed using <bold>Javascript</bold> and <bold>ReactJS</bold> that
  aims to provide users with complex information from the workflow
  execution of scientific experiments (managed by
  <monospace>Autosubmit</monospace>) in any system, but mainly
  <bold>High-Performance Computing (HPC)</bold> platforms.
  <monospace>Autosubmit</monospace>
  (<xref alt="D. Manubens-Gil, 2016" rid="ref-autosubmit" ref-type="bibr">D.
  Manubens-Gil, 2016</xref>) is a Python-based workflow manager able to
  handle complex tasks involving different sub-steps (e.g., scientific
  computational experiments). These steps or jobs are executed in one or
  multiple computing systems (platforms), from High-Performance
  Computers to small clusters or workstations. The workflow manager is
  able to orchestrate the jobs that constitute the workflow while
  respecting their dependencies and handling errors.</p>
  <p>This front-end software consumes information served by an API
  (<monospace>Autosubmit API</monospace>
  (<xref alt="Autosubmit API, 2020" rid="ref-api" ref-type="bibr"><italic>Autosubmit
  API</italic>, 2020</xref>)) that collects data from the execution of
  experiment workflows. An experiment can be seen as a task that can be
  decomposed into different sub-steps with established
  inter-dependencies. The execution of an experiment and its jobs may
  generate a high amount of information that needs to be processed so
  users can visualize it. <monospace>Autosubmit API</monospace>
  summarizes this information and presents it as API requests.
  <monospace>Autosubmit GUI</monospace> consumes these API requests and
  shows the information available in a condensed, comprehensive, and
  dynamic way. <monospace>Autosubmit GUI</monospace> uses three highly
  popular and useful libraries: <monospace>FancyTree</monospace>
  (<xref alt="FancyTree, 2020" rid="ref-fancytree" ref-type="bibr"><italic>FancyTree</italic>,
  2020</xref>), <monospace>vis.js</monospace>
  (<xref alt="Vis.js, 2020" rid="ref-visjs" ref-type="bibr"><italic>Vis.js</italic>,
  2020</xref>), and <monospace>react-google-charts</monospace>
  (<xref alt="React Google Charts, 2020" rid="ref-reactgoogle" ref-type="bibr"><italic>React
  Google Charts</italic>, 2020</xref>); among other web resources that
  facilitate the visualization of information and information
  updates.</p>
  <p>The visual approach to experiment workflow management is not new in
  the High-Performance Computing scenario. As two widely adopted tools,
  we have <monospace>Cylc</monospace>
  (<xref alt="Cylc, 2020" rid="ref-cylc" ref-type="bibr"><italic>Cylc</italic>,
  2020</xref>) and <monospace>ecFlow</monospace>
  (<xref alt="ecFlow, 2020" rid="ref-ecflow" ref-type="bibr"><italic>ecFlow</italic>,
  2020</xref>). <monospace>Autosubmit GUI</monospace> attempts to
  present a development template for those willing to work in a web
  environment to develop tools for progress monitoring purposes.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The number of jobs in an experiment workflow (managed by
  <monospace>Autosubmit</monospace>) ranges from one to several
  thousand. The jobs can vary in the type of task they perform, from
  data retrieval to complex climate simulations. The result of the
  execution of an experiment workflow is usually large amounts of
  information. Access to this information is possible through the file
  system or terminal commands (provided by
  <monospace>Autosubmit</monospace>). Experiment workflow monitoring is
  possible through <monospace>Autosubmit</monospace>; the program checks
  the output of the experiment’s jobs, logs, and job status in the
  remote platform or workstation. Then,
  <monospace>Autosubmit</monospace> summarizes progress and status
  information in a graph representation as a <monospace>pdf</monospace>
  file. <monospace>Autosubmit</monospace> can also show the workflow
  status information as a <monospace>txt</monospace> file where the jobs
  and their status are listed. Although they fulfill the purpose of
  experiment monitoring, these ways of presenting workflow information
  fall short once the experiments grow in the number of jobs involved
  and associated dependencies. Therefore, our users needed a more
  optimal, accessible, and interactive technology to access their
  experiments’ status and other artifacts product of the jobs’
  execution. <monospace>Autosubmit</monospace> can be installed by other
  HPC groups but would require some configuration to address any
  particular setting in the new environment.
  <monospace>Autosubmit GUI</monospace> consumes an
  <monospace>API</monospace> whose data is generated by
  <monospace>Autosubmit</monospace> at <bold>Barcelona Supercomputing
  Center</bold>, but another workflow manager should be able to (in
  theory) generate similar information. Then,
  <monospace>Autosubmit GUI</monospace> could be adapted to consume that
  information. The main objective is that
  <monospace>Autosubmit GUI</monospace> could be used as a template or
  starting point for other HPC groups that need a visual monitoring tool
  for their workflow managers, or as a natural complement if they decide
  to use <monospace>Autosubmit</monospace> as a workflow manager.</p>
  <p>The <monospace>Autosubmit GUI</monospace> development team chose a
  web architecture as a solution that would allow to quickly deploy (and
  update) this service with minimum requirements for users. Furthermore,
  this choice would allow developers to reuse existing technology, in
  the form of open-source visualization libraries, to let
  <monospace>Autosubmit GUI</monospace> show information in a graphical
  way. Since the amount of information we need to show is considerable,
  the development team focused on optimization and little loading
  times.</p>
  <p>As mentioned, the primary experiment workflow status representation
  generated by the users of <monospace>Autosubmit</monospace> is a graph
  generated through <monospace>Graphviz</monospace> in a
  <monospace>pdf</monospace> file. Consequently, that was the first
  representation we tried to mimic in
  <monospace>Autosubmit GUI</monospace>. For this purpose, we chose
  <monospace>vis.js</monospace>, a proven
  <monospace>Javascript</monospace> library that implements graph
  representations for the provided data. This library also provides a
  rich API to manipulate its representation and dynamically update its
  data. In our implementation, we present several ways to access the
  <monospace>vis.js</monospace> objects and adapt them to our
  necessities in concordance with the requirements of
  <monospace>ReactJS</monospace>. We avoid unnecessary refreshes of the
  graph component by storing it in the <monospace>ReactJS</monospace>
  internal state. We believe that our implementation can guide those
  willing to work with graph representations in a web environment.</p>
  <p>Later, <monospace>Autosubmit GUI</monospace> was required to
  implement an experiment workflow representation that showed more
  information at first glance, arranging jobs hierarchically. As a
  result, we decided to implement a tree view based on
  <monospace>FancyTree</monospace>, a <monospace>Javascript</monospace>
  library. This library provides a rich API that allowed us to implement
  a structured visualization of the experiment workflow. Again, we
  adapted this library to work smoothly with
  <monospace>ReactJS</monospace>. By directly accessing the internal
  component infrastructure, we achieved smooth updates of the tree’s
  information. It is also an excellent example of how to use the tools
  provided by this library. Moreover, we use
  <monospace>react-google-charts</monospace> to display statistics
  generated by the experiment workflow execution.</p>
  <p><bold>Javascript</bold> is a programming language that has taken
  over the Web and is becoming (if it is not already) a standard. For
  our front-end purposes, it has all the tools that we needed and also
  gives us access to a variety of useful extensions. The central vision
  of <monospace>Autosubmit GUI</monospace> was to develop a graphical
  interface that showed as much information as possible at first glance;
  moreover, this interface should be scalable, with additional required
  information taking an area of the browser window. We decided that the
  interface should be divided into modules that would be displayed in a
  tiled design. The interface should update the modules (tiles)
  individually and independently without affecting general performance.
  <bold>ReactJS</bold> provides the tools to accomplish this purpose,
  where we can translate our idea of modules to
  <italic>components</italic>. So, it was the chosen framework.</p>
</sec>
<sec id="main-features">
  <title>Main features</title>
  <fig>
    <caption><p>Autosubmit GUI main
    window.<styled-content id="figU003Amainwindow"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="mainwindow.jpg" xlink:title="" />
  </fig>
  <list list-type="bullet">
    <list-item>
      <p>Users can search for experiments that match specific criteria:
      Currently active experiments (those on execution), experiments
      belonging to a particular user, description of experiments that
      contain a specific word, and other filters.
      <monospace>Autosubmit GUI</monospace> presents the result in a
      main window
      <xref alt="Figure 1" rid="figU003Amainwindow">Figure 1</xref>
      where the user can monitor the experiment’s progress and
      additional relevant information. Each experiment item gives direct
      access to the experiment representation (tree view by default) or
      a <italic>quick view</italic> that displays only the essential
      information. From the experiment item, there is an option to see a
      summary of the experiment’s current progress.</p>
    </list-item>
    <list-item>
      <p>Users can see the representation of their experiment in three
      ways with some variations:</p>
      <list list-type="bullet">
        <list-item>
          <p><bold>Tree View</bold>
          <xref alt="Figure 2" rid="figU003Atreeview">Figure 2</xref>:
          Uses <monospace>FancyTree</monospace> to present the
          experiment jobs in a structured and hierarchical fashion.</p>
        </list-item>
        <list-item>
          <p><bold>Graph View</bold>
          <xref alt="Figure 3" rid="figU003Agraphview">Figure 3</xref>:
          Uses <monospace>vis.js</monospace> to present the experiment
          jobs in a graph.</p>
        </list-item>
        <list-item>
          <p><bold>Quick View</bold>: Uses
          <monospace>FancyTree</monospace> to present a browsable list
          of the experiment jobs.</p>
        </list-item>
      </list>
    </list-item>
  </list>
  <fig>
    <caption><p>Tree
    View.<styled-content id="figU003Atreeview"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="treeview.jpg" xlink:title="" />
  </fig>
  <fig>
    <caption><p>Graph
    View.<styled-content id="figU003Agraphview"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="graphview.jpg" xlink:title="" />
  </fig>
  <list list-type="bullet">
    <list-item>
      <p>All experiment representations allow searching for jobs by name
      or by patterns in the job’s name using the
      <monospace>*</monospace> wildcard.</p>
    </list-item>
    <list-item>
      <p>The graph view presents representation variations for ease of
      usage.</p>
    </list-item>
    <list-item>
      <p>The graph and tree views allow the user to view detailed
      information about a job by clicking on its associated node or
      item.</p>
    </list-item>
    <list-item>
      <p>The graph view allows the user to select some nodes (jobs) and
      generate an Autosubmit command to type in a terminal through the
      <monospace>Change Status</monospace> button.</p>
    </list-item>
    <list-item>
      <p>The tree view allows the user to select some items (jobs) and
      generate a command through the
      <monospace>Activate Selection Mode</monospace> button.</p>
    </list-item>
    <list-item>
      <p>The user can set experiments that are
      <monospace>ACTIVE</monospace> (shown at the top of the page next
      to the experiment identifier) to be automatically updated
      according to changes in real-time. The user can do this by pushing
      the <monospace>Start Job Monitor</monospace> button. Then,
      <monospace>Autosubmit GUI</monospace> will query the API from time
      to time and update the graph or tree representation with the job
      changes. This functionality doesn’t prompt a full component
      rerender; instead, the interface updates the nodes or items
      individually and independently.</p>
    </list-item>
    <list-item>
      <p>The user can visualize the last 100 lines of the experiment’s
      log.</p>
    </list-item>
    <list-item>
      <p>The interface provides statistics of the workflow execution
      through the <monospace>Statistics</monospace> tab using
      <monospace>react-google-charts</monospace>.</p>
    </list-item>
    <list-item>
      <p>The interface provides performance metrics of the experiment in
      the <monospace>Performance</monospace> tab. The metrics that the
      interface shows in this section, and their calculation, are based
      on
      (<xref alt="Balaji &amp; Wright, 2017" rid="ref-performance" ref-type="bibr">Balaji
      &amp; Wright, 2017</xref>).</p>
    </list-item>
    <list-item>
      <p>The interface displays historical data for the experiment and
      its indiviual jobs.</p>
    </list-item>
  </list>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We acknowledge contributions from Francisco Doblas-Reyes, Kim
  Serradell, and all our <bold>Earth Science Department</bold>
  users.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-ecflow">
      <element-citation>
        <article-title>ecFlow: A client/server workflow package</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://confluence.ecmwf.int/display/ECFLOW/ecflow+home</uri>
      </element-citation>
    </ref>
    <ref id="ref-cylc">
      <element-citation>
        <article-title>Cylc: A general purpose workflow engine that orchestrates cycling workflows very efficiently</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://confluence.ecmwf.int/display/ECFLOW/ecflow+home</uri>
      </element-citation>
    </ref>
    <ref id="ref-api">
      <element-citation>
        <article-title>Autosubmit API</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://earth.bsc.es/gitlab/wuruchi/autosubmitreact/-/wikis/Autosubmit-API</uri>
      </element-citation>
    </ref>
    <ref id="ref-fancytree">
      <element-citation>
        <article-title>FancyTree: A JavaScript tree view / tree grid plugin with support for keyboard, inline editing, filtering, checkboxes, drag’n’drop, and lazy loading.</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://github.com/mar10/fancytree/</uri>
      </element-citation>
    </ref>
    <ref id="ref-visjs">
      <element-citation>
        <article-title>Vis.js: A dynamic, browser based visualization library.</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://visjs.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-reactgoogle">
      <element-citation>
        <article-title>React google charts: A declarative API to make rendering charts fun and easy.</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://react-google-charts.com/</uri>
      </element-citation>
    </ref>
    <ref id="ref-autosubmit">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>D. Manubens-Gil</surname><given-names>C. Prodhomme</given-names><suffix>J. Vegas-Regidor</suffix></name>
        </person-group>
        <article-title>Seamless management of ensemble climate prediction experiments on HPC platforms</article-title>
        <source>2016 International Conference on High Performance Computing &amp; Simulation (HPCS), Innsbruck</source>
        <year iso-8601-date="2016">2016</year>
        <uri>https://earth.bsc.es/gitlab/es/autosubmit</uri>
        <pub-id pub-id-type="doi">10.1109/HPCSim.2016.7568429</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-performance">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Balaji</surname><given-names>Maisonnave</given-names><suffix>V.</suffix></name>
          <name><surname>Wright</surname><given-names>G.</given-names></name>
        </person-group>
        <article-title>CPMIP: measurements of real computational performance of Earth system models in CMIP6</article-title>
        <source>Geosci. Model Dev.</source>
        <year iso-8601-date="2017">2017</year>
        <issue>10</issue>
        <uri>https://gmd.copernicus.org/preprints/gmd-2016-197/gmd-2016-197-manuscript-version3.pdf</uri>
        <pub-id pub-id-type="doi">10.5194/gmd-10-19-2017</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">737</article-id>
<article-id pub-id-type="doi">10.21105/joss.00737</article-id>
<title-group>
<article-title>Cylc: A Workflow Engine for Cycling
Systems</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5715-5279</contrib-id>
<string-name>Hilary J Oliver</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5904-7511</contrib-id>
<string-name>Matthew Shin</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6916-7034</contrib-id>
<string-name>Oliver Sanders</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>National Institute of Water and Atmospheric Research
(NIWA), New Zealand</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Met Office, UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>3</volume>
<issue>27</issue>
<fpage>737</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>forecasting</kwd>
<kwd>weather</kwd>
<kwd>meteorology</kwd>
<kwd>climate</kwd>
<kwd>hydrology</kwd>
<kwd>ocean</kwd>
<kwd>workflow</kwd>
<kwd>scheduling</kwd>
<kwd>automation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Cylc is a workflow engine for orchestrating complex distributed
  <italic>suites</italic> of inter-dependent cycling (repeating) tasks,
  as well as ordinary non-cycling workflows. It has been widely adopted
  for weather, climate, and related forecasting applications in research
  and production HPC environments, and it is now part of the official
  software infrastructure for the Unified Model atmospheric model. Cylc
  is written in Python and developed primarily by NIWA (NZ) and Met
  Office (UK). It has strong support for large production systems, but
  ease of use for individuals with smaller workflow automation
  requirements remains a key priority. Despite its origins, Cylc is not
  in any way specialized to environmental forecasting.</p>
  <p>In cycling workflows tasks repeat on sequences that may represent
  forecast cycles, chunks of a simulation too long for a single run,
  steps in some multi-program iterative process (e.g. for optimizing
  model parameters), or datasets to be processed as they are generated
  or received, and so forth. Cycling in Cylc is controlled by ISO 8601
  date-time recurrence expressions (e.g. for environmental forecasting),
  or integer recurrence expressions (e.g. for iterative processes).
  Dependence across cycles creates ongoing, potentially never-ending,
  workflows (rather than simply a succession of disconnected single
  workflows). Cylc is unique in its ability to manage these workflows
  without imposing a global cycle loop, so that one cycle does not have
  to complete before the next can start. Instead, Cylc’s novel
  meta-scheduling algorithm runs cycles concurrently to the full extent
  allowed by task dependencies. So, for example, on restarting after
  extended downtime, a workflow that processes real-time data can clear
  its backlog and catch up very quickly by interleaving cycles.</p>
  <p>As a distributed system, Cylc scales sideways: each workflow is
  managed by its own lightweight server program. Existing scripts or
  programs can be used without modification in Cylc tasks: they are
  automatically wrapped in code to trap errors and report run status via
  authenticated HTTPS messages or polling. Cylc workflows are defined
  with a graph notation that efficiently expresses dependence between
  tasks; and task runtime properties (what to run, and where and how to
  run the job) are defined in an inheritance hierarchy for efficient
  sharing of common settings. Tasks can depend on the wall clock and
  arbitrary external events, as well as on the status of other tasks
  (<italic>submitted</italic>, <italic>started</italic>,
  <italic>succeeded</italic>, <italic>failed</italic>, etc.). Dependence
  between workflows is also supported: for coupled systems you can
  choose between a large suite that controls all tasks, and many smaller
  suites that depend on each other.</p>
  <p>Other features of Cylc include a comprehensive command line
  interface and GUI; restart from workflow state snapshots with
  automatic determination of the fate of orphaned jobs; support for
  common HPC resource managers and batch systems (PBS, Slurm, etc.) as
  well as background jobs; edit run (manually modify a job script at the
  last minute); configurable automatic retries; flexible event handling;
  simulation and dummy modes; support for the Jinja2 template processor
  in workflow definitions; internal queues to limit job submission; and
  conditional triggering. Major items on the development roadmap include
  a web GUI and port to Python 3.</p>
  <p>The Cylc source code is available on GitHub
  <ext-link ext-link-type="uri" xlink:href="http://cylc.github.io/cylc/">http://cylc.github.io/cylc/</ext-link>
  and is archived to Zenodo with the linked DOI:
  (<xref alt="Oliver et al., 2018" rid="ref-zenodo" ref-type="bibr">Oliver
  et al., 2018</xref>)</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-zenodo">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Oliver</surname><given-names>Hilary</given-names></name>
          <name><surname>Shin</surname><given-names>Matt</given-names></name>
          <name><surname>et.al.</surname><given-names>Oliver Sanders</given-names></name>
        </person-group>
        <article-title>Cylc/cylc: Cylc-7.7.0</article-title>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2018-05-22">2018</year><month>05</month><day>22</day>
        <pub-id pub-id-type="doi">10.5281/zenodo.1251084</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

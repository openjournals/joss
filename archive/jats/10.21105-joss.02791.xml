<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2791</article-id>
<article-id pub-id-type="doi">10.21105/joss.02791</article-id>
<title-group>
<article-title>s4rdm3x: A Tool Suite to Explore Code to Architecture
Mapping Techniques</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1154-5308</contrib-id>
<string-name>Tobias Olsson</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1173-5187</contrib-id>
<string-name>Morgan Ericsson</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-0835-823X</contrib-id>
<string-name>Anna Wingkvist</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Computer Science and Media Technology,
Linnaeus University, Sweden</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-04-13">
<day>13</day>
<month>4</month>
<year>2020</year>
</pub-date>
<volume>6</volume>
<issue>58</issue>
<fpage>2791</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>orphan adoption</kwd>
<kwd>clustering</kwd>
<kwd>reflexion modeling</kwd>
<kwd>architecture conformance checking</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Architectural drift and erosion, where the implementation starts to
  deviate from the intended software architecture or the rules set by
  it, are common problems in long-lived software systems. This can be
  avoided by using techniques, such as Reflexion modeling
  (<xref alt="Murphy et al., 1995" rid="ref-murphy1995software" ref-type="bibr">Murphy
  et al., 1995</xref>), to validate that the implementation conforms to
  the indented architecture. Unfortunately, such techniques require a
  mapping from source code modules (e.g., classes) to elements of the
  architecture, something that is not always available or up to date.
  This is a known problem when, e.g., companies want to adopt static
  architecture conformance checking; the effort to manually create or
  bring this mapping up to date is just too time-consuming and
  error-prone
  (<xref alt="Ali et al., 2017" rid="ref-Ali2017ArchitectureRequirements" ref-type="bibr">Ali
  et al., 2017</xref>;
  <xref alt="Bittencourt et al., 2010" rid="ref-InfoRetrieval" ref-type="bibr">Bittencourt
  et al., 2010</xref>).</p>
  <p>The <monospace>s4rdm3x</monospace> tool suite is designed for
  researchers and practitioners to study and evaluate algorithms that
  perform part of the mapping automatically, such as orphan-adoption
  clustering
  (<xref alt="Christl et al., 2007" rid="ref-HuGMe" ref-type="bibr">Christl
  et al., 2007</xref>) or information retrieval techniques
  (<xref alt="Bittencourt et al., 2010" rid="ref-InfoRetrieval" ref-type="bibr">Bittencourt
  et al., 2010</xref>). It includes a graphical user interface to define
  and run experiments with mapping algorithms and their parameters, and
  visualize and explore the results of these experiments. The
  experiments can be executed locally or in a remote high-performance
  computing environment. The tool suite includes reference
  implementations of state of the art mapping algorithms and a set of
  Java systems with validated mappings between classes and architecture
  elements. The tool suite is extensible, so it is easy to add new
  mapping algorithms and visualizations to explore their
  performance.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>To faciliate the further development and evaluiation of mapping
  techniques the software provides reference implementations of the
  current state-of-the-art mapping techniques and the means to implement
  new techniques and run experiments. It includes the HuGMe orphan
  adoption clustering method
  (<xref alt="Christl et al., 2007" rid="ref-HuGMe" ref-type="bibr">Christl
  et al., 2007</xref>), and four attraction functions to decide which
  architectural element a source code module should be mapped to:
  <monospace>CountAttract</monospace>
  (<xref alt="Christl et al., 2007" rid="ref-HuGMe" ref-type="bibr">Christl
  et al., 2007</xref>), <monospace>IRAttract</monospace>,
  <monospace>LSIAttract</monospace>
  (<xref alt="Bittencourt et al., 2010" rid="ref-InfoRetrieval" ref-type="bibr">Bittencourt
  et al., 2010</xref>) and <monospace>NBAttract</monospace>
  (<xref alt="Tobias Olsson et al., 2019" rid="ref-NaiveBayes" ref-type="bibr">Tobias
  Olsson et al., 2019</xref>). There is also a reference implementation
  of our novel technique to create a textual representation of source
  code dependencies at an architectural level; Concrete Dependency
  Abstraction (CDA). It also contains a set of validated mappings
  between source code classes and architectural elements that are often
  used in software architecture erosion research. These systems have
  either been recovered from replication packages
  (<xref alt="Brunet et al., 2012" rid="ref-brunet2012evolutionary" ref-type="bibr">Brunet
  et al., 2012</xref>;
  <xref alt="Lenhard et al., 2019" rid="ref-LenhardExploringSCMIndicatingArchInconsistency" ref-type="bibr">Lenhard
  et al., 2019</xref>) or the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/sebastianherold/SAEroConRepo">SAEroCon
  workshop repository</ext-link>.</p>
</sec>
<sec id="the-s4rdm3x-tool-suite">
  <title>The <monospace>s4rdm3x</monospace> Tool Suite</title>
  <p><monospace>S4rdm3x</monospace> is an extensible suite of tools for
  source code analysis, architecture definition, mapping of source code
  modules to architecture elements, experiment definitions, and
  exploratory and visual analysis. The suite consists of an
  <italic>extensible core</italic> and two tools, a <italic>graphical
  editor</italic> to create and visualize mapping experiments and a
  <italic>command-line tool to run experiment</italic> at scale.</p>
  <fig>
    <caption><p>Overview of the s4rdm3x Core showing the implementation
    metamodel, and the mapper and experiment subsystem</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="classes.pdf" xlink:title="" />
  </fig>
  <p>The <italic>core</italic> provides Java bytecode analysis to
  extract a dependency graph (and naming information) as well as loading
  an architectural definition and source to module mapping. Figure 1
  provides an overview of the important classes in the core and their
  main dependencies; the three leftmost classes represent source code
  modules, and their implemented dependencies contained as a graph and
  the architecture is represented by components and their allowed
  dependencies. There is a rich set of dependencies that are extracted
  from (Java) byte code, including the possibility to include implicit
  dependencies found via hard-coded constants. The
  <monospace>MapperBase</monospace> class is used to implement different
  mapping strategies as subclasses.
  <monospace>MapperExperiment</monospace> provides functionality to set
  up and run mapping experiments using combinations of random parameters
  at different intervals. An experiment is implemented as a subclass of
  <monospace>MapperExperiment</monospace> that instantiates the
  corresponding subclasses of <monospace>MapperBase</monospace>. This
  means that the mappers are not exclusive for experiments and can be
  reused in other situations, e.g., in a tool that performs
  semi-automatic mapping as part of a reflexion modeling approach.</p>
  <p>The <italic>graphical editor</italic> is used to define, visualize,
  analyze, and compare how well mapping algorithms perform with
  different parameters and initial sets of known mappings. It supports a
  range of visualizations and can be extended with new ones. The editor
  uses an Immediate Mode GUI approach, where the application renders the
  graphical primitives it needs (e.g., lines, rectangles, and points)
  every frame, an approach often used in computer games and tools used
  for computer game development since it offers fine-grained control
  over the visualization. This fine-grained control makes it possible to
  extend the editor with custom visualizations. The GUI uses
  <ext-link ext-link-type="uri" xlink:href="https://opengl.org">OpenGL</ext-link>
  to provide hardware-accelerated rendering.</p>
  <p>The graphical editor can be used to run experiments, but these
  generally require a large number of combinations of, e.g., parameters,
  initial sets, and systems, so they can take a long time to run. The
  suite includes a command-line tool that runs these combinations in
  parallel on many-core machines. The command-line tool can read
  experiment definitions in XML exported from the graphical editor and
  save the results in a format that can be imported and visualized.</p>
  <p><monospace>S4rdm3x</monospace> is implemented in Java and depends
  on
  <ext-link ext-link-type="uri" xlink:href="https://asm.ow2.io">ASM</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://www.cs.waikato.ac.nz/ml/weka">Weka</ext-link>,
  and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/kotlin-graphics/imgui">Dear
  JVM ImGui</ext-link>.</p>
</sec>
<sec id="applications">
  <title>Applications</title>
  <p>The <monospace>S4rdm3x</monospace> tool suite has been used in
  research studies on orphan adoption
  (<xref alt="T. Olsson et al., 2018" rid="ref-ImprovedHuGMe" ref-type="bibr">T.
  Olsson et al., 2018</xref>;
  <xref alt="Tobias Olsson et al., 2019" rid="ref-NaiveBayes" ref-type="bibr">Tobias
  Olsson et al., 2019</xref>) and as a continuous integration tool-chain
  for static architecture conformance checking of student project
  submissions.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>This work is supported by the
  <ext-link ext-link-type="uri" xlink:href="https://lnu.se/forskning/sok-forskning/linnaeus-university-centre-for-data-intensive-sciences-and-applications">Linnaeus
  University Centre for Data Intensive Sciences and Applications
  (DISA)</ext-link> High-Performance Computing Center.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-HuGMe">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Christl</surname><given-names>A</given-names></name>
          <name><surname>Koschke</surname><given-names>R</given-names></name>
          <name><surname>Storey</surname><given-names>M-A</given-names></name>
        </person-group>
        <article-title>Automated clustering to support the reflexion method</article-title>
        <source>Information and Software Technology</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2007">2007</year>
        <volume>49</volume>
        <issue>3</issue>
        <issn>0950-5849</issn>
        <pub-id pub-id-type="doi">10.1016/j.infsof.2006.10.015</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-InfoRetrieval">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Bittencourt</surname><given-names>R A</given-names></name>
          <name><surname>Jansen de Souza Santos</surname><given-names>G</given-names></name>
          <name><surname>Guerrero</surname><given-names>D D S</given-names></name>
          <name><surname>Murphy</surname><given-names>G C</given-names></name>
        </person-group>
        <article-title>Improving automated mapping in reflexion models using information retrieval techniques</article-title>
        <source>IEEE working conference on reverse engineering</source>
        <year iso-8601-date="2010">2010</year>
        <pub-id pub-id-type="doi">10.1109/WCRE.2010.26</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-NaiveBayes">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Olsson</surname><given-names>Tobias</given-names></name>
          <name><surname>Ericsson</surname><given-names>Morgan</given-names></name>
          <name><surname>Wingkvist</surname><given-names>Anna</given-names></name>
        </person-group>
        <article-title>Semi-automatic mapping of source code using naive bayes</article-title>
        <source>Proceedings of the 13th european conference on software architecture-volume 2</source>
        <year iso-8601-date="2019">2019</year>
        <pub-id pub-id-type="doi">10.1145/3344948.3344984</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ImprovedHuGMe">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Olsson</surname><given-names>T</given-names></name>
          <name><surname>Ericsson</surname><given-names>M</given-names></name>
          <name><surname>Wingkvist</surname><given-names>A</given-names></name>
        </person-group>
        <article-title>Towards improved initial mapping in semi automatic clustering</article-title>
        <source>Proceedings of the 12th european conference on software architecture: Companion proceedings</source>
        <publisher-name>ACM</publisher-name>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <year iso-8601-date="2018">2018</year>
        <isbn>978-1-4503-6483-6</isbn>
        <uri>http://doi.acm.org/10.1145/3241403.3241456</uri>
        <pub-id pub-id-type="doi">10.1145/3241403.3241456</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-murphy1995software">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Murphy</surname><given-names>G. C.</given-names></name>
          <name><surname>Notkin</surname><given-names>D.</given-names></name>
          <name><surname>Sullivan</surname><given-names>K.</given-names></name>
        </person-group>
        <article-title>Software reflexion models: Bridging the gap between source and high-level models</article-title>
        <source>ACM SIGSOFT Software Engineering Notes</source>
        <publisher-name>ACM</publisher-name>
        <year iso-8601-date="1995">1995</year>
        <volume>20</volume>
        <issue>4</issue>
      </element-citation>
    </ref>
    <ref id="ref-Ali2017ArchitectureRequirements">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Ali</surname><given-names>N.</given-names></name>
          <name><surname>Baker</surname><given-names>S.</given-names></name>
          <name><surname>O’Crowley</surname><given-names>R.</given-names></name>
          <name><surname>Herold</surname><given-names>S.</given-names></name>
          <name><surname>Buckley</surname><given-names>J.</given-names></name>
        </person-group>
        <article-title>Architecture consistency: State of the practice, challenges and requirements</article-title>
        <source>Empirical Software Engineering</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2017-02">2017</year><month>02</month>
        <volume>23</volume>
        <issue>1</issue>
      </element-citation>
    </ref>
    <ref id="ref-LenhardExploringSCMIndicatingArchInconsistency">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lenhard</surname><given-names>J.</given-names></name>
          <name><surname>Blom</surname><given-names>M.</given-names></name>
          <name><surname>Herold</surname><given-names>S.</given-names></name>
        </person-group>
        <article-title>Exploring the suitability of source code metrics for indicating architectural inconsistencies</article-title>
        <source>Software Quality Journal</source>
        <year iso-8601-date="2019-03">2019</year><month>03</month>
        <volume>27</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1007/s11219-018-9404-z</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-brunet2012evolutionary">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Brunet</surname><given-names>J.</given-names></name>
          <name><surname>Bittencourt</surname><given-names>R. A.</given-names></name>
          <name><surname>Serey</surname><given-names>D.</given-names></name>
          <name><surname>Figueiredo</surname><given-names>J.</given-names></name>
        </person-group>
        <article-title>On the evolutionary nature of architectural violations</article-title>
        <source>Working conference on reverse engineering</source>
        <publisher-name>IEEE</publisher-name>
        <year iso-8601-date="2012">2012</year>
        <pub-id pub-id-type="doi">10.1109/wcre.2012.35</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1453</article-id>
<article-id pub-id-type="doi">10.21105/joss.01453</article-id>
<title-group>
<article-title>PDFIO: PDF Reader Library for native
Julia</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4856-7244</contrib-id>
<string-name>Sambit Kumar Dash</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Director, Lenatics Solutions Pvt. Ltd.</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-04-26">
<day>26</day>
<month>4</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>43</issue>
<fpage>1453</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>PDF</kwd>
<kwd>document archive</kwd>
<kwd>data extraction</kwd>
<kwd>text extraction</kwd>
<kwd>data mining</kwd>
<kwd>data management</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Portable Document Format (PDF) is the most ubiquitous file format
  for text, scientific research, legal documentation and many other
  fields for information presentation and dissemination. Being a final
  form format of choice, a large body of text is currently archived in
  this format. Julia is an upcoming programming language in the field of
  data sciences. Extracting archived content and understanding document
  metadata is beneficial to the language usage.</p>
  <p><monospace>PDFIO</monospace> is an API developed purely in Julia.
  Almost, all the functionalities of PDF understanding is entirely
  written from scratch in Julia with the only exception of certain
  (de)compression codecs and cryptography, where standard open source
  libraries are being used.</p>
  <p>The following are some of the benefits of utilizing this
  approach:</p>
  <list list-type="order">
    <list-item>
      <p>PDF files have been in existence for over three decades.
      Implementations of PDF writers are not always accurate to the
      specification. They may even vary significantly from vendor to
      vendor. Every time someone gets a new PDF file, there is a
      possibility that file may not be interpreted as per the
      specification. A script-based language makes it easier for the
      consumers to quickly modify and enhance the code to their specific
      needs.</p>
    </list-item>
    <list-item>
      <p>When a higher-level scripting language implements a C/C++ PDF
      library API, the scope is limited to achieving certain high- level
      tasks like graphics or text extraction, annotation or signature
      content extraction, or page extraction or merging.</p>
      <p>However, <monospace>PDFIO</monospace> represents the PDF
      specification as a model in the Model, View and Controller
      parlance. A PDF file can be represented as a collection of
      interconnected Julia structures. Those structures can be utilized
      in granular tasks or simply can be used to understand the
      structure of the PDF document.</p>
      <p>As per the PDF specification, text can be presented as part of
      the page content stream or inside PDF page annotations. An API
      like <monospace>PDFIO</monospace> can create two categories of
      object types. One representing the text object inside the content
      stream and the other for the text inside an annotation object.
      Thus, it provides flexibility to the API user.</p>
    </list-item>
    <list-item>
      <p>Since, the API is written as an object model of PDF documents,
      itâ€™s easier to extend with additional PDF write or update
      capabilities. Although, the current implementation does not
      provide the PDF writing capabilities, the foundation has been laid
      for future extension.</p>
    </list-item>
  </list>
  <p>There are also certain downsides to this approach:</p>
  <list list-type="order">
    <list-item>
      <p>Any API that represents an object model of a document tends to
      carry the complexity of introducing abstract objects. They can be
      opaque objects (handles) that are representational-specific to the
      API. They may not have any functional meaning. The methods are
      granular and may not complete one use-level task. The amount of
      code needed to complete a user-level task can be substantially
      higher.</p>
      <p>A comparative presentation of such approach can be seen in the
      illustration given below. A text extraction task that can be one
      simple method invocation in a competing library like
      <monospace>Taro</monospace>, can involve more number of steps in
      <monospace>PDFIO</monospace>. For example, in
      <monospace>PDFIO</monospace> the following steps have to be
      carried out:</p>
      <list list-type="alpha-lower">
        <list-item>
          <p>Open the PDF document and obtain the document handle.
          </p>
        </list-item>
        <list-item>
          <p>Query the document handle for all the pages in the
          document.</p>
        </list-item>
        <list-item>
          <p>Iterate the pages and obtain page object handles for each
          of the pages.
          </p>
        </list-item>
        <list-item>
          <p>Extract the text from the page objects and write to a file
          IO.
          </p>
        </list-item>
        <list-item>
          <p>Close the document ensuring all the document resources are
          reclaimed.</p>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p>The API user may need to refer to the PDF specification
      (PDF-32000-1:2008)(<xref alt="Adobe Systems Inc., 2008" rid="ref-AdobeU003A2008" ref-type="bibr">Adobe
      Systems Inc., 2008</xref>) for semantic understanding of PDF files
      in accomplishing some of the tasks. For example, the workflow of
      PDF text extraction above is a natural extension from how text is
      represented in a PDF file as per the specification. A PDF file is
      composed of pages and text is represented inside each page content
      object. The object model of <monospace>PDFIO</monospace> is a
      Julia language representation of the PDF specification.</p>
    </list-item>
  </list>
  <sec id="illustration">
    <title>Illustration</title>
    <p>The popular package
    <monospace>Taro.jl</monospace>(<xref alt="Avik Sen, 2013" rid="ref-AvikU003A2013" ref-type="bibr">Avik
    Sen, 2013</xref>) that utilizes Java based
    <ext-link ext-link-type="uri" xlink:href="http://tika.apache.org/">Apache
    Tika</ext-link>,
    <ext-link ext-link-type="uri" xlink:href="http://poi.apache.org/">Apache
    POI</ext-link> and
    <ext-link ext-link-type="uri" xlink:href="https://xmlgraphics.apache.org/fop/">Apache
    FOP</ext-link> libraries for reading PDF and other file types may
    need the following code to extract text and other metadata from the
    document.</p>
    <code language="julia">using Taro
Taro.init()
meta, txtdata = Taro.extract(&quot;sample.pdf&quot;);
    </code>
    <p>The same functionality with <monospace>PDFIO</monospace> may look
    like the code below:</p>
    <code language="julia">function getPDFText(src, out)
    doc = pdDocOpen(src)
    docinfo = pdDocGetInfo(doc)
    open(out, &quot;w&quot;) do io
        npage = pdDocGetPageCount(doc)
        for i=1:npage
            page = pdDocGetPage(doc, i)
            pdPageExtractText(io, page)
        end
    end
    pdDocClose(doc)
    return docinfo
end
    </code>
    <p>While <monospace>PDFIO</monospace> requires a larger number of
    lines of code, it provides a more granular set of APIs for
    understanding the PDF document structure.</p>
  </sec>
</sec>
<sec id="functionality">
  <title>Functionality</title>
  <p><monospace>PDFIO</monospace> is implemented in layers enabling
  following features:</p>
  <list list-type="order">
    <list-item>
      <p>Extract and render the Contents in a PDF page. This ensures the
      contents are organized in a hierarchical grouping that can be used
      for rendering of the content. Rendering is used here in a generic
      sense and is not confined to painting on a raster device. For
      example, extracting document text can also be considered a
      rendering task. <monospace>pdPageExtractText</monospace> is an apt
      example of the same.</p>
    </list-item>
    <list-item>
      <p>Provide functional tasks to PDF document access. A few of such
      functionalities are:</p>
      <list list-type="bullet">
        <list-item>
          <p>Getting the page count in a document
          (<monospace>pdDocGetPageCount</monospace>)</p>
        </list-item>
        <list-item>
          <p>Finding labels in a document page
          (<monospace>pdDocGetPageLabel</monospace>)</p>
        </list-item>
        <list-item>
          <p>Extracting outlines defined in the document
          (<monospace>pdDocGetOutline</monospace>)</p>
        </list-item>
        <list-item>
          <p>Extracting document metadata information
          (<monospace>pdDocGetInfo</monospace>)</p>
        </list-item>
        <list-item>
          <p>Validation of signatures in a PDF document
          (<monospace>pdDocValidateSignatures</monospace>)</p>
        </list-item>
        <list-item>
          <p>Extracting fonts and font attributes
          (<monospace>pdPageGetFonts</monospace>,
          <monospace>pdFontIsItalic</monospace> etc.)</p>
        </list-item>
      </list>
    </list-item>
    <list-item>
      <p>Access low level PDF objects (<monospace>CosObject</monospace>)
      and obtain information when high-level APIs do not exist. These
      kinds of functionalities are mostly related to the file structure
      of the PDF documents and also known as the
      <monospace>COS</monospace> layer APIs.</p>
    </list-item>
  </list>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>We acknowledge contributions of all the community developers who
  have contributed to this effort. Their contribution can be viewed at:
  https://github.com/sambitdash/PDFIO.jl/graphs/contributors</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-AdobeU003A2008">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>Adobe Systems Inc.</string-name>
        </person-group>
        <source>Document Management - Portable Document Format - Part 1: PDF 1.7</source>
        <publisher-name>Adobe Systems Inc.</publisher-name>
        <year iso-8601-date="2008">2008</year>
        <uri>https://www.adobe.com/devnet/pdf/pdf_reference.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-AvikU003A2013">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>Avik Sen</string-name>
        </person-group>
        <article-title>Taro.jl - Read and write Excel, Word and PDF documents in Julia</article-title>
        <year iso-8601-date="2013">2013</year>
        <uri>https://github.com/aviks/Taro.jl</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

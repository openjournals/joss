<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1756</article-id>
<article-id pub-id-type="doi">10.21105/joss.01756</article-id>
<title-group>
<article-title>GKNAP: A Java and C++ package for solving the
multidimensional knapsack problem</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3770-1391</contrib-id>
<string-name>Shalin Shah</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Johns Hopkins University</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-09-12">
<day>12</day>
<month>9</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>42</issue>
<fpage>1756</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>knapsack</kwd>
<kwd>multidimensional knapsack</kwd>
<kwd>solver</kwd>
<kwd>lagrangian multipliers</kwd>
<kwd>utility ratio</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The 0/1 multidimensional (multi-constraint) knapsack problem is the
  0/1 knapsack problem with m constraints. It is a strongly NP-hard
  problem, and might be difficult to solve using exact methods like
  branch and bound and dynamic programming, especially when the number
  of variables is large. We present a genetic algorithm for the
  multidimensional knapsack problem with Java and C++ code that is able
  to solve publicly available instances in a very short computational
  duration. Our algorithm uses iteratively computed Lagrangian
  multipliers as constraint weights to augment the greedy algorithm for
  the multidimensional knapsack problem and uses that information in a
  greedy crossover in a genetic algorithm. The algorithm uses several
  other hyperparameters which can be set in the code to control
  convergence. Our algorithm improves upon the algorithm by Chu and
  Beasley
  (<xref alt="Chu &amp; Beasley, 1998" rid="ref-chu1998genetic" ref-type="bibr">Chu
  &amp; Beasley, 1998</xref>) in that it converges to optimum or near
  optimum solutions much faster.</p>
  <p>It is possible to use the greedy algorithm as part of a genetic
  algorithm, and our results show that it works really well. Not only is
  our algorithm able to exceed the greedy estimate, but for most problem
  instances, it is able to find the optimum solution. Our algorithm is
  similar to
  (<xref alt="Shah, 2019" rid="ref-shah2019genetic" ref-type="bibr">Shah,
  2019</xref>) which uses greedy crossover for the 0/1 knapsack problem.
  Since the multidimensional knapsack problem has multiple constraints,
  we assign a weight to each constraint using iteratively computed
  Lagrangian multipliers. This is similar to the approach in
  (<xref alt="Chu &amp; Beasley, 1998" rid="ref-chu1998genetic" ref-type="bibr">Chu
  &amp; Beasley, 1998</xref>) which uses surrogate multipliers. The
  difference is that we use the multipliers in a greedy crossover which
  is highly constructive and can find optimum solutions much
  quicker.</p>
</sec>
<sec id="mathematics">
  <title>Mathematics</title>
  <p>We use Lagrangian multipliers to augment the utility ratio for the
  multidimensional knapsack problem according to the following
  steps:</p>
  <p>For each object and for each constraint (for that object) the
  weight (constraint) value is multiplied with the corresponding
  Lagrangian multiplier the sum of these values is obtained. The value
  obtained is then divided by the number of constraints. Then, the ratio
  of the value (profit) and the value obtained in the previous step is
  obtained which is the profit-weight ratio for that object:</p>
  <p><inline-formula><alternatives>
  <tex-math><![CDATA[ratio_i = v_i / ((\sum_{j=1}^{m} l_j * w_{ij}) / m)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:msub><mml:mi>o</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mi>/</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msubsup><mml:mo>âˆ‘</mml:mo><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>m</mml:mi></mml:msubsup><mml:msub><mml:mi>l</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo>*</mml:mo><mml:msub><mml:mi>w</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mi>/</mml:mi><mml:mi>m</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula></p>
  <p>where m is the number of constraints, and
  <inline-formula><alternatives>
  <tex-math><![CDATA[l_j]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>l</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  is the <inline-formula><alternatives>
  <tex-math><![CDATA[j^{th}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mi>j</mml:mi><mml:mrow><mml:mi>t</mml:mi><mml:mi>h</mml:mi></mml:mrow></mml:msup></mml:math></alternatives></inline-formula>
  Lagrangian multiplier. The greedy crossover simply takes objects from
  the two parents in non-increasing order of the ratio and constructs
  one offspring such that it satisfies all constraints.</p>
  <p>Our method, as applied to the 0/1 knapsack problem, is similar to
  the algorithm described in
  (<xref alt="Shah, 2019" rid="ref-shah2019genetic" ref-type="bibr">Shah,
  2019</xref>). We use techniques like simulated annealing
  (<xref alt="Kirkpatrick et al., 1983" rid="ref-kirkpatrick1983optimization" ref-type="bibr">Kirkpatrick
  et al., 1983</xref>) in our work to handle constraints. More details
  on constraint handling techniques is presented in
  (<xref alt="Coello, 2002" rid="ref-coello2002theoretical" ref-type="bibr">Coello,
  2002</xref>). We generate the initial population with a probability of
  0.5. More on this is given in
  (<xref alt="Hill, 1999" rid="ref-hill1999monte" ref-type="bibr">Hill,
  1999</xref>).</p>
  <p>Traditional evolutionary algorithms are more suitable for problems
  in which domain specific knowledge is not available. For problems with
  partial knowledge of the domain, a genetic algorithm, which uses this
  domain knowledge, is more likely to succeed, as the results clearly
  indicate. A good search algorithm should be global in nature with a
  heuristic introduced to give constructive direction to the algorithm.
  We introduced a new technique of greedy crossover; it forms the core
  of our genetic algorithm. As the table on the git page shows, our
  algorithm is able to solve to optimality, all of the instances in a
  short amount of time. Some problems like Weing7 are harder. Future
  work could be to run the algorithm on larger instances for which
  optimum solutions are available. Our algorithm is trivially
  parallelizable and future work could be to implement the algorithm on
  Apache Spark or Map-Reduce.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-chu1998genetic">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Chu</surname><given-names>Paul C</given-names></name>
          <name><surname>Beasley</surname><given-names>John E</given-names></name>
        </person-group>
        <article-title>A genetic algorithm for the multidimensional knapsack problem</article-title>
        <source>Journal of heuristics</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="1998">1998</year>
        <volume>4</volume>
        <issue>1</issue>
      </element-citation>
    </ref>
    <ref id="ref-shah2019genetic">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Shah</surname><given-names>Shalin</given-names></name>
        </person-group>
        <article-title>Genetic algorithm for a class of knapsack problems</article-title>
        <source>arXiv preprint arXiv:1903.03494</source>
        <year iso-8601-date="2019">2019</year>
      </element-citation>
    </ref>
    <ref id="ref-hill1999monte">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Hill</surname><given-names>Raymond R</given-names></name>
        </person-group>
        <article-title>A monte carlo study of genetic algorithm initial population generation methods</article-title>
        <source>WSCâ€™99. 1999 winter simulation conference proceedings.â€™simulation-a bridge to the futureâ€™(cat. No. 99CH37038)</source>
        <publisher-name>IEEE</publisher-name>
        <year iso-8601-date="1999">1999</year>
        <volume>1</volume>
      </element-citation>
    </ref>
    <ref id="ref-kirkpatrick1983optimization">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kirkpatrick</surname><given-names>Scott</given-names></name>
          <name><surname>Gelatt</surname><given-names>C Daniel</given-names></name>
          <name><surname>Vecchi</surname><given-names>Mario P</given-names></name>
        </person-group>
        <article-title>Optimization by simulated annealing</article-title>
        <source>science</source>
        <publisher-name>American Association for the Advancement of Science</publisher-name>
        <year iso-8601-date="1983">1983</year>
        <volume>220</volume>
        <issue>4598</issue>
      </element-citation>
    </ref>
    <ref id="ref-coello2002theoretical">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Coello</surname><given-names>Carlos A Coello</given-names></name>
        </person-group>
        <article-title>Theoretical and numerical constraint-handling techniques used with evolutionary algorithms: A survey of the state of the art</article-title>
        <source>Computer methods in applied mechanics and engineering</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2002">2002</year>
        <volume>191</volume>
        <issue>11-12</issue>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

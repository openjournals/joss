<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3311</article-id>
<article-id pub-id-type="doi">10.21105/joss.03311</article-id>
<title-group>
<article-title>Collaborative Container Modules with Singularity Registry
HPC</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4387-3819</contrib-id>
<string-name>Vanessa Sochat</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6255-1308</contrib-id>
<string-name>Alec Scott</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Lawrence Livermore National Lab, Livermore, CA,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>University of Arizona Research Computing, Tuscon, AZ,
USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-04-17">
<day>17</day>
<month>4</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>63</issue>
<fpage>3311</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>containers</kwd>
<kwd>singularity</kwd>
<kwd>linux</kwd>
<kwd>registry</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Portability and reproducibility of complex software stacks is
  essential for researchers to perform their work. High Performance
  Computing (HPC) environments add another level of complexity, where
  possibly conflicting dependencies must co-exist. Although container
  technologies like Singularity
  (<xref alt="Kurtzer et al., 2017" rid="ref-Kurtzer2017-xj" ref-type="bibr">Kurtzer
  et al., 2017</xref>) make it possible to “bring your own environment,”
  without any form of central strategy to manage containers, researchers
  who seek reproducibility via using containers are tasked with managing
  their own container collection, often not taking care to ensure that a
  particular digest or version is used. The reproducibility of the work
  is at risk, as they cannot easily install and use containers, nor can
  they share their software with others.</p>
  <p>Singularity Registry HPC (shpc) is the first of its kind to provide
  an easy means for a researcher to add their research software for
  sharing and collaboration with other researchers to an existing
  collection of over 200 popular scientific libraries Gorgolewski et al.
  (<xref alt="2017" rid="ref-gorgolewski2017bids" ref-type="bibr">2017</xref>).
  The software installs containers as environment modules
  (<xref alt="McLay et al., 2011" rid="ref-McLay2011-wu" ref-type="bibr">McLay
  et al., 2011</xref>) that are easy to use and read documentation for,
  and exposes aliases for commands in the container that the researcher
  can add to their pipeline without thinking about complex interactions
  with a container. The simple addition of an entry to the registry
  maintained by shpc comes down to adding a yaml file, and after doing
  this, another researcher can easily install the same software, down to
  the digest, to reproduce the original work.</p>
  <sec id="statement-of-need">
    <title>Statement of Need</title>
    <p>Using environment modules
    (<xref alt="McLay et al., 2011" rid="ref-McLay2011-wu" ref-type="bibr">McLay
    et al., 2011</xref>) on HPC clusters is common. Although writing the
    recipes can be complex, it’s a fairly common practice for cluster
    administrators to provide a set of natively installed recipes for
    their users
    (<xref alt="An Introduction to Writing Modulefiles — Lmod 8.4.30 Documentation, 2021" rid="ref-noauthor_undated-bt" ref-type="bibr"><italic>An
    Introduction to Writing Modulefiles — Lmod 8.4.30
    Documentation</italic>, 2021</xref>), or for researchers to develop
    and deploy their own software via containers. Even well-known
    package managers like Spack
    (<xref alt="Spack Modules, 2015" rid="ref-noauthor_undated-ae" ref-type="bibr"><italic>Spack
    Modules</italic>, 2015</xref>) and EasyBuild
    (<xref alt="EasyBuild Modules, 2021" rid="ref-noauthor_undated-dj" ref-type="bibr"><italic>EasyBuild
    Modules</italic>, 2021</xref>) expose software as modules. However,
    these package manager approaches don’t always ensure
    reproducibility, or ease of development for the researcher. They
    typically require relying on some subset of system software, the
    underlying operating system, or even making changes to the system,
    which is not under the researcher’s control. Although using
    containers in this context has been discussed previously
    (<xref alt="Community Collections, 2020" rid="ref-noauthor_undated-rj" ref-type="bibr"><italic>Community
    Collections</italic>, 2020</xref>;
    <xref alt="Software Containers, 2021" rid="ref-noauthor_undated-rc" ref-type="bibr"><italic>Software
    Containers</italic>, 2021</xref>), the majority of these approaches
    and tools do not make the process of developing and installing
    container modules easy. The single researcher must either convince a
    cluster administrator to install dependencies needed for their
    software, or build a container and manually move and interact with
    it on the cluster. All of these small challenges come together to
    make it harder for a researcher to develop and manage their own
    software, and subsequently to share their approach to reproduce the
    work. Using Singularity, Podman, or other container technologies
    installed via Singularity Registry HPC offers a solution to this
    challenge. The only requirement is the container technology
    software, and writing a simple configuration file for the registry.
    By clearly defining commands, and pinning exact versions of
    scientific software, researchers on high performance computing
    clusters can have more confidence in the reproducibility of their
    work
    (<xref alt="Boettiger, 2014" rid="ref-Boettiger2014-cz" ref-type="bibr">Boettiger,
    2014</xref>;
    <xref alt="Santana-Perez &amp; Pérez-Hernández, 2015" rid="ref-Santana-Perez2015-wo" ref-type="bibr">Santana-Perez
    &amp; Pérez-Hernández, 2015</xref>;
    <xref alt="Wandell et al., 2015" rid="ref-Wandell2015-yt" ref-type="bibr">Wandell
    et al., 2015</xref>).</p>
  </sec>
  <sec id="usage">
    <title>Usage</title>
    <p>Installing shpc is as easy as cloning the repository and
    installing in place:</p>
    <code language="bash">$ git clone https://github.com/singularityhub/singularity-hpc
$ cd singularity-hpc
$ pip install -e .</code>
    <p>While the defaults are suitable for most, the researcher can
    customize the location of registry metadata files, the module
    directory to which modules are installed, and the directory to which
    containers are installed. The user can then use
    <monospace>shpc show</monospace> to see readily available recipes,
    or browse the
    <ext-link ext-link-type="uri" xlink:href="https://singularityhub.github.io/singularity-hpc/">library</ext-link>
    for an easily searchable interface. Installation comes down to
    installing a chosen module, loading it, and using it:</p>
    <code language="bash">$ shpc install biocontainers/samtools
$ module load biocontainers/samtools
$ samtools</code>
    <p>The samtools command would be an alias for a much more
    complicated command that the researcher would not need to remember,
    including global options, command options, the full path to the
    container, and the path to the executable inside the container. The
    container pulled would also be a specific digest, making it easier
    to reproduce the researcher’s workflow. Finally, although containers
    typically only provide one entrypoint, there is no limit to the
    number of aliases that can be exposed for easy usage.</p>
  </sec>
  <sec id="collaborative-registry-for-reproducible-science">
    <title>Collaborative Registry for Reproducible Science</title>
    <p>Creating a registry entry for a scientific container comes down
    to writing a simple <monospace>container.yaml</monospace> file with
    basic metadata and description, the definition of any and all
    important entrypoints, and the digests to pull. As soon as a
    researcher puts their container in an online registry and adds the
    entry, new versions of the container are automatically discovered by
    shpc, and can be installed by the researcher when they choose. The
    user does not need to look in advance for a version if they want the
    latest provided by the registry. Software is easy to search for, and
    with a simple command, the user can quickly see complete
    documentation and commands available:</p>
    <code language="bash">$ module spider samtools</code>
    <p>Every module includes a help section with a description, a
    complete list of commands that map to interactions with the
    container, and a list of environment variables also available. The
    module system also provides command line completion, so the user can
    use tabs to autocomplete the module names. Along with the expected
    commands to use the container primary software (e.g., samtools)
    commands to shell, the software automatically generates alias to
    inspect, run, shell, or inspect container metadata. E.g., here is
    the shell command:</p>
    <code language="bash">$ samtools-shell</code>
    <p>Another compelling example is using a notebook provided by
    Jupyter Stacks
    (<xref alt="Cook, 2017" rid="ref-cook2017opinionated" ref-type="bibr">Cook,
    2017</xref>). Running notebooks that can be exposed via networking
    ports tends to be very complicated. A full interaction might look
    like the following:</p>
    <code language="bash"># pull the latest container, a moving target
$ singularity pull docker://jupyter/minimal-notebook

$ singularity exec --home ${HOME} --bind ${HOME}/.local:/home/joyvan/.local \
   minimal-notebook_latest.sif \
   jupyter notebook --no-browser --port=12345 --ip 0.0.0.0</code>
    <p>With Singularity Registry HPC, the interaction to run the
    notebook can be figured out and written down once, and provided as a
    community recipe. In this case, it’s exposed as the command
    “run-notebook”:</p>
    <code language="bash">$ run-notebook</code>
    <p>which automatically selects a random port, binds the expected
    directories, and starts the notebook. The registry recipes are
    collaborative in nature because anyone can open a pull request with
    a new recipe, or request a container be added by opening an issue.
    Automation also ensures that adding and testing new containers, or
    working on the code base is easy. Once a container is added, no
    further work is needed to update versions for it. By way of a GitHub
    bot
    (<xref alt="Scott, 2021" rid="ref-noauthor_undated-eh" ref-type="bibr">Scott,
    2021</xref>), both the latest version and newly available tags are
    updated automatically, following any filters that the recipe creator
    has provided for which tags should be added. Finally, on merge to
    the main branch, the documentation and library are also
    automatically updated.</p>
  </sec>
  <sec id="conclusion">
    <title>Conclusion</title>
    <p>Singularity Registry HPC is the first local container registry
    that supports reproducibility, easy of use, and portability of
    research software. You can read more about it on the GitHub
    repository (https://github.com/singularityhub/singularity-hpc) or
    the main documentation site
    (https://singularity-hpc.readthedocs.io).</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Kurtzer2017-xj">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kurtzer</surname><given-names>Gregory M</given-names></name>
          <name><surname>Sochat</surname><given-names>Vanessa</given-names></name>
          <name><surname>Bauer</surname><given-names>Michael W</given-names></name>
        </person-group>
        <article-title>Singularity: Scientific containers for mobility of compute</article-title>
        <source>PLoS One</source>
        <publisher-name>Public Library of Science</publisher-name>
        <year iso-8601-date="2017-05">2017</year><month>05</month>
        <volume>12</volume>
        <issue>5</issue>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0177459</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-McLay2011-wu">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>McLay</surname><given-names>Robert</given-names></name>
          <name><surname>Schulz</surname><given-names>Karl W</given-names></name>
          <name><surname>Barth</surname><given-names>William L</given-names></name>
          <name><surname>Minyard</surname><given-names>Tommy</given-names></name>
        </person-group>
        <article-title>Best practices for the deployment and management of production HPC clusters</article-title>
        <source>State of the practice reports</source>
        <publisher-name>Association for Computing Machinery</publisher-name>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <year iso-8601-date="2011-11">2011</year><month>11</month>
        <pub-id pub-id-type="doi">10.1145/2063348.2063360</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-autamus">
      <element-citation>
        <article-title>The Autamus registry</article-title>
        <publisher-name>https://github.com/orgs/autamus/packages</publisher-name>
        <year iso-8601-date="2021">2021</year>
      </element-citation>
    </ref>
    <ref id="ref-gamblin2015spack">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Gamblin</surname><given-names>Todd</given-names></name>
          <name><surname>LeGendre</surname><given-names>Matthew</given-names></name>
          <name><surname>Collette</surname><given-names>Michael R</given-names></name>
          <name><surname>Lee</surname><given-names>Gregory L</given-names></name>
          <name><surname>Moody</surname><given-names>Adam</given-names></name>
          <name><surname>Supinski</surname><given-names>Bronis R de</given-names></name>
          <name><surname>Futral</surname><given-names>Scott</given-names></name>
        </person-group>
        <article-title>The Spack package manager: Bringing order to HPC software chaos</article-title>
        <source>SC’15: Proceedings of the international conference for high performance computing, networking, storage and analysis</source>
        <publisher-name>IEEE</publisher-name>
        <year iso-8601-date="2015">2015</year>
      </element-citation>
    </ref>
    <ref id="ref-noauthor_undated-ae">
      <element-citation>
        <article-title>Spack modules</article-title>
        <publisher-name>https://spack.readthedocs.io/en/latest/module_file_support.html</publisher-name>
        <year iso-8601-date="2015">2015</year>
      </element-citation>
    </ref>
    <ref id="ref-noauthor_undated-bt">
      <element-citation>
        <article-title>An introduction to writing modulefiles — Lmod 8.4.30 documentation</article-title>
        <publisher-name>https://lmod.readthedocs.io/en/latest/015_writing_modules.html</publisher-name>
        <year iso-8601-date="2021">2021</year>
      </element-citation>
    </ref>
    <ref id="ref-noauthor_undated-eh">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Scott</surname><given-names>Alec</given-names></name>
        </person-group>
        <article-title>binoc</article-title>
        <publisher-name>GitHub; https://github.com/autamus/binoc</publisher-name>
        <year iso-8601-date="2021">2021</year>
      </element-citation>
    </ref>
    <ref id="ref-noauthor_undated-dj">
      <element-citation>
        <article-title>EasyBuild modules</article-title>
        <publisher-name>https://wiki.fysik.dtu.dk/niflheim/EasyBuild_modules</publisher-name>
        <year iso-8601-date="2021">2021</year>
      </element-citation>
    </ref>
    <ref id="ref-noauthor_undated-rc">
      <element-citation>
        <article-title>Software containers</article-title>
        <publisher-name>https://www.rc.virginia.edu/userinfo/rivanna/software/containers/</publisher-name>
        <year iso-8601-date="2021">2021</year>
      </element-citation>
    </ref>
    <ref id="ref-noauthor_undated-rj">
      <element-citation>
        <article-title>Community collections</article-title>
        <publisher-name>https://community-collections.github.io/</publisher-name>
        <year iso-8601-date="2020">2020</year>
      </element-citation>
    </ref>
    <ref id="ref-cook2017opinionated">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Cook</surname><given-names>Joshua</given-names></name>
        </person-group>
        <article-title>The opinionated Jupyter stacks</article-title>
        <source>Docker for Data Science</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <pub-id pub-id-type="doi">10.1007/978-1-4842-3012-1_7</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-gorgolewski2017bids">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gorgolewski</surname><given-names>Krzysztof J</given-names></name>
          <name><surname>Alfaro-Almagro</surname><given-names>Fidel</given-names></name>
          <name><surname>Auer</surname><given-names>Tibor</given-names></name>
          <name><surname>Bellec</surname><given-names>Pierre</given-names></name>
          <name><surname>Capotă</surname><given-names>Mihai</given-names></name>
          <name><surname>Chakravarty</surname><given-names>M Mallar</given-names></name>
          <name><surname>Churchill</surname><given-names>Nathan W</given-names></name>
          <name><surname>Cohen</surname><given-names>Alexander Li</given-names></name>
          <name><surname>Craddock</surname><given-names>R Cameron</given-names></name>
          <name><surname>Devenyi</surname><given-names>Gabriel A</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>BIDS apps: Improving ease of use, accessibility, and reproducibility of neuroimaging data analysis methods</article-title>
        <source>PLoS computational biology</source>
        <publisher-name>Public Library of Science</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>13</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005209</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-da2017biocontainers">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Veiga Leprevost</surname><given-names>Felipe da</given-names></name>
          <name><surname>Grüning</surname><given-names>Björn A</given-names></name>
          <name><surname>Alves Aflitos</surname><given-names>Saulo</given-names></name>
          <name><surname>Röst</surname><given-names>Hannes L</given-names></name>
          <name><surname>Uszkoreit</surname><given-names>Julian</given-names></name>
          <name><surname>Barsnes</surname><given-names>Harald</given-names></name>
          <name><surname>Vaudel</surname><given-names>Marc</given-names></name>
          <name><surname>Moreno</surname><given-names>Pablo</given-names></name>
          <name><surname>Gatto</surname><given-names>Laurent</given-names></name>
          <name><surname>Weber</surname><given-names>Jonas</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>BioContainers: An open-source and community-driven framework for software standardization</article-title>
        <source>Bioinformatics</source>
        <publisher-name>Oxford University Press</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>33</volume>
        <issue>16</issue>
      </element-citation>
    </ref>
    <ref id="ref-noauthor_undated-kp">
      <element-citation>
        <article-title>NVIDIA NGC</article-title>
        <publisher-name>https://ngc.nvidia.com/catalog</publisher-name>
        <year iso-8601-date="2018">2018</year>
      </element-citation>
    </ref>
    <ref id="ref-Boettiger2014-cz">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Boettiger</surname><given-names>Carl</given-names></name>
        </person-group>
        <article-title>An introduction to Docker for reproducible research, with examples from the R environment</article-title>
        <year iso-8601-date="2014-10">2014</year><month>10</month>
        <uri>https://arxiv.org/abs/1410.0846</uri>
        <pub-id pub-id-type="doi">10.1145/2723872.2723882</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Santana-Perez2015-wo">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Santana-Perez</surname><given-names>Idafen</given-names></name>
          <name><surname>Pérez-Hernández</surname><given-names>Marı́a S</given-names></name>
        </person-group>
        <article-title>Towards reproducibility in scientific workflows: An infrastructure-based approach</article-title>
        <source>Sci. Program.</source>
        <publisher-name>Hindawi Publishing Corporation</publisher-name>
        <year iso-8601-date="2015-02">2015</year><month>02</month>
        <volume>2015</volume>
        <pub-id pub-id-type="doi">10.1155/2015/243180</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Wandell2015-yt">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wandell</surname><given-names>B A</given-names></name>
          <name><surname>Rokem</surname><given-names>A</given-names></name>
          <name><surname>Perry</surname><given-names>L M</given-names></name>
          <name><surname>Schaefer</surname><given-names>G</given-names></name>
          <name><surname>Dougherty</surname><given-names>R F</given-names></name>
        </person-group>
        <article-title>Data management to support reproducible research</article-title>
        <year iso-8601-date="2015-02">2015</year><month>02</month>
        <uri>https://arxiv.org/abs/1502.06900</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

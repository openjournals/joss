<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">372</article-id>
<article-id pub-id-type="doi">10.21105/joss.00372</article-id>
<title-group>
<article-title>Go-HEP: libraries for High Energy Physics analyses in
Go</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4913-6104</contrib-id>
<string-name>Sebastien Binet</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6658-6807</contrib-id>
<string-name>Bastian Wieck</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-8452-516X</contrib-id>
<string-name>David Blyth</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-2174-8512</contrib-id>
<string-name>Emmanuel Busato</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3814-454X</contrib-id>
<string-name>Michaël Ughetto</string-name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<string-name>Peter Waller</string-name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>IN2P3</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Argonne National Laboratory</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Georgia Southern University</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Stockholm University</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>University of Liverpool</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2017-09-06">
<day>6</day>
<month>9</month>
<year>2017</year>
</pub-date>
<volume>2</volume>
<issue>17</issue>
<fpage>372</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>ROOT</kwd>
<kwd>CERN</kwd>
<kwd>Gonum</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Go-HEP provides tools to interface with CERN’s ROOT
  (<xref alt="Brun &amp; Rademakers, 1997" rid="ref-ROOT" ref-type="bibr">Brun
  &amp; Rademakers, 1997</xref>) software framework and carry analyses
  or data acquisition from within the Go
  (<xref alt="Authors, n.d." rid="ref-Go" ref-type="bibr">Authors,
  n.d.</xref>) programming language.</p>
  <p>Go-HEP exposes libraries to read and write common High Energy
  Physics (HEP) file formats (HepMC
  (<xref alt="Dobbs &amp; Hansen, 2000" rid="ref-HepMC" ref-type="bibr">Dobbs
  &amp; Hansen, 2000</xref>), LHEF
  (<xref alt="Alwall et al., 2007" rid="ref-LHEF" ref-type="bibr">Alwall
  et al., 2007</xref>), SLHA
  (<xref alt="Skands et al., 2004" rid="ref-SLHA" ref-type="bibr">Skands
  et al., 2004</xref>)) but, at the moment, only read interoperability
  is achieved with ROOT file format. Go-HEP also provides tools to carry
  statistical analyses in the form of 1-dim and 2-dim histograms, 1-dim
  and 2-dim scatters and n-tuples. Go-HEP can also graphically represent
  these results, leveraging the Gonum
  (<xref alt="T. G. authors, n.d." rid="ref-Gonum" ref-type="bibr">T. G.
  authors, n.d.</xref>) plotting library.</p>
</sec>
<sec id="motivations">
  <title>Motivations</title>
  <p>Writing analyses in HEP involves many steps and one needs a few
  tools to successfully carry out such an endeavour. But - at minima -
  one needs to be able to read (and possibly write) ROOT files to be
  able to interoperate with the rest of the HEP community or to insert
  one’s work into an already existing analysis pipeline.</p>
  <p>Go-HEP provides this necessary interoperability layer, in the Go
  programming language. This allows physicists to leverage the great
  concurrency primitives of Go, together with the surrounding tooling
  and software engineering ecosystem of Go, to implement physics
  analyses.</p>
  <sec id="packages">
    <title>Packages</title>
    <p>In this section, we list the packages that Go-HEP provides
    together with a short description.</p>
    <sec id="go-heprootio">
      <title><monospace>go-hep/rootio</monospace></title>
      <p><monospace>go-hep/rootio</monospace> provides read access to
      data stored in ROOT files. <monospace>rootio</monospace> is a
      pure-Go implementation of the ROOT file format, reimplementing
      from scratch the decoding and interpretation of ROOT’s low-level
      file blocks (<monospace>TDirectory</monospace>,
      <monospace>TKey</monospace>, <monospace>TBuffer</monospace> and
      <monospace>TFile</monospace>) together with file metadata, such as
      <monospace>TStreamerInfo</monospace> and
      <monospace>TStreamerElement</monospace> that allow to serialize
      and deserialize C++ class’ instances. 1- and 2-dimensional
      histograms (<monospace>TH1x</monospace> and
      <monospace>TH2x</monospace>) can be extracted from ROOT files
      using <monospace>rootio</monospace>, as well as n-tuple data
      (<monospace>TTree</monospace>). Go-HEP can also convert ROOT
      histograms into YODA’s
      (<xref alt="T. Y. authors, n.d." rid="ref-YODA" ref-type="bibr">T.
      Y. authors, n.d.</xref>) or Go-HEP’s native format.</p>
      <p><monospace>go-hep/rootio</monospace> is the gateway to the
      wealth of data generated, simulated and acquired by LHC
      experiments.</p>
      <p>Right now, <monospace>go-hep/rootio</monospace> can only read
      ROOT data. Work is in progress to also create ROOT-compatible data
      files.</p>
    </sec>
    <sec id="go-hepfmom">
      <title><monospace>go-hep/fmom</monospace></title>
      <p>The <monospace>go-hep/fmom</monospace> package provides
      different representations of Lorentz vectors (4-components vectors
      that represent the momentum and energy of particles.)
      <monospace>go-hep/fmom</monospace> currently implements the
      <monospace>(px,py,pz,e)</monospace>,
      <monospace>(e,eta,phi,m)</monospace>,
      <monospace>(inv-pt, cot-theta, phi, m)</monospace> and
      <monospace>(pt, eta, phi, m)</monospace> Lorentz vector
      representations and operations that apply on these 4-vectors.</p>
    </sec>
    <sec id="go-hephbook-and-go-hephbookntup">
      <title><monospace>go-hep/hbook</monospace> and
      <monospace>go-hep/hbook/ntup</monospace></title>
      <p><monospace>go-hep/hbook</monospace> provides 1- and
      2-dimensional histograms, 1-dim profiles and 2-dim scatters, for
      the statistical representation of variables. Notably, histograms
      allow to retrieve the mean, standard deviation, standard error and
      the sum of weights of a given variable.</p>
      <p><monospace>go-hep/hbook/ntup</monospace> provides a way to
      create, open and iterate over n-tuple data: rows of records.
      <monospace>ntup</monospace> can be seen as a database of HEP event
      data. Indeed, <monospace>ntup</monospace> is built on Go’s
      <monospace>database/sql</monospace> package that allows to
      interact with various databases via plugins
      (<monospace>SQLite</monospace>, <monospace>MySQL</monospace>, …)
      <monospace>go-hep/hbook/ntup/ntupcsv</monospace> is a convenience
      package that allows to load a <monospace>CSV</monospace> file in
      memory and work on it as a database.</p>
    </sec>
    <sec id="go-hephepmc-go-hephepevt-go-hepheppdt-go-heplhef-and-go-hepslha">
      <title><monospace>go-hep/hepmc</monospace>,
      <monospace>go-hep/hepevt</monospace>,
      <monospace>go-hep/heppdt</monospace>,
      <monospace>go-hep/lhef</monospace> and
      <monospace>go-hep/slha</monospace></title>
      <p><monospace>go-hep/hepmc</monospace> and
      <monospace>go-hep/hepevt</monospace> are packages used to
      represent HEP event interactions: they carry informations about a
      fundamental event interaction (incoming partons) and the decay
      chains, down to the hadronization and stable final particles.
      <monospace>hepevt</monospace> is the implementation of the old
      <monospace>FORTRAN</monospace> standard, while
      <monospace>hepmc</monospace> is the new <monospace>C++</monospace>
      representation. <monospace>hepmc</monospace> files are usually the
      result of a Monte-Carlo generator where the simulation of physics
      processes (branching ratios, hadronization, …) has been
      implemented. Go-HEP doesn’t currently provide Monte-Carlo
      generators.</p>
      <p><monospace>heppdt</monospace> provides access to the HEP
      particle data table: a catalog of informations (mass, width, …)
      about all particles of the Standard Model (and beyond the Standard
      Model.)</p>
      <p><monospace>lhef</monospace>
      (<xref alt="Alwall et al., 2007" rid="ref-LHEF" ref-type="bibr">Alwall
      et al., 2007</xref>) and <monospace>slha</monospace>
      (<xref alt="Skands et al., 2004" rid="ref-SLHA" ref-type="bibr">Skands
      et al., 2004</xref>) are exchange format files for Monte-Carlo
      generators.</p>
    </sec>
    <sec id="go-hepfwk">
      <title><monospace>go-hep/fwk</monospace></title>
      <p><monospace>fwk</monospace> is a pure-Go, concurrent
      implementation of a typical HEP control framework. Control
      frameworks are used in HEP to collect the acquired data from
      <italic>e.g.</italic> the LHC experiments and channel it through
      the various reconstruction algorithms. Control frameworks are the
      angular stone of HEP experiments, allowing to organize and
      schedule the algorithms that identify and reconstruct electrons,
      muons, etc.. from electronic signals coming from the
      detectors.</p>
      <p><monospace>go-hep/fwk</monospace> leverages the concurrency
      primitives of Go to provide an easy to use toolkit, ready to
      harness the power of multicore machines.
      <monospace>go-hep/fwk</monospace> parallelizes work at the event
      level, allowing to work on multiple events at a time.
      <monospace>go-hep/fwk</monospace> also parallelizes work at the
      sub-event level, scheduling in parallel algorithms that don’t need
      inputs from each other. <monospace>go-hep/fwk</monospace> doesn’t
      provide extra tools to perform parallel work at the sub-algorithm
      level, leaving the algorithms’ implementors with all the tools
      from the Go language (<italic>e.g.</italic>
      <monospace>channels</monospace>, <monospace>goroutines</monospace>
      and <monospace>sync.Wait</monospace> or
      <monospace>golang.org/x/sync/errgroup</monospace>.)</p>
    </sec>
    <sec id="go-hepfads">
      <title><monospace>go-hep/fads</monospace></title>
      <p><monospace>fads</monospace> is a Fast Detector Simulation
      toolkit. It uses <monospace>fwk</monospace> to provide a
      concurrency-friendly toolkit that performs so-called
      fast-simulation of detectors, with components for:</p>
      <list list-type="bullet">
        <list-item>
          <p>particles’ isolation</p>
        </list-item>
        <list-item>
          <p>b-tagging, tau-tagging</p>
        </list-item>
        <list-item>
          <p>calorimetry simulation</p>
        </list-item>
        <list-item>
          <p>energy scaling and energy smearing</p>
        </list-item>
        <list-item>
          <p>momentum smearing</p>
        </list-item>
        <list-item>
          <p>particles propagation in a magnetic field</p>
        </list-item>
        <list-item>
          <p>jets finding (using
          <monospace>go-hep/fastjet</monospace>)</p>
        </list-item>
      </list>
      <p><monospace>go-hep/fads</monospace> is a pure-Go
      reimplementation of a <monospace>C++</monospace> program called
      Delphes
      (<xref alt="Favereau et al., 2014" rid="ref-Delphes" ref-type="bibr">Favereau
      et al., 2014</xref>). <monospace>go-hep/fastjet</monospace> is a
      pure-Go reimplementation of a <monospace>C++</monospace> library
      called FastJet
      (<xref alt="Cacciari et al., 2012" rid="ref-FastJet" ref-type="bibr">Cacciari
      et al., 2012</xref>).</p>
    </sec>
    <sec id="go-heplcio-go-hepsio-and-go-heprio">
      <title><monospace>go-hep/lcio</monospace>,
      <monospace>go-hep/sio</monospace> and
      <monospace>go-hep/rio</monospace></title>
      <p><monospace>lcio</monospace> implements read/write access to the
      binary file format developed for the Linear Collider community. It
      is a pure-Go reimplementation of a C++ library of the same name
      (<xref alt="T. L. authors, n.d." rid="ref-LCIO" ref-type="bibr">T.
      L. authors, n.d.</xref>). <monospace>sio</monospace> is the
      low-level access to this binary file format,
      <monospace>lcio</monospace> implements the event data model that
      has been used by the LC community.</p>
      <p><monospace>go-hep/rio</monospace> is a fork of
      <monospace>lcio</monospace> to provide 64b indexing and thus
      support &gt;4Gb files.</p>
    </sec>
    <sec id="go-hephplot">
      <title><monospace>go-hep/hplot</monospace></title>
      <p><monospace>hplot</monospace> is a package providing building
      blocks for creating plots. It leverages the Gonum
      (<xref alt="T. G. authors, n.d." rid="ref-Gonum" ref-type="bibr">T.
      G. authors, n.d.</xref>) plotting package to create HEP oriented
      plots, using <monospace>go-hep/hbook</monospace> data as input.
      <monospace>hplot</monospace> can generate publication quality
      plots in PNG, SVG, PDF or EPS formats.
      <monospace>hplot</monospace> also provides a work-in-progress
      interactive shell with an OpenGL backend (on Linux or macOS;
      Windows will use the <monospace>win32</monospace> API) to display
      plots.</p>
    </sec>
  </sec>
  <sec id="commands">
    <title>Commands</title>
    <p>Go-HEP also provides a few commands that use Go-HEP packages.</p>
    <sec id="cmdroot2npy">
      <title><monospace>cmd/root2npy</monospace></title>
      <p>The command <monospace>root2npy</monospace> uses the
      <monospace>go-hep/rootio</monospace> package to convert n-tuple
      data stored in ROOT files into NumPy
      (<xref alt="Kern, n.d." rid="ref-NPyFormat" ref-type="bibr">Kern,
      n.d.</xref>) array data files. This command does not need any ROOT
      installation nor any NumPy installation: everything has been
      implemented in pure-Go from first principles. This is useful to
      quickly convert data and interoperate with analyses’ pipelines
      that are mostly python based.</p>
    </sec>
    <sec id="cmdroot2yoda">
      <title><monospace>cmd/root2yoda</monospace></title>
      <p>The <monospace>root2yoda</monospace> command converts ROOT
      files containing histogram values into their YODA equivalent,
      saved in a YODA ASCII file.</p>
    </sec>
    <sec id="go-heprootiocmdroot-ls-and-root-srv">
      <title><monospace>go-hep/rootio/cmd/root-ls</monospace> and
      <monospace>root-srv</monospace></title>
      <p>The <monospace>root-ls</monospace> command allows to quickly
      inspect and display the content of a ROOT file from the shell.</p>
      <p>The <monospace>root-srv</monospace> command launches a local
      web server that can be used to inspect graphically ROOT files,
      displaying histograms and n-tuple data.</p>
    </sec>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-ROOT">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Brun</surname><given-names>R.</given-names></name>
          <name><surname>Rademakers</surname><given-names>F.</given-names></name>
        </person-group>
        <article-title>ROOT: An object oriented data analysis framework</article-title>
        <source>Nucl. Instrum. Meth.</source>
        <year iso-8601-date="1997">1997</year>
        <volume>A389</volume>
        <pub-id pub-id-type="doi">10.1016/S0168-9002(97)00048-X</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-LHEF">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Alwall</surname><given-names>J.</given-names></name>
          <name><surname>Ballestrero</surname><given-names>A.</given-names></name>
          <name><surname>Bartalini</surname><given-names>P.</given-names></name>
          <name><surname>Belov</surname><given-names>S.</given-names></name>
          <name><surname>Boos</surname><given-names>E.</given-names></name>
          <name><surname>Buckley</surname><given-names>A.</given-names></name>
          <name><surname>Butterworth</surname><given-names>J. M.</given-names></name>
          <name><surname>Dudko</surname><given-names>L.</given-names></name>
          <name><surname>Frixione</surname><given-names>S.</given-names></name>
          <name><surname>Garren</surname><given-names>L.</given-names></name>
          <name><surname>Gieseke</surname><given-names>S.</given-names></name>
          <name><surname>Gusev</surname><given-names>A.</given-names></name>
          <name><surname>Hinchliffe</surname><given-names>I.</given-names></name>
          <name><surname>Huston</surname><given-names>J.</given-names></name>
          <name><surname>Kersevan</surname><given-names>B.</given-names></name>
          <name><surname>Krauss</surname><given-names>F.</given-names></name>
          <name><surname>Lavesson</surname><given-names>N.</given-names></name>
          <name><surname>Lönnblad</surname><given-names>L.</given-names></name>
          <name><surname>Maina</surname><given-names>E.</given-names></name>
          <name><surname>Maltoni</surname><given-names>F.</given-names></name>
          <name><surname>Mangano</surname><given-names>M. L.</given-names></name>
          <name><surname>Moortgat</surname><given-names>F.</given-names></name>
          <name><surname>Mrenna</surname><given-names>S.</given-names></name>
          <name><surname>Papadopoulos</surname><given-names>C. G.</given-names></name>
          <name><surname>Pittau</surname><given-names>R.</given-names></name>
          <name><surname>Richardson</surname><given-names>P.</given-names></name>
          <name><surname>Seymour</surname><given-names>M. H.</given-names></name>
          <name><surname>Sherstnev</surname><given-names>A.</given-names></name>
          <name><surname>Sjöstrand</surname><given-names>T.</given-names></name>
          <name><surname>Skands</surname><given-names>P.</given-names></name>
          <name><surname>Slabospitsky</surname><given-names>S. R.</given-names></name>
          <name><surname>Wcas</surname><given-names>Z.</given-names></name>
          <name><surname>Webber</surname><given-names>B. R.</given-names></name>
          <name><surname>Worek</surname><given-names>M.</given-names></name>
          <name><surname>Zeppenfeld</surname><given-names>D.</given-names></name>
        </person-group>
        <article-title>A standard format for les houches event files</article-title>
        <source>Computer Physics Communications</source>
        <year iso-8601-date="2007">2007</year>
        <volume>176</volume>
        <pub-id pub-id-type="doi">10.1016/j.cpc.2006.11.010</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-SLHA">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Skands</surname><given-names>Peter Z.</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>SUSY Les Houches accord: Interfacing SUSY spectrum calculators, decay packages, and event generators</article-title>
        <source>JHEP</source>
        <year iso-8601-date="2004">2004</year>
        <volume>07</volume>
        <pub-id pub-id-type="doi">10.1088/1126-6708/2004/07/036</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-HepMC">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Dobbs</surname><given-names>M</given-names></name>
          <name><surname>Hansen</surname><given-names>J B</given-names></name>
        </person-group>
        <article-title>The HepMC C++ Monte Carlo Event Record for High Energy Physics</article-title>
        <publisher-name>CERN</publisher-name>
        <year iso-8601-date="2000-06">2000</year><month>06</month>
        <issue>ATL-SOFT-2000-001</issue>
        <uri>http://cds.cern.ch/record/684090</uri>
      </element-citation>
    </ref>
    <ref id="ref-Gonum">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>authors</surname><given-names>The Gonum</given-names></name>
        </person-group>
        <article-title>Gonum: Consistent, composable and comprehensible scientific code</article-title>
        <uri>https://gonum.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-YODA">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>authors</surname><given-names>The YODA</given-names></name>
        </person-group>
        <article-title>YODA: Yet more objects for data analysis</article-title>
        <uri>https://yoda.hepforge.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-Delphes">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Favereau</surname><given-names>J. de</given-names></name>
          <name><surname>Delaere</surname><given-names>C.</given-names></name>
          <name><surname>Demin</surname><given-names>P.</given-names></name>
          <name><surname>Giammanco</surname><given-names>A.</given-names></name>
          <name><surname>Lemaître</surname><given-names>V.</given-names></name>
          <name><surname>Mertens</surname><given-names>A.</given-names></name>
          <name><surname>Selvaggi</surname><given-names>M.</given-names></name>
        </person-group>
        <article-title>DELPHES 3, A modular framework for fast simulation of a generic collider experiment</article-title>
        <source>JHEP</source>
        <year iso-8601-date="2014">2014</year>
        <volume>02</volume>
        <uri>https://arxiv.org/abs/1307.6346</uri>
        <pub-id pub-id-type="doi">10.1007/JHEP02(2014)057</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-FastJet">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Cacciari</surname><given-names>Matteo</given-names></name>
          <name><surname>Salam</surname><given-names>Gavin P.</given-names></name>
          <name><surname>Soyez</surname><given-names>Gregory</given-names></name>
        </person-group>
        <article-title>FastJet User Manual</article-title>
        <source>Eur. Phys. J.</source>
        <year iso-8601-date="2012">2012</year>
        <volume>C72</volume>
        <uri>https://arxiv.org/abs/1111.6097</uri>
        <pub-id pub-id-type="doi">10.1140/epjc/s10052-012-1896-2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-LCIO">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>authors</surname><given-names>The LCIO</given-names></name>
        </person-group>
        <article-title>Linear collider i/o</article-title>
        <uri>https://github.com/iLCSoft/LCIO</uri>
      </element-citation>
    </ref>
    <ref id="ref-NPyFormat">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kern</surname><given-names>Robert</given-names></name>
        </person-group>
        <article-title>A simple file format for NumPy arrays</article-title>
        <uri>https://docs.scipy.org/doc/numpy/neps/npy-format.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-Go">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Authors</surname><given-names>The Go</given-names></name>
        </person-group>
        <article-title>The go programming language</article-title>
        <uri>https://golang.org</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

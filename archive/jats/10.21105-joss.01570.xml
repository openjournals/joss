<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1570</article-id>
<article-id pub-id-type="doi">10.21105/joss.01570</article-id>
<title-group>
<article-title>phasespace: n-body phase space generation in
Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-8868-2947</contrib-id>
<string-name>Albert Puig Navarro</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7312-3699</contrib-id>
<string-name>Jonas Eschle</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Physik-Institut, Universität Zürich, Zürich
(Switzerland)</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-06-03">
<day>3</day>
<month>6</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>42</issue>
<fpage>1570</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>high energy physics</kwd>
<kwd>tensorflow</kwd>
<kwd>relativistic kinematics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Simulated particle decays are common in experimental particle
  physics. They are used to study a wide variety of aspects of a physics
  analysis, such as signal response, detector effects, and the
  efficiency of selection requirements, in a controlled manner. While it
  is possible to encode complex physics dynamics into these simulations
  at the cost of increased complexity and larger computer requirements,
  in many cases it is enough to generate these simulated samples as if
  only kinematic physics occurred, i.e., in an isotropic way. This type
  of generation, called “phase space generation”, is very fast and
  offers simple and predictable patterns, making it an attractive first
  step in many physics analyses.</p>
  <p>The <monospace>phasespace</monospace> package implements phase
  space event generation based on the Raubold and Lynch method described
  in
  (<xref alt="James, 1968" rid="ref-JamesU003A1968gu" ref-type="bibr">James,
  1968</xref>). This method was previously implemented in the
  <monospace>GENBOD</monospace> function of the FORTRAN-based
  <monospace>CERNLIB</monospace> library. It was posteriorly ported to
  C++ for the ROOT toolkit
  (<xref alt="Brun &amp; Rademakers, 1997" rid="ref-BrunU003A1997pa" ref-type="bibr">Brun
  &amp; Rademakers, 1997</xref>) as the
  <monospace>TGenPhaseSpace</monospace> class, which is currently the
  most used implementation in particle physics. The
  <monospace>phasespace</monospace> package provides a pure Python
  implementation of the Raubold and Lynch method using the
  <italic>Tensorflow</italic> platform
  (<xref alt="Abadi et al., 2015" rid="ref-tensorflow2015-whitepaper" ref-type="bibr">Abadi
  et al., 2015</xref>) as its computational backend. Unlike
  <monospace>TGenPhaseSpace</monospace>, the
  <monospace>phasespace</monospace> approach offers seamless integration
  with the scientific Python ecosystem (<italic>numpy</italic>,
  <italic>pandas</italic>, <italic>scikit-learn</italic>…) while at the
  same time provides excellent performance and scalability both in CPUs
  and GPUs thanks to <italic>Tensorflow</italic>.</p>
  <p>In addition, <monospace>phasespace</monospace> allows the
  generation of complex multi-decay chains, including non-constant
  masses as is needed for the simulation of resonant particles. This
  functionality opens the door for its use as the basis for importance
  sampling in Dalitz and amplitude decay fitters, which typically need
  to implement their own solution based on
  <monospace>TGenPhaseSpace</monospace>; in this sense,
  <monospace>phasespace</monospace> is currently being used for the
  implementation of amplitude fit sampling in the
  <monospace>zfit</monospace> fitter
  (<xref alt="Eschle et al., 2019" rid="ref-zfit" ref-type="bibr">Eschle
  et al., 2019</xref>).</p>
  <p>The correctness of <monospace>phasespace</monospace> is
  continuously validated through its test suite against
  <monospace>TGenPhaseSpace</monospace> and the
  <monospace>RapidSim</monospace> package
  (<xref alt="Cowan et al., 2017" rid="ref-CowanU003A2016tnm" ref-type="bibr">Cowan
  et al., 2017</xref>), an application for the simulation of heavy-quark
  hadron decays; this latter application also uses
  <monospace>TGenPhaseSpace</monospace>, but adds features such as
  multi-decay chains and simulation of the kinematics found in colliders
  such as the LHC.</p>
  <p>In summary, <monospace>phasespace</monospace> is designed to fill
  an important gap in the recent paradigm shift of particle physics
  analysis towards integration with the scientific Python ecosystem. To
  do so it also has more advanced functionality than its C++-based
  predecessors. With its ease of use, clear interface and direct
  interoperability with other packages,
  <monospace>phasespace</monospace> provides a solid foundation to build
  upon in the quest for a full Python-based particle physics analysis
  software stack. The source code for <monospace>phasespace</monospace>
  has been archived to Zenodo with the linked DOI:
  (<xref alt="Puig Navarro &amp; Eschle, 2019" rid="ref-zenodo" ref-type="bibr">Puig
  Navarro &amp; Eschle, 2019</xref>).</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>A.P. acknowledges support from the Swiss National Science
  Foundation under contract 168169.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-BrunU003A1997pa">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Brun</surname><given-names>R.</given-names></name>
          <name><surname>Rademakers</surname><given-names>F.</given-names></name>
        </person-group>
        <article-title>ROOT: An object oriented data analysis framework</article-title>
        <source>Nucl. Instrum. Meth.</source>
        <year iso-8601-date="1997">1997</year>
        <volume>A389</volume>
        <pub-id pub-id-type="doi">10.1016/S0168-9002(97)00048-X</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-CowanU003A2016tnm">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Cowan</surname><given-names>G. A.</given-names></name>
          <name><surname>Craik</surname><given-names>D. C.</given-names></name>
          <name><surname>Needham</surname><given-names>M. D.</given-names></name>
        </person-group>
        <article-title>RapidSim: an application for the fast simulation of heavy-quark hadron decays</article-title>
        <source>Comput. Phys. Commun.</source>
        <year iso-8601-date="2017">2017</year>
        <volume>214</volume>
        <uri>https://arxiv.org/abs/1612.07489</uri>
        <pub-id pub-id-type="doi">10.1016/j.cpc.2017.01.029</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-JamesU003A1968gu">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>James</surname><given-names>F.</given-names></name>
        </person-group>
        <article-title>Monte-Carlo phase space</article-title>
        <year iso-8601-date="1968">1968</year>
      </element-citation>
    </ref>
    <ref id="ref-tensorflow2015-whitepaper">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Abadi</surname><given-names>Martı́n</given-names></name>
          <name><surname>Agarwal</surname><given-names>Ashish</given-names></name>
          <name><surname>Barham</surname><given-names>Paul</given-names></name>
          <name><surname>Brevdo</surname><given-names>Eugene</given-names></name>
          <name><surname>Chen</surname><given-names>Zhifeng</given-names></name>
          <name><surname>Citro</surname><given-names>Craig</given-names></name>
          <name><surname>Corrado</surname><given-names>Greg S.</given-names></name>
          <name><surname>Davis</surname><given-names>Andy</given-names></name>
          <name><surname>Dean</surname><given-names>Jeffrey</given-names></name>
          <name><surname>Devin</surname><given-names>Matthieu</given-names></name>
          <name><surname>Ghemawat</surname><given-names>Sanjay</given-names></name>
          <name><surname>Goodfellow</surname><given-names>Ian</given-names></name>
          <name><surname>Harp</surname><given-names>Andrew</given-names></name>
          <name><surname>Irving</surname><given-names>Geoffrey</given-names></name>
          <name><surname>Isard</surname><given-names>Michael</given-names></name>
          <name><surname>Jia</surname><given-names>Yangqing</given-names></name>
          <name><surname>Jozefowicz</surname><given-names>Rafal</given-names></name>
          <name><surname>Kaiser</surname><given-names>Lukasz</given-names></name>
          <name><surname>Kudlur</surname><given-names>Manjunath</given-names></name>
          <name><surname>Levenberg</surname><given-names>Josh</given-names></name>
          <name><surname>Mané</surname><given-names>Dandelion</given-names></name>
          <name><surname>Monga</surname><given-names>Rajat</given-names></name>
          <name><surname>Moore</surname><given-names>Sherry</given-names></name>
          <name><surname>Murray</surname><given-names>Derek</given-names></name>
          <name><surname>Olah</surname><given-names>Chris</given-names></name>
          <name><surname>Schuster</surname><given-names>Mike</given-names></name>
          <name><surname>Shlens</surname><given-names>Jonathon</given-names></name>
          <name><surname>Steiner</surname><given-names>Benoit</given-names></name>
          <name><surname>Sutskever</surname><given-names>Ilya</given-names></name>
          <name><surname>Talwar</surname><given-names>Kunal</given-names></name>
          <name><surname>Tucker</surname><given-names>Paul</given-names></name>
          <name><surname>Vanhoucke</surname><given-names>Vincent</given-names></name>
          <name><surname>Vasudevan</surname><given-names>Vijay</given-names></name>
          <name><surname>Viégas</surname><given-names>Fernanda</given-names></name>
          <name><surname>Vinyals</surname><given-names>Oriol</given-names></name>
          <name><surname>Warden</surname><given-names>Pete</given-names></name>
          <name><surname>Wattenberg</surname><given-names>Martin</given-names></name>
          <name><surname>Wicke</surname><given-names>Martin</given-names></name>
          <name><surname>Yu</surname><given-names>Yuan</given-names></name>
          <name><surname>Zheng</surname><given-names>Xiaoqiang</given-names></name>
        </person-group>
        <article-title>TensorFlow: Large-scale machine learning on heterogeneous systems</article-title>
        <year iso-8601-date="2015">2015</year>
        <uri>https://www.tensorflow.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-zfit">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Eschle</surname><given-names>Jonas</given-names></name>
          <name><surname>Puig Navarro</surname><given-names>Albert</given-names></name>
          <name><surname>Silva Coutinho</surname><given-names>Rafael</given-names></name>
        </person-group>
        <article-title>zfit: scalable pythonic fitting</article-title>
        <year iso-8601-date="2019">2019</year>
        <pub-id pub-id-type="doi">10.5281/zenodo.2602043</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-zenodo">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Puig Navarro</surname><given-names>Albert</given-names></name>
          <name><surname>Eschle</surname><given-names>Jonas</given-names></name>
        </person-group>
        <article-title>Phasespace: N-body phase space generation in python</article-title>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2019-03">2019</year><month>03</month>
        <pub-id pub-id-type="doi">10.5281/zenodo.2591993</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

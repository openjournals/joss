<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3497</article-id>
<article-id pub-id-type="doi">10.21105/joss.03497</article-id>
<title-group>
<article-title>Lerche: Generating data file processors in Julia from
EBNF grammars</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-2004-8672</contrib-id>
<string-name>James R. Hester</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<string-name>Erez Shinan</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Australian Nuclear Science and Technology Organisation,
Sydney, Australia</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Independent researcher</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-04-23">
<day>23</day>
<month>4</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>64</issue>
<fpage>3497</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Julia</kwd>
<kwd>data processing</kwd>
<kwd>data formats</kwd>
<kwd>EBNF</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>In a scientific context, structured text is commonly encountered in
  data files and domain-specific languages (DSLs) for handling data.
  Extended Backhaus-Naur Format (EBNF)
  (<xref alt="ISO Central Secretary, 1996" rid="ref-ebnf" ref-type="bibr">ISO
  Central Secretary, 1996</xref>) is a well-established standard for
  describing the syntax of such structured text. A useful subset of such
  grammars is known as <monospace>LALR(1)</monospace>, meaning that the
  grammars describe text that can be unambiguously parsed based only on
  the tokens already seen and the next token of input
  (<xref alt="DeRemer, 1969" rid="ref-lalr" ref-type="bibr">DeRemer,
  1969</xref>). LALR(1) stands out for being able to parse most
  programming languages, while guaranteeing O(n) run-time complexity and
  very light memory use. The <monospace>Lerche</monospace> Julia package
  automatically generates a parser that processes any data file or
  domain-specific language that can be described using a LALR(1) EBNF.
  The parse tree can be immediately transformed into
  application-specific data structures using user-supplied rules. This
  parser generator fills a gap in standards-based scientific work for
  the Julia ecosystem.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Standards for scientific data formats are essential for correct
  interpretation of data produced and consumed by parties that are not
  in direct contact. Standardisation is also becoming increasingly
  important as requirements for accessible and reusable data increase
  among funding bodies and publishers. The use of formal description
  languages, such as EBNF, removes ambiguity that may arise when using
  natural language descriptions for these standards. Furthermore, a
  parser that is machine-generated from an EBNF description is
  guaranteed to generate a correct parse tree from conformant data,
  unlike hand-written parsers. In addition, development of a formal
  scientific standard written using EBNF is aided by the availability of
  EBNF parsers that identify ambiguities and errors.</p>
  <p>Scientific data readers typically form a small component of larger
  projects, which will dictate the programming environment and policies.
  This environment restricts the choice of EBNF parser generators; an
  EBNF parser generator that executes in the usual project environment
  is preferable to one that introduces new build-time dependencies and
  environments. <monospace>Lerche</monospace> was translated into Julia
  from the Python Lark project
  (<xref alt="Shinan, 2021" rid="ref-lark" ref-type="bibr">Shinan,
  2021</xref>) in order to remove the need for any extra language
  dependencies or build steps when developing standards-conformant data
  format readers for Julia projects. The generated parsers run within
  the Julia language environment, and are straightforward to integrate
  into larger Julia projects.</p>
  <p>Other native parser tools available for Julia projects include
  <monospace>ParserCombinator</monospace>
  (<xref alt="Cooke, 2021" rid="ref-parsercombinator" ref-type="bibr">Cooke,
  2021</xref>), <monospace>Pegparser</monospace>
  (<xref alt="Schneider, 2020" rid="ref-pegparser" ref-type="bibr">Schneider,
  2020</xref>), and the built-in Julia macro system. None of these take
  EBNF as input. Reliance on EBNF parser generators external to the
  Julia environment, for example, by calling Lark or pre-generating
  parsers, complicates distribution and creates a barrier to user
  contribution to packages.</p>
  <p>dREL
  (<xref alt="Spadaccini et al., 2012" rid="ref-spadaccini_drelU003A_2012" ref-type="bibr">Spadaccini
  et al., 2012</xref>) is a relational data processing language for
  specifying crystallographic algorithms. The dREL LALR(1) EBNF
  (<xref alt="Hester, 2021a" rid="ref-drelenbf" ref-type="bibr">Hester,
  2021a</xref>) was developed using <monospace>Lerche</monospace> to
  verify its correctness and conformance to LALR(1) requirements. The
  <monospace>DrelTools</monospace>
  (<xref alt="Hester, 2021c" rid="ref-dreltools" ref-type="bibr">Hester,
  2021c</xref>) package is built around the parser automatically
  generated by <monospace>Lerche</monospace> from this EBNF.
  <monospace>Lerche</monospace> is also used by
  <monospace>CrystalInfoFramework</monospace>
  (<xref alt="Hester, 2021b" rid="ref-cifjl" ref-type="bibr">Hester,
  2021b</xref>) to generate the parser for data files written in the
  Crystallographic Information Framework (CIF) format
  (<xref alt="Bernstein et al., 2016" rid="ref-BernsteinU003Aaj5269" ref-type="bibr">Bernstein
  et al., 2016</xref>).</p>
</sec>
<sec id="performance">
  <title>Performance</title>
  <p>One of Julia’s attractions is the potential for performance close
  to that of a compiled language, while retaining features normally
  found in high-level interpreted languages. Fully realising this
  potential usually requires some investment in code design and
  profiling, which has so far been minimal for
  <monospace>Lerche.jl</monospace>. Nevertheless, parsing a 500K mmCIF
  text file from the worldwide Protein Data Bank
  (<xref alt="Berman et al., 2003" rid="ref-wwpdb" ref-type="bibr">Berman
  et al., 2003</xref>) with <monospace>Lerche.jl</monospace> is around 3
  times faster than using Lark with CPython, if initial compilation time
  is ignored. This improvement essentially disappears if the PyPy
  just-in-time Python interpreter is used instead of CPython. Therefore,
  although further improvements to <monospace>Lerche.jl</monospace>
  runtime performance are likely possible and may be realised in future
  versions, at this point switching to Julia and
  <monospace>Lerche.jl</monospace> to improve performance should be
  weighed carefully against the option of simply switching to a faster
  Python interpreter.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p><monospace>Lerche</monospace> optionally augments the range of
  applicable EBNF grammars by using contextual lexing. In this mode,
  only those tokens that are possible in the current parsing state are
  matched by the lexer, which can be useful for grammars in which
  certain character sequences match more than one type of token; for
  example, a keyword may also be a possible value for a plain sequence
  of characters in certain contexts, in which case a non-contextual
  lexer might wrongly fail to recognise the keyword.</p>
  <p>The Lark grammars recognised by <monospace>Lerche</monospace>
  extend the EBNF standard in several ways. To aid in composability,
  they support templating, and importing rules and terminals from other
  grammars. To aid in refactoring, they support expressing rule
  semantics, which are translatable to common tree operations. For
  example, rules starting with <monospace>_</monospace> are considered
  to be auxiliary, and don’t produce their own node. Terminals starting
  with <monospace>_</monospace> aren’t included in the tree, which is
  often desired for punctation such as commas and parentheses. In order
  to resolve possible ambiguities or conflicts, there is support for
  specifying priority in terminals and rules.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-BernsteinU003Aaj5269">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bernstein</surname><given-names>Herbert J.</given-names></name>
          <name><surname>Bollinger</surname><given-names>John C.</given-names></name>
          <name><surname>Brown</surname><given-names>I. David</given-names></name>
          <name><surname>Gražulis</surname><given-names>Saulius</given-names></name>
          <name><surname>Hester</surname><given-names>James R.</given-names></name>
          <name><surname>McMahon</surname><given-names>Brian</given-names></name>
          <name><surname>Spadaccini</surname><given-names>Nick</given-names></name>
          <name><surname>Westbrook</surname><given-names>John D.</given-names></name>
          <name><surname>Westrip</surname><given-names>Simon P.</given-names></name>
        </person-group>
        <article-title>Specification of the Crystallographic Information File format, version 2.0</article-title>
        <source>Journal of Applied Crystallography</source>
        <year iso-8601-date="2016-02">2016</year><month>02</month>
        <volume>49</volume>
        <issue>1</issue>
        <uri>https://doi.org/10.1107/S1600576715021871</uri>
        <pub-id pub-id-type="doi">10.1107/S1600576715021871</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-cifjl">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Hester</surname><given-names>J. R.</given-names></name>
        </person-group>
        <article-title>CrystalInfoFramework.jl</article-title>
        <source>Github repository</source>
        <publisher-name>Github</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <uri>https://github.com/jamesrhester/CrystalInfoFramework.jl</uri>
      </element-citation>
    </ref>
    <ref id="ref-drelenbf">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Hester</surname><given-names>J. R.</given-names></name>
        </person-group>
        <article-title>A draft annotated grammar for dREL</article-title>
        <source>Github repository</source>
        <publisher-name>Github</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <uri>https://github.com/COMCIFS/dREL/blob/master/annotated-grammar.rst</uri>
      </element-citation>
    </ref>
    <ref id="ref-dreltools">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Hester</surname><given-names>J. R.</given-names></name>
        </person-group>
        <article-title>DrelTools.jl</article-title>
        <source>Github repository</source>
        <publisher-name>Github</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <uri>https://github.com/jamesrhester/DrelTools.jl</uri>
      </element-citation>
    </ref>
    <ref id="ref-ebnf">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <string-name>ISO Central Secretary</string-name>
        </person-group>
        <article-title>Information technology — Syntactic metalanguage — Extended BNF</article-title>
        <publisher-name>International Organization for Standardization</publisher-name>
        <publisher-loc>Geneva, CH</publisher-loc>
        <year iso-8601-date="1996">1996</year>
        <uri>https://www.iso.org/standard/26153.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-lark">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Shinan</surname><given-names>E.</given-names></name>
        </person-group>
        <article-title>Lark</article-title>
        <source>Github repository</source>
        <publisher-name>Github</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <uri>https://github.com/lark-parser/Lark</uri>
      </element-citation>
    </ref>
    <ref id="ref-parsercombinator">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Cooke</surname><given-names>A.</given-names></name>
        </person-group>
        <article-title>ParserCombinator.jl</article-title>
        <source>Github repository</source>
        <publisher-name>Github</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <uri>https://github.com/andrewcooke/ParserCombinator.jl</uri>
      </element-citation>
    </ref>
    <ref id="ref-spadaccini_drelU003A_2012">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Spadaccini</surname><given-names>Nick</given-names></name>
          <name><surname>Castleden</surname><given-names>Ian R.</given-names></name>
          <name><surname>Boulay</surname><given-names>Doug du</given-names></name>
          <name><surname>Hall</surname><given-names>Sydney R.</given-names></name>
        </person-group>
        <article-title>dREL: A relational expression language for dictionary methods</article-title>
        <source>Journal of Chemical Information and Modeling</source>
        <year iso-8601-date="2012-08">2012</year><month>08</month>
        <volume>52</volume>
        <issue>8</issue>
        <issn>1549-9596</issn>
        <pub-id pub-id-type="doi">10.1021/ci300076w</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-wwpdb">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Berman</surname><given-names>H. M.</given-names></name>
          <name><surname>Henrick</surname><given-names>K.</given-names></name>
          <name><surname>Nakamura</surname><given-names>H.</given-names></name>
        </person-group>
        <article-title>Announcing the worldwide protein data bank</article-title>
        <source>Nature Structural Biology</source>
        <year iso-8601-date="2003">2003</year>
        <volume>10</volume>
        <issue>12</issue>
      </element-citation>
    </ref>
    <ref id="ref-pegparser">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Schneider</surname><given-names>A.</given-names></name>
        </person-group>
        <article-title>PEGParser.jl</article-title>
        <source>Github repository</source>
        <publisher-name>Github</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <uri>https://github.com/abeschneider/PEGParser.jl</uri>
      </element-citation>
    </ref>
    <ref id="ref-lalr">
      <element-citation publication-type="thesis">
        <person-group person-group-type="author">
          <name><surname>DeRemer</surname><given-names>F. L.</given-names></name>
        </person-group>
        <article-title>Practical translators for LR(k) languages</article-title>
        <publisher-name>MIT</publisher-name>
        <year iso-8601-date="1969">1969</year>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1960</article-id>
<article-id pub-id-type="doi">10.21105/joss.01960</article-id>
<title-group>
<article-title>Annotation Sniffer: A tool to Extract Code Annotations
Metrics</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8358-4405</contrib-id>
<string-name>Phyllipe Lima</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5555-3487</contrib-id>
<string-name>Eduardo Guerra</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8923-2814</contrib-id>
<string-name>Paulo Meirelles</string-name>
<xref ref-type="aff" rid="aff-3"/>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>CDG, National Institute of Telecommunications - INATEL,
Brazil</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>LAC, National Institute for Space Research - INPE,
Brazil</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>EPM, Federal University of São Paulo - UNIFESP,
Brazil</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>IME, University of São Paulo - USP, Brazil</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-02-02">
<day>2</day>
<month>2</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>47</issue>
<fpage>1960</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>metadata</kwd>
<kwd>annotations</kwd>
<kwd>software-engineering</kwd>
<kwd>source-code-analysis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Enterprise Java frameworks and APIs such as JPA (Java Persistence
  API), Spring, EJB (Enterprise Java Bean), and JUnit make extensive use
  of code annotations as means to allow applications to configure custom
  metadata and execute specific behavior. Observing the top 30 ranked
  Java projects on GitHub, they have, on average, 76% of classes with at
  least one annotation. Some projects may have more than 90% of its
  classes annotated. To measure code annotations usage and analyze their
  distribution, our work in
  (<xref alt="P. Lima et al., 2018" rid="ref-LIMA2018" ref-type="bibr">P.
  Lima et al., 2018</xref>) proposed a novel suite of software metrics
  dedicated to code annotations. We used a Percentile Rank Analysis
  approach
  (<xref alt="Meirelles, 2013" rid="ref-meirelles2013" ref-type="bibr">Meirelles,
  2013</xref>) to obtain threshold values.</p>
  <p>Source code metrics retrieve information from software to assess
  its characteristics. Well-known techniques use metrics associated with
  rules to detect bad smells on the source code
  (<xref alt="Lanza &amp; Marinescu, 2006" rid="ref-Lanza2006" ref-type="bibr">Lanza
  &amp; Marinescu, 2006</xref>). However, traditional code metrics do
  not recognize code annotations on programming elements, which can lead
  to an incomplete code assessment
  (<xref alt="E. M. Guerra et al., 2009" rid="ref-Guerra2009" ref-type="bibr">E.
  M. Guerra et al., 2009</xref>). For instance, a domain class can be
  considered simple using current complexity metrics. However, it can
  contain complex annotations for object-XML mapping. Also, using a set
  of annotations couples the application to a framework that can
  interpret them and current coupling metrics does not explicitly handle
  this.</p>
  <p>To automate the process of extracting the novel suite of software
  metrics for code annotation in
  (<xref alt="P. Lima et al., 2018" rid="ref-LIMA2018" ref-type="bibr">P.
  Lima et al., 2018</xref>), we developed an open-source tool called
  Annotation Sniffer (<monospace>ASniffer</monospace>). It is a
  command-line tool that reads java source code, extracts the metrics
  values, and outputs an XML report. Potential
  <monospace>ASniffer</monospace> users are software engineers or
  researchers interested in static code analysis and mining software
  repositories. Additionally, given that it is an extensible tool, other
  developers can implement their metrics and integrate them in the
  extraction process. Figure 1 presents an overview diagram of the
  ASniffer tool.</p>
  <p><inline-graphic mimetype="image" mime-subtype="png" xlink:href="figures/asniffer.png" />
  Figure 1: ASniffer overview diagram</p>
  <p>We previously presented the first version of this tool and
  published it on a workshop
  (<xref alt="P. S. Lima et al., 2018" rid="ref-LIMA2018c" ref-type="bibr">P.
  S. Lima et al., 2018</xref>). The current version has an improved
  extensibility mechanism as well as a more compact and complete report,
  to support our ongoing research about code annotations and metadata in
  object-oriented programming.</p>
</sec>
<sec id="metadata-and-code-annotations">
  <title>Metadata and Code Annotations</title>
  <p>A variety of contexts in the computer science field uses the term
  “metadata”. In all of them, it means data referring to the data
  itself. In databases, the data are the ones persisted, and the
  metadata is their description, i.e., the structure of the table. In
  the object-oriented context, the data are the instances, and the
  metadata is their description, i.e., information that describes the
  class. As such, fields, methods, super-classes, and interfaces are all
  metadata of a class instance. A class field, in turn, has its type,
  access modifiers, and name as its metadata
  (<xref alt="E. Guerra, 2014" rid="ref-guerra2014" ref-type="bibr">E.
  Guerra, 2014</xref>).</p>
  <p>Some programming languages provide features that allow custom
  metadata to be defined and included directly on programming elements.
  This feature is supported in languages such as Java, through the use
  of annotations and in C#, by attributes. A benefit is that the
  metadata definition is closer to the programming element, and its
  definition is less verbose than external approaches. Annotations are a
  feature of the Java language, which became official on version 1.5.
  The code on Listing 1 presents a simple <monospace>Player</monospace>
  class using code annotation to perform the object-relational
  mapping.</p>
  <code language="java">@Entity
@Table(name=&quot;Players&quot;)
public class Player {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    @Column(name = &quot;health&quot;)
    private float health;
    
    @Column(name = &quot;name&quot;)
    private String name;
  
    //getters and setters omitted
}</code>
  <p>Listing 1: Example of code annotations</p>
  <p>To map this <monospace>Player</monospace> class to a table in a
  database, to store the player’s information, we need to pass in some
  <monospace>extra information</monospace> about these code elements. In
  other words, we need to define an object-relational mapping, and we
  need to configure which elements should be mapped to a column, table,
  and among others. Using code annotations provided by the JPA API, this
  mapping is easily achieved. When this code gets executed, the
  framework consuming the annotations knows how to perform the expected
  behavior.</p>
</sec>
<sec id="annotation-metrics">
  <title>Annotation Metrics</title>
  <p>Our work in
  (<xref alt="P. Lima et al., 2018" rid="ref-LIMA2018" ref-type="bibr">P.
  Lima et al., 2018</xref>) proposed a novel suite of software metrics
  dedicated to code annotations. In this section, we briefly describe
  them and demonstrate how they are calculated. We have three categories
  of metrics:</p>
  <list list-type="bullet">
    <list-item>
      <p>Class Metric: Outputs one value per class.</p>
    </list-item>
    <list-item>
      <p>Code Element Metric: Outputs one value per code element
      (fields, methods, among others).</p>
    </list-item>
    <list-item>
      <p>Annotation Metric: Outputs one value per code annotation.</p>
    </list-item>
  </list>
  <p>We use the code presented in Listing 2 as an example.</p>
  <code language="java">import javax.persistence.AssociationOverrides;
import javax.persistence.AssociationOverride;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQuery;
import javax.persistence.DiscriminatorColumn;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;

@AssociationOverrides(value = {
      @AssociationOverride(name=&quot;ex&quot;,
         joinColumns = @JoinColumn(name=&quot;EX_ID&quot;)),
      @AssociationOverride(name=&quot;other&quot;,
         joinColumns = @JoinColumn(name=&quot;O_ID&quot;))})
@NamedQuery(name=&quot;findByName&quot;,
      query=&quot;SELECT c &quot; +
            &quot;FROM Country c &quot; + 
            &quot;WHERE c.name = :name&quot;)
@Stateless
public class Example {...

   @TransactionAttribute(SUPPORTS)
   @DiscriminatorColumn(name = &quot;type&quot;, discriminatorType = STRING)
   public String exampleMethodA(){...}

   @TransactionAttribute(SUPPORTS)
   public String exampleMethodB(){...}

}</code>
  <p>Listing 2: Example of code to extract annotation metrics.</p>
  <list list-type="bullet">
    <list-item>
      <p>Annotations in Class (AC): It counts the number of annotations
      declared on all code elements in a class, including nested
      annotations. In our example code, the value of AC is equal to 10.
      It is a <monospace>Class Metric</monospace>.</p>
    </list-item>
    <list-item>
      <p>Unique Annotations in Class (UAC): While AC counts all
      annotations, even repeated ones, UAC counts only distinct
      annotations. Two annotations are equal if they have the same name,
      and all arguments match. For instance, both annotations are
      different, for they have a nested annotation that have different
      arguments. The first is while the latter is . Hence they are
      distinct annotations and will be computed separately. The UAC
      value for the example class is nine. Note that the annotation is
      counted only once. It is a
      <monospace>Class Metric</monospace>.</p>
    </list-item>
    <list-item>
      <p>Annotations Schemas in Class (ASC): An annotation schema
      represents a set of related annotations provided by a framework or
      tool. This measures how coupled a class is to a framework. This
      value is obtained by tracking the imports used for the
      annotations. On the example code, the ASC value is two. The import
      is a schema provided by the JPA, and the import is provided by
      EJB. It is a <monospace>Class Metric</monospace>.</p>
    </list-item>
    <list-item>
      <p>Arguments in Annotations (AA): Annotations may contain
      arguments. They can be a string, integer, or even another
      annotation. The AA metric counts the number of arguments contained
      in the annotation. For each annotation in the class, an AA value
      will be generated. For example, the has only one argument named ,
      so the AA value is equal one. But , contains two arguments, and ,
      so the AA value is two. It is an
      <monospace>Annotation Metric</monospace>.</p>
    </list-item>
    <list-item>
      <p>Annotations in Element Declaration (AED): The AED metric counts
      how many annotations are declared in each code element, including
      nested annotations. In the example code, the method has an AED
      value of two, it has the and . It is a
      <monospace>Code Element Metric</monospace>.</p>
    </list-item>
    <list-item>
      <p>Annotation Nesting Level (ANL): Annotations can have other
      annotations as arguments, which translates into nested
      annotations. ANL measures how deep an annotation is nested. The
      root level is considered value zero. The annotations has ANL value
      of zero, while has ANL equals two. This data is because it has as
      a first level, and then the adds another nesting level, hence the
      value ANL is two. It is an
      <monospace>Annotation Metric</monospace>.</p>
    </list-item>
    <list-item>
      <p>LOC in Annotation Declaration (LOCAD): LOC (Line of Code), is a
      well-known metric that counts the number of code lines. We
      proposed LOCAD as a variant of LOC that counts the number of lines
      used in an annotation declaration. has a LOCAD value of five,
      while has LOCAD equals four. It is an
      <monospace>Annotation Metric</monospace>.</p>
    </list-item>
  </list>
</sec>
<sec id="annotation-sniffer">
  <title>Annotation Sniffer</title>
  <p>The ASniffer tool uses the
  JDT<xref ref-type="fn" rid="fn1">1</xref>(Java Development Tools) API
  to build the Abstract Syntax Tree (AST) from a text file containing
  the source code. The ASniffer traverses this AST, visiting the nodes
  and gathering information about the code elements. After the
  processing is done, it generates an XML as output.</p>
  <p>To create the AST (Abstract Syntax Tree), we use the method . This
  method is exposed by the JDT and receives an array of strings
  containing the file path of each source code that we wish to analyze.
  Another parameter for the method is a class that will handle the
  compilation units. Our class is the and this class must extend the .
  From inside we call every metric class and pass in the compilation
  unit (generated by the ).</p>
  <p>To understand the extraction process, we will use a snippet from
  the code that collects the <monospace>Annotations in Class</monospace>
  metric, presented in Listing 3. Since this is a
  <monospace>Class Metric</monospace>, i.e., outputs one value per
  class, it must extend the class and implement our custom interface
  <monospace>IClassMetricCollector</monospace>. The superclass provides
  methods that are used to visit the nodes from the Compilation Unit.
  For instance, for the AC metric, we visit every annotation
  encountered, and increment the value for
  <monospace>annotations</monospace>. Our custom interface provides two
  methods, the first one, (), initializes the extraction process, while
  the second one, (), is where the result is stored.</p>
  <code language="java">@ClassMetric
public class AC extends ASTVisitor implements IClassMetricCollector{
  //We also visist MarkerAnnotation and SingleMemberAnnotation
    private int annotations = 0;
    @Override
    public boolean visit(NormalAnnotation node) { 
        annotations++;
        return super.visit(node);
    }
    @Override
    public void execute(CompilationUnit cu, MetricResult result, 
                       AMReport report) {
        cu.accept(this);
    }
    @Override
    public void setResult(MetricResult result) {
        result.addClassMetric(&quot;AC&quot;,annotations);
    }
}</code>
  <p>Listing 3: Snippet from the code that implements the Annotations in
  Class metric</p>
</sec>
<sec id="related-work">
  <title>Related Work</title>
  <p>We developed the ASniffer tool to support the research published on
  (<xref alt="P. Lima et al., 2018" rid="ref-LIMA2018" ref-type="bibr">P.
  Lima et al., 2018</xref>), i.e., collect the novel suite of annotation
  metrics. Given that these were unpublished metrics, there are no
  available tools for comparison. However, other tools perform static
  code analysis and collect metrics, such as the CK Tool
  (<xref alt="Aniche, 2015" rid="ref-aniche2015" ref-type="bibr">Aniche,
  2015</xref>). This open-source tool collects the well-known CK
  (Chidamber-Kemerer) Metrics Suite
  (<xref alt="Chidamber &amp; Kemerer, 1991" rid="ref-ck91" ref-type="bibr">Chidamber
  &amp; Kemerer, 1991</xref>) as well as other object-oriented metrics
  for Java projects. The CK Tool was also developed using the JDT API to
  build the Abstract Syntax Tree, which served as a reference for the
  development of the ASniffer.</p>
</sec>
<sec id="license">
  <title>License</title>
  <p>Annotation Sniffer is licensed under the GNU Lesser General Public
  License v3.0</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work is supported by FAPESP (Fundação de Amparo à Pesquisa do
  Estado de São Paulo), grant 2014/16236-6 and CAPES (Coordenação de
  Aperfeiçoamento de Pessoal de Nível Superior)</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-LIMA2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lima</surname><given-names>Phyllipe</given-names></name>
          <name><surname>Guerra</surname><given-names>Eduardo</given-names></name>
          <name><surname>Meirelles</surname><given-names>Paulo</given-names></name>
          <name><surname>Kanashiro</surname><given-names>Lucas</given-names></name>
          <name><surname>Silva</surname><given-names>Hélio</given-names></name>
          <name><surname>Silveira</surname><given-names>Fábio</given-names></name>
        </person-group>
        <article-title>A metrics suite for code annotation assessment</article-title>
        <source>Journal of Systems and Software</source>
        <year iso-8601-date="2018">2018</year>
        <volume>137</volume>
        <issn>0164-1212</issn>
        <uri>http://www.sciencedirect.com/science/article/pii/S016412121730273X</uri>
        <pub-id pub-id-type="doi">10.1016/j.jss.2017.11.024</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Lanza2006">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Lanza</surname><given-names>Michele</given-names></name>
          <name><surname>Marinescu</surname><given-names>Radu</given-names></name>
        </person-group>
        <source>Object-oriented metrics in practice: Using software metrics to characterize, evaluate, and improve the design of object-oriented systems</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2006">2006</year>
        <pub-id pub-id-type="doi">10.1007/3-540-39538-5</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Guerra2009">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Guerra</surname><given-names>Eduardo M</given-names></name>
          <name><surname>Silveira</surname><given-names>Fábio F</given-names></name>
          <name><surname>Fernandes</surname><given-names>Clóvis T</given-names></name>
        </person-group>
        <article-title>Questioning traditional metrics for applications which uses metadata-based frameworks</article-title>
        <source>Proceedings of the 3rd workshop on assessment of contemporary modularization techniques (ACoM’09), october</source>
        <year iso-8601-date="2009">2009</year>
        <volume>26</volume>
      </element-citation>
    </ref>
    <ref id="ref-meirelles2013">
      <element-citation publication-type="thesis">
        <person-group person-group-type="author">
          <name><surname>Meirelles</surname><given-names>Paulo Roberto Miranda</given-names></name>
        </person-group>
        <article-title>Monitoring source code metrics in free software projects</article-title>
        <publisher-name>Department of Computer Science – Institute of Mathematics; Statistics of University of São Paulo</publisher-name>
        <year iso-8601-date="2013">2013</year>
        <uri>http://www.teses.usp.br/teses/disponiveis/45/45134/tde-27082013-090242/pt-br.php</uri>
      </element-citation>
    </ref>
    <ref id="ref-guerra2014">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Guerra</surname><given-names>Eduardo</given-names></name>
        </person-group>
        <source>Componentes reutilizáveis em java com reflexão e anotações</source>
        <publisher-name>Casa do Código</publisher-name>
        <year iso-8601-date="2014">2014</year>
        <isbn>978-85-66250-50-3</isbn>
      </element-citation>
    </ref>
    <ref id="ref-LIMA2018c">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Lima</surname><given-names>Phyllipe S</given-names></name>
          <name><surname>Guerra</surname><given-names>Eduardo M</given-names></name>
          <name><surname>Meirelles</surname><given-names>Paulo R</given-names></name>
        </person-group>
        <article-title>Annotation sniffer: Open source tool for annotated code elements</article-title>
        <source>CBSoft 2018 - tools session ()</source>
        <year iso-8601-date="2018-09">2018</year><month>09</month>
      </element-citation>
    </ref>
    <ref id="ref-aniche2015">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Aniche</surname><given-names>Maurício</given-names></name>
        </person-group>
        <source>Java code metrics calculator (CK)</source>
        <year iso-8601-date="2015">2015</year>
      </element-citation>
    </ref>
    <ref id="ref-ck91">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Chidamber</surname><given-names>Shyam R.</given-names></name>
          <name><surname>Kemerer</surname><given-names>Chris F.</given-names></name>
        </person-group>
        <article-title>Towards a metrics suite for object-oriented design</article-title>
        <source>Proceedings of OOPSLA’91</source>
        <year iso-8601-date="1991">1991</year>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p></p>
  </fn>
</fn-group>
</back>
</article>

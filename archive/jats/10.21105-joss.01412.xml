<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1412</article-id>
<article-id pub-id-type="doi">10.21105/joss.01412</article-id>
<title-group>
<article-title>insight: A Unified Interface to Access Information from
Model Objects in R</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8895-3206</contrib-id>
<string-name>Daniel Lüdecke</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7825-7573</contrib-id>
<string-name>Philip D. Waggoner</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5375-9967</contrib-id>
<string-name>Dominique Makowski</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>University Medical Center Hamburg-Eppendorf,
Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>College of William &amp; Mary, Virginia, U.S.</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Nanyang Technological University, Singapore</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-06-05">
<day>5</day>
<month>6</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>38</issue>
<fpage>1412</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>model information</kwd>
<kwd>regression models</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>When fitting any statistical model, there are many useful pieces of
  information that are simultaneously calculated and stored beyond
  coefficient estimates and general model fit statistics. Although there
  exist some generic functions to obtain model information and data,
  many package-specific modeling functions do not provide such methods
  to allow users to access such valuable information.</p>
  <p><italic>insight</italic> is an R-package
  (<xref alt="R Core Team, 2019" rid="ref-rcore" ref-type="bibr">R Core
  Team, 2019</xref>) that fills this important gap by providing a suite
  of functions to support almost any model (see a list of the many
  models supported below in the <bold>Supported Models</bold> section).
  The goal of <italic>insight</italic>, then, is to offer tools that
  provide <italic>easy</italic>, <italic>intuitive</italic>, and
  <italic>consistent</italic> access to information contained in model
  objects. These tools aid applied researchers in virtually any field
  who fit, diagnose, and present statistical models by streamlining
  access to every aspect of model objects via consistent syntax and
  output.</p>
  <p>Ultimately, the development of <italic>insight</italic> is in line
  with the philosophy of the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/easystats">easystats
  project</ext-link>, which is to facilitate and streamline the process
  of statistical analysis, interpreting and reporting the results in the
  R programming language.</p>
  <sec id="getting-up-and-running-with-insight">
    <title>Getting Up and Running with <italic>insight</italic></title>
    <p>Built with non-programmers in mind, <italic>insight</italic>
    offers a broad toolbox for making model and data information easily
    accessible. While <italic>insight</italic> offers many useful
    functions for working with and understanding model objects
    (discussed below), we suggest users start with
    <monospace>model_info()</monospace>, as this function provides a
    clean and consistent overview of model objects (e.g., functional
    form of the model, the model family, link function, number of
    observations, variables included in the specification, etc.). With a
    clear understanding of the model introduced, users are able to adapt
    other <italic>insight</italic> functions for more nuanced
    exploration of and interaction with virtually any model object.</p>
    <p>Building on this starting place, the remainder of the package
    revolves around two key prefixes: <monospace>get_*</monospace> and
    <monospace>find_*</monospace>. The <monospace>get_*</monospace>
    prefix extracts <italic>values</italic> (or <italic>data</italic>)
    associated with model-specific objects (e.g., parameters or
    variables), while the <monospace>find_*</monospace> prefix
    <italic>lists</italic> model-specific objects (e.g., priors or
    predictors). These are powerful families of functions allowing for
    great flexibility in use, whether at a high, descriptive level
    (<monospace>find_*</monospace>) or narrower level of statistical
    inspection and reporting (<monospace>get_*</monospace>).</p>
    <p>In total, the <italic>insight</italic> package includes 16 core
    functions (see Figure 1): <monospace>get_data()</monospace>,
    <monospace>get_priors()</monospace>,
    <monospace>get_variance()</monospace>,
    <monospace>get_parameters()</monospace>,
    <monospace>get_predictors()</monospace>,
    <monospace>get_random()</monospace>,
    <monospace>get_response()</monospace>,
    <monospace>find_algorithm()</monospace>,
    <monospace>find_formula()</monospace>,
    <monospace>find_variables()</monospace>,
    <monospace>find_terms()</monospace>,
    <monospace>find_parameters()</monospace>,
    <monospace>find_predictors()</monospace>,
    <monospace>find_random()</monospace>,
    <monospace>find_response()</monospace>, and
    <monospace>model_info()</monospace>. In all cases, users must supply
    at a minimum, the name of the fitted model object. In several
    functions, there are additional arguments that allow for more
    targeted returns of model information. For example, the
    <monospace>find_variables()</monospace> function’s
    <monospace>effects</monospace> argument allows for the extraction of
    “fixed effects” terms, “random effects” terms, or by default, “all”
    terms in the model object. We point users to the package
    documentation or the complementary package website,
    https://easystats.github.io/insight/, for a detailed list of the
    arguments associated with each function as well as the returned
    values from each function.</p>
    <fig>
      <caption><p>The functions in insight allow users to access
      different aspects of models, such as the data used for fitting,
      the parameters of the fitted model or various information about
      the model.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figure1.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="definition-of-model-components">
    <title>Definition of Model Components</title>
    <p>The functions from <italic>insight</italic> address different
    components of models. In an effort to avoid confusion about specific
    “targets” of each function, in this section we provide a short
    explanation of <italic>insight</italic>’s definitions of regression
    model components (see Figures 2 and 3). For detailed examples, we
    point users to the
    <ext-link ext-link-type="uri" xlink:href="https://easystats.github.io/insight/articles/insight.html">accompanying
    package website</ext-link>.</p>
    <sec id="data">
      <title>Data</title>
      <p>The dataset used to fit the model.</p>
    </sec>
    <sec id="parameters">
      <title>Parameters</title>
      <p>Values estimated or learned from data that capture the
      relationship between variables. In regression models, these are
      usually referred to as <italic>coefficients</italic>.</p>
    </sec>
    <sec id="response-and-predictors">
      <title>Response and Predictors</title>
      <list list-type="bullet">
        <list-item>
          <p><bold>response</bold>: the outcome or response variable
          (dependent variable) of a regression model.</p>
        </list-item>
        <list-item>
          <p><bold>predictors</bold>: independent variables of (the
          <italic>fixed</italic> part of) a regression model. For mixed
          models, variables that are only in the <italic>random
          effects</italic> part (i.e. grouping factors) of the model are
          not returned as predictors by default. However, these can be
          included using additional arguments in the function call,
          treating predictors as “unique”. As such, if a variable
          appears as a fixed effect and a random slope, it is treated as
          one (the same) predictor.</p>
        </list-item>
      </list>
      <fig>
        <caption><p>Definition of Model Components: Response and
        Predictors</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="figure3a.png" xlink:title="" />
      </fig>
    </sec>
    <sec id="variables">
      <title>Variables</title>
      <p>Any unique variable names that appear in a regression model,
      e.g., response variable, predictors or random effects. A
      “variable” only relates to the unique occurence of a term, or the
      term name. For instance, the expression
      <monospace>x + poly(x, 2)</monospace> has only the variable
      <monospace>x</monospace>.</p>
      <fig>
        <caption><p>Definition of Model Components:
        Variables</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="figure3b.png" xlink:title="" />
      </fig>
    </sec>
    <sec id="terms">
      <title>Terms</title>
      <p>Terms themselves consist of variable and factor names separated
      by operators, or involve arithmetic expressions. For instance, the
      expression <monospace>x + poly(x, 2)</monospace> has
      <italic>one</italic> variable <monospace>x</monospace>, but
      <italic>two</italic> terms <monospace>x</monospace> and
      <monospace>poly(x, 2)</monospace>.</p>
      <fig>
        <caption><p>Definition of Model Components: Terms</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="figure3c.png" xlink:title="" />
      </fig>
    </sec>
    <sec id="random-effects">
      <title>Random Effects</title>
      <list list-type="bullet">
        <list-item>
          <p><bold>random slopes</bold>: variables that are specified as
          random slopes in a mixed effects model.</p>
        </list-item>
        <list-item>
          <p><bold>random or grouping factors</bold>: variables that are
          specified as grouping variables in a mixed effects model.</p>
        </list-item>
      </list>
      <fig>
        <caption><p>Definition of Model Components: Random
        Effects</p></caption>
        <graphic mimetype="image" mime-subtype="png" xlink:href="figure3d.png" xlink:title="" />
      </fig>
    </sec>
  </sec>
  <sec id="examples">
    <title>Examples</title>
    <p>For a more intuitive introduction, consider the following
    examples for three major types of models: ordinary least squares
    (OLS) regression, linear mixed effects models, and Bayesian models.
    Importantly, though only a few functions are included below for the
    sake of space, users are encouraged to inspect the package
    documentation for an exhaustive list of package functionality with
    accompanying examples.</p>
    <code language="r script"># Load the &quot;insight&quot; package
install.packages(&quot;insight&quot;)
library(insight)

# Sample model 1: OLS
sample1 &lt;- lm(mpg ~ cyl + wt + hp, data = mtcars)

get_parameters(sample1)
#&gt;     parameter   estimate
#&gt; 1 (Intercept) 38.7517874
#&gt; 2         cyl -0.9416168
#&gt; 3          wt -3.1669731
#&gt; 4          hp -0.0180381

find_algorithm(sample1)
#&gt; $algorithm
#&gt; [1] &quot;OLS&quot;

find_formula(sample1)
#&gt; $conditional
#&gt; mpg ~ cyl + wt + hp


# Sample model 2: Linear Mixed Effects (via lme4)
sample2 &lt;- lme4::lmer(
  Reaction ~ Days + (Days | Subject), 
  data = sleepstudy
)

get_parameters(sample2)
#&gt;     parameter  estimate
#&gt; 1 (Intercept) 251.40510
#&gt; 2        Days  10.46729

find_algorithm(sample2)
#&gt; $algorithm
#&gt; [1] &quot;REML&quot;
#&gt; 
#&gt; $optimizer
#&gt; [1] &quot;nloptwrap&quot;

find_formula(sample2)
#&gt; $conditional
#&gt; Reaction ~ Days
#&gt; 
#&gt; $random
#&gt; ~Days | Subject


# Sample model 3: Bayesian (via rstanarm)
sample3 &lt;- rstanarm::stan_glm(
  Sepal.Width ~ Species * Petal.Length, 
  data = iris
)

get_priors(sample3)
#&gt;                        parameter distribution location scale
#&gt; 1                    (Intercept)       normal        0  10.0
#&gt; 2              Speciesversicolor       normal        0   2.5
#&gt; 3               Speciesvirginica       normal        0   2.5
#&gt; 4                   Petal.Length       normal        0   2.5
#&gt; 5 Speciesversicolor:Petal.Length       normal        0   2.5
#&gt; 6  Speciesvirginica:Petal.Length       normal        0   2.5

find_algorithm(sample3)
#&gt; $algorithm
#&gt; [1] &quot;sampling&quot;
#&gt; 
#&gt; $chains
#&gt; [1] 4
#&gt; 
#&gt; $iterations
#&gt; [1] 2000
#&gt; 
#&gt; $warmup
#&gt; [1] 1000

find_formula(sample3)
#&gt; $conditional
#&gt; Sepal.Width ~ Species * Petal.Length</code>
    <p><italic>insight</italic> is already used by different packages to
    solve problems that typically occur when the users’ inputs are
    different model objects of varying complexity,
    e.g. <italic>ggeffects</italic>
    (<xref alt="Lüdecke, 2018" rid="ref-ludecke_ggeffects_2018" ref-type="bibr">Lüdecke,
    2018</xref>), the <italic>sjPlot</italic>-package
    (<xref alt="Lüdecke, 2019" rid="ref-pkg_sjPlot" ref-type="bibr">Lüdecke,
    2019</xref>), <italic>bayestestR</italic>
    (<xref alt="Makowski et al., 2019" rid="ref-pkg_bayestestR" ref-type="bibr">Makowski
    et al., 2019</xref>) and the <italic>performance</italic>-package
    (<xref alt="Lüdecke et al., 2019" rid="ref-pkg_performance" ref-type="bibr">Lüdecke
    et al., 2019</xref>). We point users to the
    <ext-link ext-link-type="uri" xlink:href="https://easystats.github.io/insight/articles/insight.html">get
    started-vignette</ext-link> for further details and examples.</p>
  </sec>
  <sec id="supported-models">
    <title>Supported Models</title>
    <p><italic>insight</italic> works with many different model-objects
    (from various packages), such as <bold>AER</bold> (<italic>ivreg,
    tobit</italic>), <bold>afex</bold> (<italic>mixed</italic>),
    <bold>aod</bold> (<italic>betabin, negbin</italic>),
    <bold>base</bold> (<italic>aov, aovlist, lm, glm</italic>),
    <bold>BayesFactor</bold> (<italic>BFBayesFactor</italic>),
    <bold>betareg</bold> (<italic>betareg</italic>), <bold>biglm</bold>
    (<italic>biglm, bigglm</italic>), <bold>blme</bold> (<italic>blmer,
    bglmer</italic>), <bold>brms</bold> (<italic>brmsfit</italic>),
    <bold>censReg</bold>, <bold>crch</bold>, <bold>countreg</bold>
    (<italic>zerontrunc</italic>), <bold>coxme</bold>,
    <bold>estimatr</bold> (<italic>lm_robust, iv_robust</italic>),
    <bold>feisr</bold> (<italic>feis</italic>), <bold>gam</bold>
    (<italic>Gam</italic>), <bold>gamm4</bold> , <bold>gamlss</bold>,
    <bold>gbm</bold>, <bold>gee</bold>, <bold>geepack</bold>
    (<italic>geeglm</italic>), <bold>GLMMadaptive</bold>
    (<italic>MixMod</italic>), <bold>glmmTMB</bold>
    (<italic>glmmTMB</italic>), <bold>gmnl</bold>, <bold>HRQoL</bold>
    (<italic>BBreg</italic>, <italic>BBmm</italic>), <bold>lfe</bold>
    (<italic>felm</italic>), <bold>lme4</bold> (<italic>lmer, glmer,
    nlmer, glmer.nb</italic>), <bold>MASS</bold> (<italic>glmmPQL,
    polr</italic>), <bold>mgcv</bold> (<italic>gam, gamm</italic>),
    <bold>multgee</bold> (<italic>LORgee</italic>), <bold>nnet</bold>
    (<italic>multinom</italic>), <bold>nlme</bold> (<italic>lme,
    gls</italic>), <bold>ordinal</bold> (<italic>clm, clm2,
    clmm</italic>), <bold>panelr</bold> (<italic>wbm</italic>),
    <bold>plm</bold>, <bold>pscl</bold> (<italic>zeroinf,
    hurdle</italic>), <bold>quantreg</bold> (<italic>rq, crq,
    rqss</italic>), <bold>rms</bold> (<italic>lsr, ols, psm</italic>),
    <bold>robust</bold> (<italic>glmRob, lmRob</italic>),
    <bold>robustbase</bold> (<italic>glmrob, lmrob</italic>),
    <bold>robustlmm</bold> (<italic>rlmer</italic>),
    <bold>rstanarm</bold> (<italic>stanreg, stanmvreg</italic>),
    <bold>speedlm</bold> (<italic>speedlm, speedglm</italic>),
    <bold>survey</bold>, <bold>survival</bold> (<italic>coxph,
    survreg</italic>), <bold>truncreg</bold>
    (<italic>truncreg</italic>), <bold>VGAM</bold> (<italic>vgam,
    vglm</italic>), and more.</p>
  </sec>
  <sec id="licensing-and-package-access">
    <title>Licensing and Package Access</title>
    <p><italic>insight</italic> is licensed under the GNU General Public
    License (v3.0), with all source code stored at GitHub
    (https://github.com/easystats/insight), with a corresponding issue
    tracker for bug-reporting and feature enhancements. In the spirit of
    open science and research, we encourage interaction with our package
    through requests/tips for fixes, support for additional model
    objects, feature updates, as well as general questions and concerns
    via direct interaction with contributors and developers.</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-rcore">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>R Core Team</string-name>
        </person-group>
        <source>R: A language and environment for statistical computing</source>
        <publisher-name>R Foundation for Statistical Computing</publisher-name>
        <publisher-loc>Vienna, Austria</publisher-loc>
        <year iso-8601-date="2019">2019</year>
        <uri>https://www.R-project.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-pkg_performance">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lüdecke</surname><given-names>Daniel</given-names></name>
          <name><surname>Makowski</surname><given-names>Dominique</given-names></name>
          <name><surname>Waggoner</surname><given-names>Philip</given-names></name>
        </person-group>
        <article-title>performance: Assessment of regression models performance</article-title>
        <source>CRAN</source>
        <year iso-8601-date="2019">2019</year>
        <uri>https://easystats.github.io/performance/</uri>
      </element-citation>
    </ref>
    <ref id="ref-pkg_sjPlot">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lüdecke</surname><given-names>Daniel</given-names></name>
        </person-group>
        <article-title>sjPlot: Data visualization for statistics in social science</article-title>
        <source>CRAN</source>
        <year iso-8601-date="2019">2019</year>
        <uri>https://CRAN.R-project.org/package=sjPlot</uri>
        <pub-id pub-id-type="doi">10.5281/zenodo.1308157</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-pkg_bayestestR">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Makowski</surname><given-names>Dominique</given-names></name>
          <name><surname>Ben-Shachar</surname><given-names>Mattan S.</given-names></name>
          <name><surname>Lüdecke</surname><given-names>Daniel</given-names></name>
        </person-group>
        <article-title>Understand and describe bayesian models and posterior distributions using bayestestR</article-title>
        <source>CRAN</source>
        <year iso-8601-date="2019">2019</year>
        <uri>https://github.com/easystats/bayestestR</uri>
        <pub-id pub-id-type="doi">10.5281/zenodo.2556486</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ludecke_ggeffects_2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lüdecke</surname><given-names>Daniel</given-names></name>
        </person-group>
        <article-title>ggeffects: Tidy data frames of marginal effects from regression models</article-title>
        <source>Journal of Open Source Software</source>
        <year iso-8601-date="2018-06">2018</year><month>06</month>
        <date-in-citation content-type="access-date"><year iso-8601-date="2019-06-05">2019</year><month>06</month><day>05</day></date-in-citation>
        <volume>3</volume>
        <issue>26</issue>
        <issn>2475-9066</issn>
        <uri>http://joss.theoj.org/papers/10.21105/joss.00772</uri>
        <pub-id pub-id-type="doi">10.21105/joss.00772</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1831</article-id>
<article-id pub-id-type="doi">10.21105/joss.01831</article-id>
<title-group>
<article-title>BioSimSpace: An interoperable Python framework for
biomolecular simulation</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5624-0500</contrib-id>
<string-name>Lester O. Hedges</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-7512-5252</contrib-id>
<string-name>Antonia S.J.S. Mey</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4090-3960</contrib-id>
<string-name>Charles A. Laughton</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4831-5039</contrib-id>
<string-name>Francesco L. Gervasio</string-name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1015-4567</contrib-id>
<string-name>Adrian J. Mulholland</string-name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6563-9903</contrib-id>
<string-name>Christopher J. Woods</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-0360-1760</contrib-id>
<string-name>Julien Michel</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Advanced Computing Research Centre, University of Bristol,
UK</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>EaStCHEM School of Chemistry, University of Edinburgh,
UK</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>School of Pharmacy, University of Nottingham,
UK</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Department of Chemistry and Institute of Structural and
Molecular Biology, University College London, UK</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Centre for Computational Chemistry, School of Chemistry,
University of Bristol, UK</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>4</volume>
<issue>43</issue>
<fpage>1831</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>biomolecular-simulation</kwd>
<kwd>computational-chemistry</kwd>
<kwd>computational-physics</kwd>
<kwd>computational-biology</kwd>
<kwd>interoperability</kwd>
<kwd>molecular dynamics</kwd>
<kwd>reproducibility</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Biomolecular simulation is a diverse and growing area of research,
  making important contributions to structural biology and
  pharmaceutical research
  (<xref alt="Huggins et al., 2019" rid="ref-ref-CCPBioSimWIRES" ref-type="bibr">Huggins
  et al., 2019</xref>). Within the community there are a several
  significant and widely used software packages that have evolved from
  within various research groups over the past 20 or more years. For
  example, the molecular dynamics packages
  <ext-link ext-link-type="uri" xlink:href="http://ambermd.org">AMBER</ext-link>
  (<xref alt="Case et al., 2005" rid="ref-ref-AMBER" ref-type="bibr">Case
  et al., 2005</xref>),
  <ext-link ext-link-type="uri" xlink:href="http://www.gromacs.org">GROMACS</ext-link>
  (<xref alt="Abraham et al., 2015" rid="ref-ref-GROMACS" ref-type="bibr">Abraham
  et al., 2015</xref>), and
  <ext-link ext-link-type="uri" xlink:href="https://www.ks.uiuc.edu/Research/namd">NAMD</ext-link>
  (<xref alt="Phillips et al., 2005" rid="ref-ref-NAMD" ref-type="bibr">Phillips
  et al., 2005</xref>), which are all capable of running biomolecular
  simulations for systems consisting of hundreds of thousands of atoms
  and can be run on hardware ranging from laptops, to graphics
  processing units (GPUs), to the latest high-performance computing
  clusters. Since different software packages were developed
  independently, interoperability between them is poor. In large part
  this is the result of major differences in the supported file formats,
  which makes it difficult to translate the inputs and outputs of one
  program to another. As a consequence, expertise in one package doesn’t
  immediately apply to another, making it hard to share methodology and
  knowledge between different research communities, as evidenced, for
  instance, by a recent study on reproducibility of relative hydration
  free energies across simulation packages
  (<xref alt="Loeffler et al., 2018" rid="ref-ref-reprodDDG" ref-type="bibr">Loeffler
  et al., 2018</xref>). The issue is compounded by the increasing use of
  biomolecular simulations as components of larger scientific workflows
  for bioengineering or computer-aided drug design purposes. A lack of
  interoperability leads to brittle workflows, poor reproducibility, and
  lock in to specific software that hinders dissemination of
  biomolecular simulation methodologies to other communities.</p>
  <p>Several existing software packages attempt to address this problem:
  <ext-link ext-link-type="uri" xlink:href="https://github.com/shirtsgroup/InterMol">InterMol</ext-link>
  (<xref alt="Shirts et al., 2016" rid="ref-ref-INTERMOL" ref-type="bibr">Shirts
  et al., 2016</xref>) and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/ParmEd/ParmEd">ParmEd</ext-link>
  (<xref alt="Swails, Jason, 2010" rid="ref-ref-PARMED" ref-type="bibr">Swails,
  Jason, 2010</xref>) can be used to read and write a wide variety of
  common molecular file formats;
  <ext-link ext-link-type="uri" xlink:href="https://www.ccpn.ac.uk/v2-software/software/ACPYPE-folder">ACPYPE</ext-link>
  (<xref alt="Sousa da Silva &amp; Vranken, 2012" rid="ref-ref-ACPYPE" ref-type="bibr">Sousa
  da Silva &amp; Vranken, 2012</xref>) can generate small molecule
  topologies and parameters for a variety of molecular dynamics engines;
  <ext-link ext-link-type="uri" xlink:href="http://mdtraj.org">MDTraj</ext-link>
  (<xref alt="McGibbon et al., 2015" rid="ref-ref-MDTRAJ" ref-type="bibr">McGibbon
  et al., 2015</xref>) and
  <ext-link ext-link-type="uri" xlink:href="https://www.mdanalysis.org">MDAnalysis</ext-link>
  (<xref alt="Gowers et al., 2016" rid="ref-ref-MDANALYSIS" ref-type="bibr">Gowers
  et al., 2016</xref>) support reading, writing, and analysis of
  different molecular trajectory formats; the
  <ext-link ext-link-type="uri" xlink:href="https://wiki.fysik.dtu.dk/ase">Atomic
  Simulation Engine</ext-link> (ASE) handles a wide variety of atomistic
  simulation tasks and provides interfaces to a range of external
  packages; and the
  <ext-link ext-link-type="uri" xlink:href="http://cuby4.molecular.cz">Cuby</ext-link>
  (<xref alt="Řezáč, 2016" rid="ref-ref-CUBY" ref-type="bibr">Řezáč,
  2016</xref>) framework allows access to a range of computational
  chemistry functionality from external packages, which can be combined
  into complex workflows through structured input files. Despite their
  utility, the above packages either have a restricted domain of
  application, e.g. trajectory files, or require different configuration
  options or scripts to interface with different external packages. It
  is not possible to write a <italic>single</italic> script that is
  <italic>independent</italic> of the underlying software packages
  installed on the host system.</p>
  <p>Within the Collaborative Computational Project for Biomolecular
  Simulation
  (<ext-link ext-link-type="uri" xlink:href="http://www.ccpbiosim.ac.uk">CCPBioSim</ext-link>),
  we have attempted to solve this problem via the introduction of an
  interoperable framework,
  <ext-link ext-link-type="uri" xlink:href="https://biosimspace.org">BioSimSpace</ext-link>,
  that collects together the core functionality of many packages and
  exposes it through a simple Python API. By not choosing to reinvent
  the wheel, we can take advantage of all the exsting software within
  the community, and can easily plug into new software packages as they
  appear. Our software can convert between many common molecular file
  formats and automatically find packages available within the
  environment on which it is run. This allows the user to write portable
  workflow components that can be run with different input, on different
  environments, and in completely different ways, e.g. from the
  command-line, or within a
  <ext-link ext-link-type="uri" xlink:href="https://jupyter.org">Jupyter</ext-link>
  notebook running on a cloud server. BioSimSpace builds on ideas
  explored previously by CCPBioSim during the development of the
  alchemical free energy calculations software
  <ext-link ext-link-type="uri" xlink:href="https://github.com/CCPBioSim/fesetup">FESetup</ext-link>
  (<xref alt="Loeffler et al., 2015" rid="ref-ref-FESetup" ref-type="bibr">Loeffler
  et al., 2015</xref>) that provides consistent setup of input files for
  several simulation engines.</p>
</sec>
<sec id="molecular-dynamics">
  <title>Molecular dynamics</title>
  <p>One of the core features of BioSimSpace is the ability to set up
  and run molecular dynamics (MD) simulations. There are a large number
  of packages that can run MD for biomolecules and BioSimSpace supports
  several of these: AMBER, GROMACS, and NAMD. BioSimSpace also comes
  with a bundled MD engine,
  <ext-link ext-link-type="uri" xlink:href="https://siremol.org/tutorials/somd">SOMD</ext-link>,
  which interfaces with the
  <ext-link ext-link-type="uri" xlink:href="http://openmm.org">OpenMM</ext-link>
  (<xref alt="Eastman, 2017" rid="ref-ref-OPENMM" ref-type="bibr">Eastman,
  2017</xref>) toolkit to provide GPU acceleration. This means that
  there is always a fall back in case no other MD engines are
  installed.</p>
  <p>While, broadly speaking, the different MD engines offer a similar
  range of features, their interfaces are quite different. At the heart
  of this problem is the incompatibility between the molecular file
  formats used by the different packages. While they all contain the
  same information, i.e. how atoms are laid out in space and how they
  interact with each other, the structure of the files is very
  different. In order to provide interoperability betwen packages we
  need to be able to read and write many different file formats, and be
  able to interconvert between them too.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <sec id="parsers">
    <title>Parsers</title>
    <p>At its core, BioSimSpace is built around a powerful set of file
    parsers which allow reading and writing of a wide range of molecular
    file formats. File input/output is provided via the
    <monospace>BioSimSpace.IO</monospace> package using parsers from the
    <ext-link ext-link-type="uri" xlink:href="http://siremol.org">Sire</ext-link>
    (<xref alt="Woods, Christopher J., 2013" rid="ref-ref-SIRE" ref-type="bibr">Woods,
    Christopher J., 2013</xref>) molecular simulation framework, on top
    of which BioSimSpace is built. Unlike many other programs, we take
    the approach that it is the <italic>contents</italic> of the file
    that defines it format, not the <italic>extension</italic>. As such,
    we attempt to parse a file with all of our parsers in parallel. Any
    parser for which the contents of the file is incompatible will be
    rejected early, with the eventual format of the file determined by
    the parser that completed without error.</p>
    <p>Typically, the information needed to construct a molecular system
    is split across multiple files, e.g. a <italic>coordinate</italic>
    file containing the atomic coordinates, and a
    <italic>topology</italic> file that describes how the atoms within
    each molecule are bonded together, along with parameters for the
    potential of the molecular model. To handle this, each of our
    parsers are assigned as being able to <italic>lead</italic>, or
    <italic>follow</italic>, or both. Lead parsers are able to
    initialise a molecular system (typically by constructing the
    topology), whereas those that follow can add additional information
    to an existing molecular system. Lead parsers may also be able to
    follow, such that when multiple lead parsers are associated with a
    set of files then the one that ultimately leads will be determined
    by which lead parser is unable to follow. This approach allows us to
    easily parse molecular information from multiple files, even if
    those formats aren’t typically associated with each other. As long
    as the molecular topology corresponding to the information in the
    files is consistent, then they can be read. For instance, one can
    initialise a system by reading an AMBER format topology, and obtain
    the coordinates of the system from a
    <ext-link ext-link-type="uri" xlink:href="https://www.rcsb.org">Protein
    Data Bank</ext-link> (PDB) file.</p>
    <p>As files are parsed, records in those files are assigned to a set
    of <italic>properties</italic> that are associated with molecules in
    the system, e.g. <monospace>charge</monospace>,
    <monospace>coordinates</monospace>, <monospace>element</monospace>,
    etc. While some of these properties are unique to particular
    parsers, others are shared across formats and are converted to a
    consistent set of internal units on read. Those properties which
    represent mathematical expressions are stored using Sire’s built in
    computer algebra system. On write, each parser expects molecules in
    the system to contain a specific set of properties, which are then
    extracted and converted in order to generate the appropriate records
    for the format in question. In this way, a bond record from an AMBER
    format file can be read into an internal bond expression, which
    could then be converted to the appropriate GROMACS bond record on
    write. Figure 1 shows a schematic of the file parsing process.</p>
    <fig>
      <caption><p>Files are parsed in parallel with the parser that
      successfully reads the file determining the file format. Once all
      files are parsed, a lead parser (solid red arrows) constructs the
      topology of the molecular system. Records within the file,
      e.g. representing terms in the molecular potential such as bonds,
      angles, etc., are converted into file format specific
      representations, then stored internally as properties of the
      molecule as general algebraic expressions. Parsers that follow add
      additional information to an existing system. Here the
      <monospace>AmberRst7</monospace> parser adds coordinate and
      simulation box data to the system (dashed blue arrows). The file
      format associated with the files is also stored as a property of
      the system so that it is always possible to convert back to the
      original format on write.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figures/fig1.png" xlink:title="" />
    </fig>
    <p>Another feature of our parsers is guaranteed read/write
    self-consistency. Any file that can be read can also be written, and
    vice-versa. In addition, when expected molecular information is
    missing from a file we don’t attempt to guess what it may have been.
    In this sense our parsers don’t attempt to be <italic>too</italic>
    clever, which can lead to unexpected behaviour, particularly when
    information is modified or supplemented behind the user’s back.</p>
    <p>The code below shows how to load a set of AMBER format files from
    a directory:</p>
    <code language="python">import BioSimSpace as BSS

system = BSS.IO.readMolecules(BSS.IO.glob(&quot;amber/ala/*&quot;))</code>
  </sec>
  <sec id="protocols-and-processes">
    <title>Protocols and Processes</title>
    <p>BioSimSpace simplifies the set-up and running of molecular
    simulations through an abstraction of simulation
    <italic>protocols</italic> and <italic>processes</italic>. Protocols
    define what a user wants to do to a molecular system,
    e.g. performing a <italic>minimisation</italic> to find the local
    potential energy minimum. Processes are used to apply a protocol to
    a system using a specific molecular simulation engine.</p>
    <p>The <monospace>BioSimSpace.Protocol</monospace> package provides
    a set of high-level objects for several common molecular simulation
    protocols. Each protocol offers as set of configurable options that
    are handled by all of the molecular simulation engines that we
    support. <monospace>BioSimSpace.Process</monospace> provides objects
    for configuring, running, and interacting with simulation processes
    for each of the supported engines. When a process is created by
    passing in a system and protocol, BioSimSpace automatically writes
    all of the input files required by the specific simulation engine
    and configures any command-line options required by its executable.
    Expert users of a particular engine are free to fully override any
    of the configuration options if desired.</p>
    <p>The example below shows how to configure and run a default energy
    minimisation protocol for the molecular system that was loaded
    earlier. Here we use AMBER as the MD engine:</p>
    <code language="python">protocol = BSS.Protocol.Minimisation()
process = BSS.Process.Amber(system, protocol)
process.start()</code>
  </sec>
  <sec id="interoperability">
    <title>Interoperability</title>
    <p>While it is useful to be able to configure and run simulation
    processes using specific engines, any script written in this way
    would not be portable since we can’t guarantee what software will be
    available on a different computer. To this end, the
    <monospace>BioSimSpace.MD</monospace> package provides functionality
    for automatically configuring a simulation process using
    <italic>any</italic> suitable MD engine that is installed on the
    host system. As long as the user has installed an external package
    using the default installation procedure for that package, or has
    made sure that the executable is in their shell’s path, BioSimSpace
    will find it. In the case of finding multiple MD engines,
    BioSimSpace will make a choice based on the file format of the
    system (to minimise conversions) and whether the user requests GPU
    support. As an example, the AMBER specific example in the previous
    section can be translated to an interoperable alternative as
    follows:</p>
    <code language="python">protocol = BSS.Protocol.Minimisation()
process = BSS.MD.run(system, protocol)
# By default MD.run starts the process automatically.</code>
    <p>The <monospace>BSS.MD.run</monospace> function searches the
    system for suitable packages that support the chosen protocol, then
    chooses the most appropriate one to run the simulation. For example,
    if AMBER was installed then the process returned by
    <monospace>BSS.MD.run</monospace> would be of type
    <monospace>BSS.Process.Amber</monospace>, if not then the input
    files could be converted to a different format allowing the use of a
    different process such as
    <monospace>BSS.Process.Gromacs</monospace>.</p>
  </sec>
  <sec id="robust-and-flexible-workflow-components">
    <title>Robust and flexible workflow components</title>
    <p>The building blocks described above can be used to write
    interoperable workflow components, or <italic>nodes</italic>.
    Typically, a node will perform a single, well-defined, unit of work
    with clear inputs and outputs. The
    <monospace>BioSimSpace.Gateway</monospace> package acts as a bridge
    between BioSimSpace and the outside world, allowing a user to
    construct a node and define the input and output requirements, along
    with restrictions on their types and values. As an example, the
    following code snippet shows how the minimisation example described
    above can be translated into a node.</p>
    <code language="python">import BioSimSpace as BSS

# Initialise the Node object and set metadata.
node = BSS.Gateway.Node(&quot;Minimise a molecular system and save to file.&quot;)
node.addAuthor(name=&quot;Lester Hedges&quot;,
               email=&quot;lester.hedges@bristol.ac.uk&quot;,
               affiliation=&quot;University of Bristol&quot;)
node.setLicense(&quot;GPLv3&quot;)

# Set the inputs and outputs.
node.addInput(&quot;files&quot;,
    BSS.Gateway.FileSet(help=&quot;A set of molecular input files.&quot;))
node.addInput(&quot;steps&quot;,
    BSS.Gateway.Integer(help=&quot;The number of minimisation steps.&quot;,
                        minimum=0, maximum=1000000, default=10000))
node.addOutput(&quot;minimised&quot;,
    BSS.Gateway.FileSet(help=&quot;The minimised molecular system.&quot;))

# Show the graphical user interface (GUI) to allow the user to set the inputs.
# This will only happen if running from within a Jupyter notebook.
node.showControls()

# Load the molecular system and define the a minimisation protocol using the
# user-define input.
system = BSS.IO.readMolecules(node.getInput(&quot;files&quot;))
protocol = BSS.Protocol.Minimisation(steps=node.getInput(&quot;steps&quot;))

# Execute a simulation process using any available molecular dynamics engine.
process = BSS.MD.run(system, protocol)

# Set the node output to the final configuration of the minimisation process.
# Note that the block=True to the getSystem call to ensure that the
# process finishes before getting the final configuration. (It is possible
# to query the running process in real time when running interactively.)
# Note also that the original file format of the system is preserved on write.
node.setOutput(&quot;minimised&quot;, BSS.IO.saveMolecules(&quot;minimised&quot;,
    process.getSystem(block=True), system.fileFormat()))

# Finally, validate the node to make sure that outputs are set correctly
# and no errors have been raised. If running interactively, this will
# generate a download link to a zip file containing the node outputs.
node.validate()</code>
    <p>BioSimSpace nodes are flexible in the way in which they can be
    used, with the same script working seamlessly from within a Jupyter
    notebook or on the command-line. Typically, a user would a write a
    node as a fully documented, interactive Jupyter notebook, then save
    it as a regular Python script to run from the command-line. (For
    inclusion here we simply include the Python script representation of
    the node, which could be re-converted to a notebook using, e.g.,
    <ext-link ext-link-type="uri" xlink:href="https://github.com/remykarem/python2jupyter">p2j</ext-link>.)
    Any purely interactive elements included in the node,
    e.g. visualisations and plots, are simply ignored when the script is
    run in a non-interactive mode. To facilitate this dual-use the
    <monospace>node.addInput</monospace> method generates a custom
    <ext-link ext-link-type="uri" xlink:href="https://ipywidgets.readthedocs.io/en/latest">ipywidgets</ext-link>
    based graphical user interface for interative use in Jupyter, or a
    custom
    <ext-link ext-link-type="uri" xlink:href="https://docs.python.org/3/library/argparse.html">argparse</ext-link>
    parser for handling command-line arguments. Figure 2 shows the
    example node above running within a Jupyter notebook (top) and from
    the command-line (bottom).</p>
    <fig>
      <caption><p>BioSimSpace nodes can be run within a Jupyter notebook
      (top) or from the command-line (bottom)</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figures/fig2.png" xlink:title="" />
    </fig>
    <p>When working interactively, BioSimSpace also provides
    functionality for interacting with processes while they are running.
    This allows the user to monitor the progress of a simulation and
    generate near real-time plots and visualisations.</p>
    <p>While BioSimSpace isn’t intended to be a workflow manager it does
    provide a means of chaining together nodes by passing the output of
    one node as the input to another. For example, given the following
    <ext-link ext-link-type="uri" xlink:href="https://yaml.org">YAML</ext-link>
    configuration file, <monospace>config.yaml</monospace>:</p>
    <code language="yaml">files:
- amber/ala.crd
- amber/ala.top</code>
    <p>it would be possible to run a minimisation followed by an
    equilibration as follows:</p>
    <code language="bash">python minimisation.py --config config.yaml &amp;&amp; \
python equilibration.py --config output.yaml</code>
    <p>Nodes can also be run from within BioSimSpace itself, allowing
    the user access to existing functionality as building blocks for
    more complex scripts. For example, the minimisation node can be run
    from within BioSimSpace as follows:</p>
    <code language="python"># Create a dictionary of inputs to the node.
input = {&quot;files&quot; : [&quot;amber/ala.crd&quot;, &quot;amber/ala.top&quot;], &quot;steps&quot; : 1000}

# Run the node and capture the output as a dictionary.
output = BSS.Node.run(&quot;minimisation&quot;, input)</code>
  </sec>
  <sec id="forwards-compatibility">
    <title>Forwards compatibility</title>
    <p>To ensure that BioSimSpace nodes are forwards compatible as new
    features are added all sub packages can query their own
    functionality and present this to the user. For example, calling
    <monospace>BioSimSpace.IO.fileFormats()</monospace> returns a list
    of the currently supported molecular file formats,
    <monospace>BioSimSpace.Solvent.waterModels()</monospace> returns a
    list of the supported water models, etc. These values can be passed
    as the <monospace>allowed</monospace> keyword argument when setting
    an input requirement of a node, ensuring that the node supports the
    latest functionality of the package version that is installed. The
    following code snippet shows a node that can be used to convert to
    any supported molecular file format, which will continue to work as
    additional formats are added.</p>
    <code language="python">import BioSimSpace as BSS

# Initialise the Node object and set metadata.
node = BSS.Gateway.Node(&quot;Convert between molecular file formats.&quot;)
node.addAuthor(name=&quot;Lester Hedges&quot;,
               email=&quot;lester.hedges@bristol.ac.uk&quot;,
               affiliation=&quot;University of Bristol&quot;)
node.setLicense(&quot;GPLv3&quot;)

# Set the inputs and outputs and launch the GUI.
node.addInput(&quot;files&quot;,
    BSS.Gateway.FileSet(help=&quot;A set of molecular input files.&quot;))
node.addInput(&quot;file_format&quot;,
    BSS.Gateway.String(help=&quot;The format to convert to.&quot;,
                       allowed=BSS.IO.fileFormats()))
node.addOutput(&quot;converted&quot;, BSS.Gateway.File(help=&quot;The converted file.&quot;))
node.showControls()

# Load the molecular system using the user defined input &quot;files&quot;.
system = BSS.IO.readMolecules(node.getInput(&quot;files&quot;))

# Convert the system to the chosen format and set the output.
node.setOutput(&quot;converted&quot;,
    BSS.IO.saveMolecules(&quot;converted&quot;, system, node.getInput(&quot;file_format&quot;)))

node.validate()</code>
    <p>Figure 3 shows how the
    <monospace>allowed=BSS.IO.fileFormats()</monospace> argument is
    translated into a dropdown menu for the Jupyter GUI (top), or using
    the <italic>choices</italic> option of argparse to display the
    available options on the command-line (bottom). This means that the
    script is adaptive to the support of additional file parsers in
    future without need for modification.</p>
    <fig>
      <caption><p>BioSimSpace nodes are adaptive to new functionality
      without modification.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figures/fig3.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="extensibility">
    <title>Extensibility</title>
    <p>BioSimSpace has been developed with the intention of being easily
    extensible. Adding support for a new MD engine just requires the
    creation of a new <monospace>BioSimSpace.Process</monospace> class
    and accompanying functionality to translate the high level
    <monospace>BioSimSpace.Protocol</monospace> objects into package
    specific configuration files. Similarly, it is easy to add support
    for new tools and utilities as long as they read and write to one of
    the many molecular file formats that we support. For example, as an
    alternative to our built in molecular alignment code, it was trivial
    to wrap the
    <ext-link ext-link-type="uri" xlink:href="http://strcomp.protein.osaka-u.ac.jp/kcombu/doc/README_fkcombu.html">FKCOMBU</ext-link>
    program from the
    <ext-link ext-link-type="uri" xlink:href="http://strcomp.protein.osaka-u.ac.jp/kcombu">KCOMBU</ext-link>
    (<xref alt="Kawabata, 2011" rid="ref-ref-KCOMBU" ref-type="bibr">Kawabata,
    2011</xref>) package to enable flexible alignment of molecules.
    Importantly, support for new packages doesn’t change our core API so
    that new functionality is exposed to users without breaking existing
    scripts.</p>
  </sec>
  <sec id="advanced-simulation-methods">
    <title>Advanced simulation methods</title>
    <p>As well as the basic molecular dynamics protocols described so
    far, BioSimSpace also supports several advanced biomolecular
    simulation techniques that can be deployed with modular pipelines of
    setup, run, and analysis nodes executed with best-practices
    protocols encoded in the library. Our intention is to make it easier
    to benchmark complex biomolecular simulation techniques by varying
    different setup tools, simulation engines, or analysis techniques.
    For instance, Free-Energy Perturbation (FEP)
    (<xref alt="Cournia et al., 2017" rid="ref-ref-FEP" ref-type="bibr">Cournia
    et al., 2017</xref>) functionality in BioSimSpace can currently be
    used to compute drug binding affinities with the SOMD or GROMACS
    simulation engines. By keeping all setup and analysis protocols
    identical any variability in the results can be ascribed to
    differences in the simulation engines and protocols only.
    BioSimSpace also provides support for metadynamics
    (<xref alt="Barducci et al., 2011" rid="ref-ref-METADYNAMICS" ref-type="bibr">Barducci
    et al., 2011</xref>) simulations using
    <ext-link ext-link-type="uri" xlink:href="https://www.plumed.org">PLUMED</ext-link>
    (<xref alt="Tribello et al., 2014" rid="ref-ref-PLUMED" ref-type="bibr">Tribello
    et al., 2014</xref>) and GROMACS. The application of BioSimSpace FEP
    and metadynamics workflows to proteins of pharmaceutical interest
    will be reported elsewhere in due course.</p>
  </sec>
  <sec id="ease-of-use">
    <title>Ease of use</title>
    <p>BioSimSpace is avaiable to install from
    <ext-link ext-link-type="uri" xlink:href="https://github.com/michellab/BioSimSpace">source</ext-link>,
    as a binary, and as a
    <ext-link ext-link-type="uri" xlink:href="https://anaconda.org/michellab/biosimspace">conda
    package</ext-link>, all of which are continually built and deployed
    as part of our
    <ext-link ext-link-type="uri" xlink:href="https://dev.azure.com/michellab/BioSimSpace">developent
    pipeline</ext-link>. This means that it is easy for users to keep up
    to date with the latest features, without having to wait for a new
    release. In addition, access to BioSimSpace is always available
    through our
    <ext-link ext-link-type="uri" xlink:href="https://notebook.biosimspace.org">notebook
    server</ext-link>, where users are free to work through tutorials
    and workshop material and make use of our existing repository of
    nodes.</p>
  </sec>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>BioSimSpace is the flagship software project of CCPBioSim and was
  funded through an EPSRC Flagship Software grant:
  <ext-link ext-link-type="uri" xlink:href="https://gow.epsrc.ukri.org/NGBOViewGrant.aspx?GrantRef=EP/P022138/1">EP/P022138/1</ext-link>.
  CJW is funded by an EPSRC Research Software Engineering Fellowship:
  <ext-link ext-link-type="uri" xlink:href="https://gow.epsrc.ukri.org/NGBOViewGrant.aspx?GrantRef=EP/N018591/1">EP/N018591/1</ext-link>.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-ref-AMBER">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Case</surname><given-names>David A.</given-names></name>
          <name><surname>Cheatham III</surname><given-names>Thomas E.</given-names></name>
          <name><surname>Darden</surname><given-names>Tom</given-names></name>
          <name><surname>Gohlke</surname><given-names>Holger</given-names></name>
          <name><surname>Luo</surname><given-names>Ray</given-names></name>
          <name><surname>Merz Jr.</surname><given-names>Kenneth M.</given-names></name>
          <name><surname>Onufriev</surname><given-names>Alexey</given-names></name>
          <name><surname>Simmerling</surname><given-names>Carlos</given-names></name>
          <name><surname>Wang</surname><given-names>Bing</given-names></name>
          <name><surname>Woods</surname><given-names>Robert J.</given-names></name>
        </person-group>
        <article-title>The amber biomolecular simulation programs</article-title>
        <source>Journal of Computational Chemistry</source>
        <year iso-8601-date="2005">2005</year>
        <volume>26</volume>
        <issue>16</issue>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.20290</uri>
        <pub-id pub-id-type="doi">10.1002/jcc.20290</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-GROMACS">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Abraham</surname><given-names>Mark James</given-names></name>
          <name><surname>Murtola</surname><given-names>Teemu</given-names></name>
          <name><surname>Schulz</surname><given-names>Roland</given-names></name>
          <name><surname>Páll</surname><given-names>Szilárd</given-names></name>
          <name><surname>Smith</surname><given-names>Jeremy C.</given-names></name>
          <name><surname>Hess</surname><given-names>Berk</given-names></name>
          <name><surname>Lindahl</surname><given-names>Erik</given-names></name>
        </person-group>
        <article-title>GROMACS: High performance molecular simulations through multi-level parallelism from laptops to supercomputers</article-title>
        <source>SoftwareX</source>
        <year iso-8601-date="2015">2015</year>
        <volume>1-2</volume>
        <issn>2352-7110</issn>
        <uri>http://www.sciencedirect.com/science/article/pii/S2352711015000059</uri>
        <pub-id pub-id-type="doi">https://doi.org/10.1016/j.softx.2015.06.001</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-NAMD">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Phillips</surname><given-names>James C.</given-names></name>
          <name><surname>Braun</surname><given-names>Rosemary</given-names></name>
          <name><surname>Wang</surname><given-names>Wei</given-names></name>
          <name><surname>Gumbart</surname><given-names>James</given-names></name>
          <name><surname>Tajkhorshid</surname><given-names>Emad</given-names></name>
          <name><surname>Villa</surname><given-names>Elizabeth</given-names></name>
          <name><surname>Chipot</surname><given-names>Christophe</given-names></name>
          <name><surname>Skeel</surname><given-names>Robert D.</given-names></name>
          <name><surname>Kalé</surname><given-names>Laxmikant</given-names></name>
          <name><surname>Schulten</surname><given-names>Klaus</given-names></name>
        </person-group>
        <article-title>Scalable molecular dynamics with NAMD</article-title>
        <source>Journal of Computational Chemistry</source>
        <year iso-8601-date="2005">2005</year>
        <volume>26</volume>
        <issue>16</issue>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.20289</uri>
        <pub-id pub-id-type="doi">10.1002/jcc.20289</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-OPENMM">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Eastman</surname><given-names>Jason AND Chodera</given-names><suffix>Peter AND Swails</suffix></name>
        </person-group>
        <article-title>OpenMM 7: Rapid development of high performance algorithms for molecular dynamics</article-title>
        <source>PLOS Computational Biology</source>
        <publisher-name>Public Library of Science</publisher-name>
        <year iso-8601-date="2017-07">2017</year><month>07</month>
        <volume>13</volume>
        <issue>7</issue>
        <uri>https://doi.org/10.1371/journal.pcbi.1005659</uri>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005659</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-SIRE">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>Woods, Christopher J.</string-name>
        </person-group>
        <article-title>Sire: An advanced, multiscale, molecular simulation framework</article-title>
        <publisher-name>http://siremol.org</publisher-name>
        <year iso-8601-date="2013">2013</year>
      </element-citation>
    </ref>
    <ref id="ref-ref-INTERMOL">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Shirts</surname><given-names>Michael R</given-names></name>
          <name><surname>Klein</surname><given-names>Christoph</given-names></name>
          <name><surname>Swails</surname><given-names>Jason M</given-names></name>
          <name><surname>Yin</surname><given-names>Jian</given-names></name>
          <name><surname>Gilson</surname><given-names>Michael K</given-names></name>
          <name><surname>Mobley</surname><given-names>David L</given-names></name>
          <name><surname>Case</surname><given-names>David A</given-names></name>
          <name><surname>Zhong</surname><given-names>Ellen D</given-names></name>
        </person-group>
        <article-title>Lessons learned from comparing molecular dynamics engines on the SAMPL5 dataset</article-title>
        <source>Journal of computer-aided molecular design</source>
        <publisher-name>Springer International Publishing</publisher-name>
        <year iso-8601-date="2016">2016</year>
        <pub-id pub-id-type="doi">doi:10.1007/s10822-016-9977-1</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-MDANALYSIS">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Gowers</surname></name>
          <name><surname>Linke</surname></name>
          <name><surname>Barnoud</surname></name>
          <name><surname>Reddy</surname></name>
          <name><surname>Melo</surname></name>
          <name><surname>Seyler</surname></name>
          <name><surname>Domański</surname></name>
          <name><surname>Dotson</surname></name>
          <name><surname>Buchoux</surname></name>
          <name><surname>Kenney</surname></name>
          <name><surname>Beckstein</surname></name>
        </person-group>
        <article-title>MDAnalysis: A Python Package for the Rapid Analysis of Molecular Dynamics Simulations</article-title>
        <source>Proceedings of the 15th Python in Science Conference</source>
        <person-group person-group-type="editor">
          <name><surname>Benthall</surname></name>
          <name><surname>Rostrup</surname></name>
        </person-group>
        <year iso-8601-date="2016">2016</year>
        <pub-id pub-id-type="doi"> 10.25080/Majora-629e541a-00e </pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-CUBY">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Řezáč</surname><given-names>Jan</given-names></name>
        </person-group>
        <article-title>Cuby: An integrative framework for computational chemistry</article-title>
        <source>Journal of Computational Chemistry</source>
        <year iso-8601-date="2016">2016</year>
        <volume>37</volume>
        <issue>13</issue>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/jcc.24312</uri>
        <pub-id pub-id-type="doi">10.1002/jcc.24312</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-CCPBioSimWIRES">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Huggins</surname><given-names>David J.</given-names></name>
          <name><surname>Biggin</surname><given-names>Philip C.</given-names></name>
          <name><surname>Dämgen</surname><given-names>Marc A.</given-names></name>
          <name><surname>Essex</surname><given-names>Jonathan W.</given-names></name>
          <name><surname>Harris</surname><given-names>Sarah A.</given-names></name>
          <name><surname>Henchman</surname><given-names>Richard H.</given-names></name>
          <name><surname>Khalid</surname><given-names>Syma</given-names></name>
          <name><surname>Kuzmanic</surname><given-names>Antonija</given-names></name>
          <name><surname>Laughton</surname><given-names>Charles A.</given-names></name>
          <name><surname>Michel</surname><given-names>Julien</given-names></name>
          <name><surname>Mulholland</surname><given-names>Adrian J.</given-names></name>
          <name><surname>Rosta</surname><given-names>Edina</given-names></name>
          <name><surname>Sansom</surname><given-names>Mark S. P.</given-names></name>
          <name><surname>Kamp</surname><given-names>Marc W. van der</given-names></name>
        </person-group>
        <article-title>Biomolecular simulations: From dynamics and mechanisms to computational assays of biological activity</article-title>
        <source>Wiley Interdisciplinary Reviews: Computational Molecular Science</source>
        <year iso-8601-date="2019">2019</year>
        <volume>9</volume>
        <issue>3</issue>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/wcms.1393</uri>
        <pub-id pub-id-type="doi">10.1002/wcms.1393</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-FESetup">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Loeffler</surname><given-names>Hannes H.</given-names></name>
          <name><surname>Michel</surname><given-names>Julien</given-names></name>
          <name><surname>Woods</surname><given-names>Christopher J.</given-names></name>
        </person-group>
        <article-title>FESetup: Automating setup for alchemical free energy simulations</article-title>
        <source>Journal of Chemical Information and Modeling</source>
        <year iso-8601-date="2015">2015</year>
        <volume>55</volume>
        <issue>12</issue>
        <uri>https://doi.org/10.1021/acs.jcim.5b00368</uri>
        <pub-id pub-id-type="doi">10.1021/acs.jcim.5b00368</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-reprodDDG">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Loeffler</surname><given-names>Hannes H.</given-names></name>
          <name><surname>Bosisio</surname><given-names>Stefano</given-names></name>
          <name><surname>Duarte Ramos Matos</surname><given-names>Guilherme</given-names></name>
          <name><surname>Suh</surname><given-names>Donghyuk</given-names></name>
          <name><surname>Roux</surname><given-names>Benoit</given-names></name>
          <name><surname>Mobley</surname><given-names>David L.</given-names></name>
          <name><surname>Michel</surname><given-names>Julien</given-names></name>
        </person-group>
        <article-title>Reproducibility of free energy calculations across different molecular simulation software packages</article-title>
        <source>Journal of Chemical Theory and Computation</source>
        <year iso-8601-date="2018">2018</year>
        <volume>14</volume>
        <issue>11</issue>
        <uri>https://doi.org/10.1021/acs.jctc.8b00544</uri>
        <pub-id pub-id-type="doi">10.1021/acs.jctc.8b00544</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-MDTRAJ">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>McGibbon</surname><given-names>Robert T.</given-names></name>
          <name><surname>Beauchamp</surname><given-names>Kyle A.</given-names></name>
          <name><surname>Harrigan</surname><given-names>Matthew P.</given-names></name>
          <name><surname>Klein</surname><given-names>Christoph</given-names></name>
          <name><surname>Swails</surname><given-names>Jason M.</given-names></name>
          <name><surname>Hernández</surname><given-names>Carlos X.</given-names></name>
          <name><surname>Schwantes</surname><given-names>Christian R.</given-names></name>
          <name><surname>Wang</surname><given-names>Lee-Ping</given-names></name>
          <name><surname>Lane</surname><given-names>Thomas J.</given-names></name>
          <name><surname>Pande</surname><given-names>Vijay S.</given-names></name>
        </person-group>
        <article-title>MDTraj: A modern open library for the analysis of molecular dynamics trajectories</article-title>
        <source>Biophysical Journal</source>
        <year iso-8601-date="2015">2015</year>
        <volume>109</volume>
        <issue>8</issue>
        <pub-id pub-id-type="doi">10.1016/j.bpj.2015.08.015</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-PARMED">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>Swails, Jason</string-name>
        </person-group>
        <article-title>ParmEd: Cross-program parameter and topology file editor and molecular mechanical simulator engine</article-title>
        <publisher-name>https://github.com/ParmEd/ParmEd</publisher-name>
        <year iso-8601-date="2010">2010</year>
      </element-citation>
    </ref>
    <ref id="ref-ref-ACPYPE">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Sousa da Silva</surname><given-names>Alan W.</given-names></name>
          <name><surname>Vranken</surname><given-names>Wim F.</given-names></name>
        </person-group>
        <article-title>ACPYPE - AnteChamber PYthon parser interfacE</article-title>
        <source>BMC research notes</source>
        <publisher-name>BioMed Central</publisher-name>
        <year iso-8601-date="2012-07-23">2012</year><month>07</month><day>23</day>
        <volume>5</volume>
        <issn>1756-0500</issn>
        <uri>https://www.ncbi.nlm.nih.gov/pubmed/22824207</uri>
        <pub-id pub-id-type="doi">10.1186/1756-0500-5-367</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-KCOMBU">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kawabata</surname><given-names>Takeshi</given-names></name>
        </person-group>
        <article-title>Build-up algorithm for atomic correspondence between chemical structures</article-title>
        <source>Journal of Chemical Information and Modeling</source>
        <year iso-8601-date="2011">2011</year>
        <volume>51</volume>
        <issue>8</issue>
        <uri>https://doi.org/10.1021/ci2001023</uri>
        <pub-id pub-id-type="doi">10.1021/ci2001023</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-FEP">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Cournia</surname><given-names>Zoe</given-names></name>
          <name><surname>Allen</surname><given-names>Bryce</given-names></name>
          <name><surname>Sherman</surname><given-names>Woody</given-names></name>
        </person-group>
        <article-title>Relative binding free energy calculations in drug discovery: Recent advances and practical considerations</article-title>
        <source>Journal of Chemical Information and Modeling</source>
        <year iso-8601-date="2017">2017</year>
        <volume>57</volume>
        <issue>12</issue>
        <uri>https://doi.org/10.1021/acs.jcim.7b00564</uri>
        <pub-id pub-id-type="doi">10.1021/acs.jcim.7b00564</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-METADYNAMICS">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Barducci</surname><given-names>Alessandro</given-names></name>
          <name><surname>Bonomi</surname><given-names>Massimiliano</given-names></name>
          <name><surname>Parrinello</surname><given-names>Michele</given-names></name>
        </person-group>
        <article-title>Metadynamics</article-title>
        <source>Wiley Interdisciplinary Reviews: Computational Molecular Science</source>
        <year iso-8601-date="2011">2011</year>
        <volume>1</volume>
        <issue>5</issue>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/wcms.31</uri>
        <pub-id pub-id-type="doi">10.1002/wcms.31</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ref-PLUMED">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Tribello</surname><given-names>Gareth A.</given-names></name>
          <name><surname>Bonomi</surname><given-names>Massimiliano</given-names></name>
          <name><surname>Branduardi</surname><given-names>Davide</given-names></name>
          <name><surname>Camilloni</surname><given-names>Carlo</given-names></name>
          <name><surname>Bussi</surname><given-names>Giovanni</given-names></name>
        </person-group>
        <article-title>PLUMED 2: New feathers for an old bird</article-title>
        <source>Computer Physics Communications</source>
        <year iso-8601-date="2014">2014</year>
        <volume>185</volume>
        <issue>2</issue>
        <issn>0010-4655</issn>
        <uri>http://www.sciencedirect.com/science/article/pii/S0010465513003196</uri>
        <pub-id pub-id-type="doi">https://doi.org/10.1016/j.cpc.2013.09.018</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2598</article-id>
<article-id pub-id-type="doi">10.21105/joss.02598</article-id>
<title-group>
<article-title>set6: R6 Mathematical Sets Interface</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9225-4654</contrib-id>
<string-name>Raphael Sonabend</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Franz J. Kiraly</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Statistical Science, University College
London</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-03-23">
<day>23</day>
<month>3</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>55</issue>
<fpage>2598</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>statistics</kwd>
<kwd>sets</kwd>
<kwd>object-oriented</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>set6</monospace> makes use of the R6 object-oriented
  paradigm to introduce classes for important mathematical objects,
  including sets, tuples, and intervals (finite and infinite). Until
  now, the <monospace>R</monospace>
  (<xref alt="R Core Team, 2017" rid="ref-packageR" ref-type="bibr">R
  Core Team, 2017</xref>) programming language has traditionally
  supported mathematical sets in one of two ways: 1. via the five set
  operation functions: <monospace>union</monospace>,
  <monospace>intersect</monospace>, <monospace>setdiff</monospace>,
  <monospace>setequal</monospace>, <monospace>is.element</monospace>;
  and 2. via the <monospace>sets</monospace>
  (<xref alt="Meyer &amp; Hornik, 2009" rid="ref-pkgsets" ref-type="bibr">Meyer
  &amp; Hornik, 2009</xref>) package. <monospace>set6</monospace> uses
  <monospace>R6</monospace>
  (<xref alt="Chang, 2018" rid="ref-packageR6" ref-type="bibr">Chang,
  2018</xref>) and has a clear class interface with minimal
  dependencies, which makes it the perfect dependency for any package
  that requires mathematical data types as R6 objects. Making use of
  design patterns
  (<xref alt="Gamma et al., 1996" rid="ref-Gamma1996" ref-type="bibr">Gamma
  et al., 1996</xref>), such as wrappers and compositors,
  <monospace>set6</monospace> allows for symbolic representation of sets
  to ensure maximum efficiency, and to provide neat and clear print
  methods.</p>
  <p><monospace>set6</monospace> is currently being used in
  <monospace>distr6</monospace>
  (<xref alt="Sonabend &amp; Kiraly, 2019" rid="ref-packagedistr6" ref-type="bibr">Sonabend
  &amp; Kiraly, 2019</xref>), which is an object-oriented probability
  distributions interface, that makes use of <monospace>set6</monospace>
  for distribution and parameter support. Additional uses of
  <monospace>set6</monospace> include representing infinite sets, and
  constructing assertions.</p>
  <p>The speed and efficiency of <monospace>R6</monospace> and
  <monospace>Rcpp</monospace>
  (<xref alt="Eddelbuettel &amp; Francois, 2011" rid="ref-pkgrcpp" ref-type="bibr">Eddelbuettel
  &amp; Francois, 2011</xref>) allows <monospace>set6</monospace> to be
  a scalable and efficient interface. A focus on symbolic representation
  and neat printing methods means that <monospace>set6</monospace> can
  accurately and clearly represent complicated sets.
  <monospace>set6</monospace> has the ambitious long-term goal of being
  the only dependency package needed for object-oriented interfaces in
  <monospace>R</monospace> that require clear symbolic representations
  of mathematical sets.</p>
  <p>Related software in <monospace>R</monospace> includes
  <monospace>sets</monospace>
  (<xref alt="Meyer &amp; Hornik, 2009" rid="ref-pkgsets" ref-type="bibr">Meyer
  &amp; Hornik, 2009</xref>), which uses the S3 and S4 object-oriented
  paradigms to implement mathematical sets. Whilst
  <monospace>sets</monospace> and <monospace>set6</monospace> have
  similar implemented features, as both offer multiple forms of sets
  (intervals, fuzzy, etc.) and with symbolic representation, the
  <monospace>sets</monospace> package does not offer lazy evaluation in
  set operations, which leads to significant overheads for large or
  possibly-infinite sets. Similar packages in other computing languages
  include: i) <monospace>portion</monospace>
  (<xref alt="Decan, 2020" rid="ref-pkgportion" ref-type="bibr">Decan,
  2020</xref>) in Python, which only supports intervals without
  generalisation to other mathematical sets; ii)
  <monospace>IntervalSets.jl</monospace>
  (<xref alt="Navelkar, 2016" rid="ref-pkgintervalsets" ref-type="bibr">Navelkar,
  2016</xref>) in Julia, which is again limited to intervals though with
  good features for infix operators and inspection; iii) a variety of
  packages in the <monospace>JuliaIntervals</monospace> suite
  (https://juliapackages.com/u/juliaintervals), which primarily focus on
  rigorous arithmetic implementation; and iv)
  <monospace>LazySets.jl</monospace>
  (<xref alt="Forets &amp; Schilling, 2018" rid="ref-pkglazysets" ref-type="bibr">Forets
  &amp; Schilling, 2018</xref>) and <monospace>DomainSets.jl</monospace>
  (<xref alt="Huybrechs, 2018" rid="ref-pkgdomainsets" ref-type="bibr">Huybrechs,
  2018</xref>) which both faciliate symbolic representation of sets and
  infinite intervals in Julia.</p>
  <p>The example below demonstrates construction of a set and interval,
  comparisons of these, the set complement operator, and printing of the
  final result. Note the example does not use unicode printing but that
  this is possible within the package.</p>
  <code language="r script">&gt; a &lt;- Set$new(1, 2, 3)
&gt; a$print()
{1, 2, 3}
&gt; a$contains(c(1, &quot;a&quot;))
[1] TRUE FALSE
&gt; b &lt;- Interval$new(1, Inf, class = &quot;numeric&quot;)
&gt; b$isSubset(a)
TRUE
&gt; c &lt;- b - a
&gt; c$print()
(1,2) U (2,3) U (3,+Inf] </code>
</sec>
<sec id="key-design-principles">
  <title>Key Design Principles</title>
  <list list-type="order">
    <list-item>
      <p><bold>Maximum user-control over set operations</bold> - Users
      can select how operations act on sets, including a choice of
      associativity, lazy evaluation, and unicode printing.</p>
    </list-item>
    <list-item>
      <p><bold>Minimal dependencies</bold> - <monospace>set6</monospace>
      has the goal of being a key dependency to any object-oriented
      package requiring representation of mathematical sets, for example
      for representing function inputs and supports. Therefore
      <monospace>set6</monospace> is itself dependent on only three
      packages.</p>
    </list-item>
    <list-item>
      <p><bold>Inspectability and reactive user interface</bold> -
      <monospace>set6</monospace> prioritises symbolic representation
      and lazy evaluation to allow for the package to be scalable and to
      fit into any other package. However it is ensured that this does
      not detract from a clear user interface, i.e. at all times it
      should be clear what an object contains both externally (how it
      prints) and internally (inspection methods).
      <monospace>set6</monospace> allows sets to be queried in many
      different ways, including calling the elements in the set (if
      finite), finding the bounds of the set (if numeric), and listing
      properties and traits.</p>
    </list-item>
  </list>
  <code language="r script"># Symbolic representation allows neat representation of infinite sets
# and intervals whilst making the elements clear by inspection

&gt; I &lt;- Interval$new(10, Inf, type = &quot;[)&quot;)
&gt; I$print()
[10,Inf)
&gt; I$contains(9:11)
[1] FALSE TRUE TRUE
 
&gt; n &lt;- Naturals$new()
&gt; n$print()
N0
# binary operators also available
&gt; c(pi, 2) %inset% n
[1] FALSE TRUE
 </code>
  <list list-type="order">
    <list-item>
      <label>4.</label>
      <p><bold>Combination of lazy and greedy evaluation</bold> - By
      default, ‘multiplying’ operations such as products and powersets
      are evaluated lazily, whereas ‘adding’ operations such as unions
      and differences are evaluated greedily. These prevent system
      crashes from trying to evaluate sets of very large cardinality. In
      all cases, the user can override defaults. Symbolic representation
      is used with lazy evaluation so that large sets can be printed
      neatly without the individual elements ever being evaluated.</p>
    </list-item>
  </list>
  <code language="r script"># Lazy evaluation allows very large sets to be queried without
# explicit evaluation

&gt; s &lt;- Set$new(1, 2, 3)
&gt; p &lt;- powerset(powerset(powerset(s)))
&gt; p$print()
2^2^2^{1, 2, 3}
&gt; p$properties$cardinality
[1] 1.157921e+77
&gt; p$contains(Set$new(Set$new(Set$new(1), Set$new(1, 2, 3))))
[1] TRUE</code>
</sec>
<sec id="key-use-cases">
  <title>Key Use-Cases</title>
  <list list-type="order">
    <list-item>
      <p><bold>Constructing and querying mathematical sets</bold> - Many
      mathematical Set-like objects can be constructed, including sets,
      tuples, intervals, and fuzzy variants. Sets can contain objects of
      any <monospace>R</monospace> type that have a valid
      <monospace>as.character</monospace> coercion method that creates a
      unique symbolic representation of the class; this is required as
      internally checks are performed symbolically on character
      representations.</p>
    </list-item>
    <list-item>
      <p><bold>Containedness checks</bold> - Public methods allow all
      objects inheriting from <monospace>Set</monospace> to check if
      elements are contained within them. This provides a powerful
      mechanism for use with parameter or distribution supports for
      other packages as it can be viewed as a ‘type check’, i.e. checks
      if a value fits within a specified mathematical type. A C++
      implementation of these checks in Rcpp
      (<xref alt="Eddelbuettel &amp; Francois, 2011" rid="ref-pkgrcpp" ref-type="bibr">Eddelbuettel
      &amp; Francois, 2011</xref>) means that the computations are
      incredibly quick for sets and intervals of any size.</p>
    </list-item>
    <list-item>
      <p><bold>Representation of infinite sets</bold> - Symbolic
      representation and lazy evaluation allows infinite (or very large)
      sets and intervals to be constructed. This also allows operations
      such as powerset to be used without crashing the system.</p>
    </list-item>
    <list-item>
      <p><bold>Comparison of, possibly infinite, sets</bold> - Two
      <monospace>Set</monospace> objects can be compared to check if
      they are equal or (proper) sub/supersets. Infix operators allow
      quick and neat comparison.</p>
    </list-item>
    <list-item>
      <p><bold>Creation of composite sets from simpler classes</bold> -
      Common set operations, such as unions and complements are
      implemented, as well as products and exponents. These make use of
      S3 dispatch to allow quick calculation of composite sets. In line
      with design principle 4), lazy and greedy evaluation with symbolic
      representation allow for composite sets to be created, inspected,
      and printed, without ever needing to be evaluated themselves.</p>
    </list-item>
  </list>
</sec>
<sec id="software-availability">
  <title>Software Availability</title>
  <p><monospace>set6</monospace> is available on
  <ext-link ext-link-type="uri" xlink:href="https://github.com/xoopR/set6">GitHub</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=set6">CRAN</ext-link>.
  It can either be installed from GitHub using the
  <monospace>devtools</monospace>
  (<xref alt="Wickham et al., 2019" rid="ref-packagedevtools" ref-type="bibr">Wickham
  et al., 2019</xref>) library or directly from CRAN with
  <monospace>install.packages</monospace>. The package uses the MIT
  open-source licence. Contributions, issues, feature requests, and
  general feedback can all be found and provided on the project
  <ext-link ext-link-type="uri" xlink:href="https://github.com/xoopR/set6">GitHub</ext-link>.
  Full tutorials and further details are available on the
  <ext-link ext-link-type="uri" xlink:href="https://xoopR.github.io/set6/">project
  website</ext-link>.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-packageR">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>R Core Team</string-name>
        </person-group>
        <article-title>R: A Language and Environment for Statistical Computing</article-title>
        <publisher-name>R Foundation for Statistical Computing</publisher-name>
        <publisher-loc>Vienna</publisher-loc>
        <year iso-8601-date="2017">2017</year>
      </element-citation>
    </ref>
    <ref id="ref-packageR6">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Chang</surname><given-names>Winston</given-names></name>
        </person-group>
        <article-title>R6: Classes with Reference Semantics</article-title>
        <year iso-8601-date="2018">2018</year>
        <uri>https://cran.r-project.org/package=R6</uri>
      </element-citation>
    </ref>
    <ref id="ref-Gamma1996">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Gamma</surname><given-names>E</given-names></name>
          <name><surname>Helm</surname><given-names>R</given-names></name>
          <name><surname>Johnson</surname><given-names>R</given-names></name>
          <name><surname>Vlissides</surname><given-names>J</given-names></name>
        </person-group>
        <article-title>Design Patterns: Elements of Reusable Software</article-title>
        <year iso-8601-date="1996">1996</year>
        <isbn>020163361-2</isbn>
        <issn>ISBN: 0-201-63361-2</issn>
        <uri>https://arxiv.org/abs/dd</uri>
        <pub-id pub-id-type="doi">10.1093/carcin/bgs084</pub-id>
        <pub-id pub-id-type="pmid">22693012</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-packagedevtools">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
          <name><surname>Hester</surname><given-names>Jim</given-names></name>
          <name><surname>Chang</surname><given-names>Winston</given-names></name>
        </person-group>
        <article-title>devtools: Tools to Make Developing R Packages Easier</article-title>
        <publisher-name>CRAN</publisher-name>
        <year iso-8601-date="2019">2019</year>
      </element-citation>
    </ref>
    <ref id="ref-pkgsets">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Meyer</surname><given-names>David</given-names></name>
          <name><surname>Hornik</surname><given-names>Kurt</given-names></name>
        </person-group>
        <article-title>Generalized and Customizable Sets in R</article-title>
        <source>Journal of Statistical Software</source>
        <year iso-8601-date="2009">2009</year>
        <volume>31</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.18637/jss.v031.i02</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-packagedistr6">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Sonabend</surname><given-names>Raphael</given-names></name>
          <name><surname>Kiraly</surname><given-names>Franz</given-names></name>
        </person-group>
        <article-title>distr6: The Complete R6 Probability Distributions Interface</article-title>
        <publisher-name>CRAN</publisher-name>
        <year iso-8601-date="2019-07">2019</year><month>07</month>
        <uri>https://cran.r-project.org/package=distr6</uri>
      </element-citation>
    </ref>
    <ref id="ref-pkgrcpp">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Eddelbuettel</surname><given-names>Dirk</given-names></name>
          <name><surname>Francois</surname><given-names>Romain</given-names></name>
        </person-group>
        <article-title>Rcpp: Seamless R and C++ Integration</article-title>
        <source>Journal of Statistical Software</source>
        <publisher-name>CRAN</publisher-name>
        <year iso-8601-date="2011">2011</year>
        <volume>40</volume>
        <issue>8</issue>
        <uri>http://www.jstatsoft.org/v40/i08/</uri>
        <pub-id pub-id-type="doi">10.18637/jss.v040.i08</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-pkgportion">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Decan</surname><given-names>Alexandre</given-names></name>
        </person-group>
        <article-title>Portion - data structure and operations for intervals</article-title>
        <publisher-name>PyPi</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <uri>https://pypi.org/project/portion/</uri>
      </element-citation>
    </ref>
    <ref id="ref-pkgintervalsets">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Navelkar</surname><given-names>Anchit</given-names></name>
        </person-group>
        <article-title>IntervalSets.jl</article-title>
        <year iso-8601-date="2016">2016</year>
        <uri>https://github.com/JuliaMath/IntervalSets.jl</uri>
      </element-citation>
    </ref>
    <ref id="ref-pkglazysets">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Forets</surname><given-names>Marcelo</given-names></name>
          <name><surname>Schilling</surname><given-names>Christian</given-names></name>
        </person-group>
        <article-title>LazySets.jl</article-title>
        <year iso-8601-date="2018">2018</year>
        <uri>https://github.com/JuliaReach/LazySets.jl</uri>
      </element-citation>
    </ref>
    <ref id="ref-pkgdomainsets">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Huybrechs</surname><given-names>Daan</given-names></name>
        </person-group>
        <article-title>DomainSets.jl</article-title>
        <year iso-8601-date="2018">2018</year>
        <uri>https://github.com/JuliaApproximation/DomainSets.jl</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

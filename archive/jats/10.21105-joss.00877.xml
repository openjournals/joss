<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">877</article-id>
<article-id pub-id-type="doi">10.21105/joss.00877</article-id>
<title-group>
<article-title>tidynamics: A tiny package to compute the dynamics of
stochastic and molecular simulations</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-6640-6463</contrib-id>
<string-name>Pierre de Buyl</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Instituut voor Theoretische Fysica, KU Leuven, B-3001
Leuven, Belgium</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2018-06-20">
<day>20</day>
<month>6</month>
<year>2018</year>
</pub-date>
<volume>3</volume>
<issue>28</issue>
<fpage>877</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>physics</kwd>
<kwd>time series</kwd>
<kwd>stochastic processes</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>tidynamics provides an efficient implementation of the Fast
  Correlation Algorithm (FCA) to compute correlation functions of
  interest in molecular
  (<xref alt="Allen &amp; Tildesley, 1987" rid="ref-allen_tildesley_1987" ref-type="bibr">Allen
  &amp; Tildesley, 1987</xref>;
  <xref alt="Kneller et al., 1995" rid="ref-nmoldyn_1995" ref-type="bibr">Kneller
  et al., 1995</xref>) and stochastic
  (<xref alt="Gardiner, 2004" rid="ref-gardiner_2004" ref-type="bibr">Gardiner,
  2004</xref>) dynamics. Building on the FCA, tidynamics computes the
  autocorrelation (the correlation of a time series with itself), the
  correlation between two time-series, the mean-square displacement of a
  trajectory, and the cross-displacement (for off-diagonal realisations
  of Brownian motion). These correlation functions serve for the
  quantitative measure of relaxation and transport coefficients from
  numerical trajectories.</p>
  <p>There is a lack of a self-contained implementation of the
  algorithm. The software nMoldyn
  (<xref alt="Hinsen et al., 2012" rid="ref-hinsen_nmoldyn3_2012" ref-type="bibr">Hinsen
  et al., 2012</xref>) implements it within a larger library but it has
  a more complex interface and more dependencies. The goal of tidynamics
  is to serve as a reference implementation with a lighter
  interface.</p>
  <p>tidynamics is designed as a library in which every routine operates
  directly on NumPy arrays and returns NumPy arrays. The interface is
  simple and enables convenient use in interactive sessions or in
  teaching material. We test the library against Python 2.7, 3.5, and
  3.6 and several versions of NumPy to guard against a possible
  sensitivity to the API.</p>
  <p>The Fast Correlation Algorithm relies on the Fourier transform to
  compute correlations. For this purpose, we use NumPy’s
  (<xref alt="Oliphant, 2007" rid="ref-oliphant_cise_2007" ref-type="bibr">Oliphant,
  2007</xref>) FFT module <monospace>np.fft</monospace>. The advantage
  of using Fourier transforms is a reduced computational cost in
  comparison to a direct loop over the data. We expect a scaling of the
  CPU time <inline-formula><alternatives>
  <tex-math><![CDATA[t_\mathrm{CPU}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>t</mml:mi><mml:mstyle mathvariant="normal"><mml:mi>C</mml:mi><mml:mi>P</mml:mi><mml:mi>U</mml:mi></mml:mstyle></mml:msub></mml:math></alternatives></inline-formula>
  of <inline-formula><alternatives>
  <tex-math><![CDATA[t_\mathrm{CPU} \propto N \log N]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mstyle mathvariant="normal"><mml:mi>C</mml:mi><mml:mi>P</mml:mi><mml:mi>U</mml:mi></mml:mstyle></mml:msub><mml:mo>∝</mml:mo><mml:mi>N</mml:mi><mml:mo>log</mml:mo><mml:mi>N</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  where <inline-formula><alternatives>
  <tex-math><![CDATA[N]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>N</mml:mi></mml:math></alternatives></inline-formula>
  is the length of the time series. We show in Figure 3 the actual CPU
  time and compare it favourably to the expected scaling in the example
  <italic>Scaling behaviour</italic>.</p>
  <p>NumPy
  (<xref alt="Oliphant, 2007" rid="ref-oliphant_cise_2007" ref-type="bibr">Oliphant,
  2007</xref>) and SciPy
  (<xref alt="Jones et al., 2001" rid="ref-scipy-web" ref-type="bibr">Jones
  et al., 2001</xref>) implement correlation routines as well. In the
  case of NumPy, the computation is based on a direct loop with a
  quadratic scaling of the CPU time <inline-formula><alternatives>
  <tex-math><![CDATA[O(N^2)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msup><mml:mi>N</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>.
  In SciPy, both the direct and a Fourier transform version are
  implemented.</p>
  <p>The definition of <monospace>np.correlate</monospace> and
  <monospace>scipy.signal.correlate</monospace> differs from the
  definition traditionally used in dynamical systems in two ways. These
  routines do not correct for aperiodic signals, an issue that is
  addressed in the Fast Correlation Algorithm by zero-padding the
  signal, and they do not normalise the result by the actual number of
  samples. In addition to these differences, the relative complexity of
  building SciPy and its larger size motivated us to rely on NumPy only.
  NumPy and SciPy do not provide functions to compute the mean-square
  displacement of trajectories. The Fast Correlation Algorithm as
  applied to mean-square displacements was proposed by Kneller et al.
  (<xref alt="1995" rid="ref-nmoldyn_1995" ref-type="bibr">1995</xref>)
  and is less known than the plain correlation algorithm.</p>
  <p>The benefits of using tidynamics originate in the implementation of
  the suitable definitions for the study of dynamical systems, good
  performance, and its ease of installation.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>We show in Figures 1, 2, and 3 the examples provided with
  tidynamics. The examples in the repository include short codes for a
  random walk, for the Ornstein-Uhlenbeck process, and for the scaling
  performance analysis of the autocorrelation routine.</p>
  <fig>
    <caption><p>Mean-square displacement for a random walk and for a
    trajectory at constant velocity.</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="msd_example.pdf" xlink:title="" />
  </fig>
  <fig>
    <caption><p>Velocity autocorrelation function for a
    Ornstein-Uhlenbeck process
    (<xref alt="Gardiner, 2004" rid="ref-gardiner_2004" ref-type="bibr">Gardiner,
    2004</xref>).</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="vacf_example.pdf" xlink:title="" />
  </fig>
  <fig>
    <caption><p>Scaling of the CPU time with respect to the length of
    the data.</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="scaling.pdf" xlink:title="" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>PdB is a postdoctoral fellow of the Research Foundation Flanders -
  FWO. PdB would like to acknowledge useful discussions with Konrad
  Hinsen and feedback about the library from Max Linke.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-nmoldyn_1995">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kneller</surname><given-names>Gerald R.</given-names></name>
          <name><surname>Keiner</surname><given-names>Volker</given-names></name>
          <name><surname>Kneller</surname><given-names>Meinhard</given-names></name>
          <name><surname>Schiller</surname><given-names>Matthias</given-names></name>
        </person-group>
        <article-title>nMOLDYN: A program package for a neutron scattering oriented analysis of molecular dynamics simulations</article-title>
        <source>Comp. Phys. Commun.</source>
        <year iso-8601-date="1995">1995</year>
        <volume>91</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1016/0010-4655(95)00048-K</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-scipy-web">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Jones</surname><given-names>Eric</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>SciPy: Open source scientific tools for Python</article-title>
        <year iso-8601-date="2001">2001</year>
        <uri>http://www.scipy.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-allen_tildesley_1987">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Allen</surname><given-names>M. P.</given-names></name>
          <name><surname>Tildesley</surname><given-names>D. J.</given-names></name>
        </person-group>
        <source>Computer simulation of liquids</source>
        <publisher-name>Clarendon Press</publisher-name>
        <publisher-loc>Oxford</publisher-loc>
        <year iso-8601-date="1987">1987</year>
      </element-citation>
    </ref>
    <ref id="ref-gardiner_2004">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Gardiner</surname><given-names>Crispin W.</given-names></name>
        </person-group>
        <source>Handbook of stochastic methods for physics, chemistry, and the natural sciences</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2004">2004</year>
      </element-citation>
    </ref>
    <ref id="ref-hinsen_nmoldyn3_2012">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hinsen</surname><given-names>Konrad</given-names></name>
          <name><surname>Pellegrini</surname><given-names>Eric</given-names></name>
          <name><surname>Stachura</surname><given-names>Sławomir</given-names></name>
          <name><surname>Kneller</surname><given-names>Gerald R.</given-names></name>
        </person-group>
        <article-title>nMoldyn 3: Using task farming for a parallel spectroscopy-oriented analysis of molecular dynamics simulations</article-title>
        <source>J. Comput. Chem.</source>
        <year iso-8601-date="2012">2012</year>
        <volume>33</volume>
        <issue>25</issue>
        <pub-id pub-id-type="doi">10.1002/jcc.23035</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-oliphant_cise_2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Oliphant</surname><given-names>Travis E</given-names></name>
        </person-group>
        <article-title>Python for scientific computing</article-title>
        <source>Computing in Science &amp; Engineering</source>
        <year iso-8601-date="2007">2007</year>
        <volume>9</volume>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.58</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

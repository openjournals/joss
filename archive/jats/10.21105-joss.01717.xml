<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1717</article-id>
<article-id pub-id-type="doi">10.21105/joss.01717</article-id>
<title-group>
<article-title>Graph Transliterator: A graph-based transliteration
tool</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-8463-8578</contrib-id>
<string-name>A. Sean Pue</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Linguistics and Germanic, Slavic, Asian, and African
Languages, Michigan State University</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-07-28">
<day>28</day>
<month>7</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>44</issue>
<fpage>1717</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>transliteration</kwd>
<kwd>language</kwd>
<kwd>graph</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Transliteration—the representation of one language or script in the
  characters or symbols of another—is a ubiquitous and important
  operation, used across the humanities, social sciences, and
  information sciences, as well as other fields. It enables text to be
  read by those who do not know the original alphabet, and also makes
  languages or related languages written in multiple scripts legible to
  readers conversant in only one script
  (<xref alt="Durrani et al., 2010" rid="ref-durrani2010hindi" ref-type="bibr">Durrani
  et al., 2010</xref>;
  <xref alt="Saini et al., 2008" rid="ref-saini2008shahmukhi" ref-type="bibr">Saini
  et al., 2008</xref>). Transliteration enables the standardized
  organization and search of resources, as in library systems
  (<xref alt="Barry, 1997" rid="ref-Barry" ref-type="bibr">Barry,
  1997</xref>). It also permits the encoding of essential information
  often not found in the original script, such as morphological
  boundaries and unwritten elements, permitting disambiguation. In
  natural language processing tasks, transliteration has opened up new
  possibilities, especially in machine translation
  (<xref alt="Prabhakar &amp; Pal, 2018" rid="ref-prabhakar2018machine" ref-type="bibr">Prabhakar
  &amp; Pal, 2018</xref>) and named-entity recognition
  (<xref alt="Chen et al., 2018" rid="ref-chen2018report" ref-type="bibr">Chen
  et al., 2018</xref>;
  <xref alt="Merhav &amp; Ash, 2018" rid="ref-merhav-ash-2018-design" ref-type="bibr">Merhav
  &amp; Ash, 2018</xref>).</p>
  <p><monospace>Graph Transliterator</monospace> is a Python package and
  command-line program that makes this process more accessible by using
  a standardized method for encoding rules for transliteration. It lets
  those rules be entered in an “easy reading” YAML format
  (<xref alt="Ben-Kiki et al., 2009" rid="ref-YAMLAintMarkup" ref-type="bibr">Ben-Kiki
  et al., 2009</xref>) or directly, using standard Python data types. It
  also includes bundled transliterators that are rigorously tested and
  to which users can contribute. It differs from other rule-based
  software
  (<xref alt="Unicode Consortium, 2019" rid="ref-GeneralTransformsICUa" ref-type="bibr">Unicode
  Consortium, 2019</xref>) designed for handling transliteration in two
  primary ways. First, other software works directly on an input string,
  performing operations based on matches of particular characters.
  <monospace>Graph Transliterator</monospace> instead tokenizes the
  input into user-defined transliteration token types. Then it applies
  transliteration rules defined for those token types, rather than
  matching and manipulating the original characters of the input string.
  Second, other software requires a defined sequence of transliteration
  operations. <monospace>Graph Transliterator</monospace> instead
  automatically orders its transliteration rules so that the rule
  involving the largest number of tokens is applied first.</p>
  <p>Each instance of <monospace>Graph Transliterator</monospace> is
  parameterized by the acceptable token types of the input string as
  well as by transliteration rules. The transliteration token types can
  be one or more letters in length, e.g. <monospace>a</monospace>,
  <monospace>b</monospace>, or <monospace>aa</monospace>. Each of the
  token types can be assigned to particular classes,
  e.g. <monospace>vowel</monospace> or <monospace>consonant</monospace>.
  The transliteration rules allow matching of a particular sequence of
  one or more tokens. They also allow lookahead and lookbehind matching
  for particular tokens or token classes.</p>
  <p><monospace>Graph Transliterator</monospace> includes features that
  accommodate common tasks involved in transliteration and associated
  forms of analysis. It includes customizable rules for defining and
  handling whitespace, which is often very important in transliteration,
  as many letters in non-Roman alphabets change their shape at the start
  of words. It accepts “on match” rules for the insertion of output
  based on which token classes are matched, e.g. the insertion of a
  character between two consonants.
  <monospace>Graph Transliterator</monospace> makes it possible for
  users to view the details about rule-matching, which may enable
  certain forms of analysis. It also allows the matching of all possible
  rules at a given index, which can be useful in particular analysis
  contexts. Each instance of a defined transliterator can be serialized
  and includes metadata fields. Finally, the software includes full
  ambiguity checking and produces a warning if more than one rule could
  match the same input. As such,
  <monospace>Graph Transliterator</monospace> provides a rigorous and
  reproducible framework for transliteration.</p>
  <fig>
    <caption><p>An example graph created for the simple case of a
    <monospace>Graph Transliterator</monospace> that takes as input two
    token types, <monospace>a</monospace> and
    <monospace>&quot; &quot;</monospace> (space), and renders
    <monospace>&quot; &quot;</monospace> as
    <monospace>&quot; &quot;</monospace>, and <monospace>a</monospace>
    as <monospace>b</monospace> unless it follows a token of class
    <monospace>wb</monospace> (for wordbreak), in which case it renders
    <monospace>a</monospace> as <monospace>B</monospace>. The
    <monospace>rule</monospace> nodes are in double circles, and
    <monospace>token</monospace> nodes are single circles. The numbers
    are the cost of the particular edge, and less costly edges are
    searched first. Previous token class
    (<monospace>prev_classes</monospace>) constraints are found on the
    edge incident to the leaf rule
    node.<styled-content id="figure1"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="figure1.png" xlink:title="" />
  </fig>
</sec>
<sec id="how-it-works">
  <title>How It Works</title>
  <p>During initialization, a graph is created that is searched to find
  the best transliteration match at a particular index in the tokens of
  an input string. The graph, a directed tree, has nodes of three types:
  <monospace>Start</monospace>, <monospace>token</monospace>, and
  <monospace>rule</monospace>. The <monospace>Start</monospace> node is
  the root. A <monospace>token</monospace> node corresponds to a token
  being matched. The <monospace>rule</monospace> nodes are leaves
  representing transliteration rules. Each transliteration rule is
  assigned a particular cost between one and zero that lessens with more
  tokens, using the following cost function:</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[\text{cost}(rule) = \log_2{\big(1+\frac{1}{1+\text{count}\_\text{of}\_ \text{tokens}\_ \text{in}(rule)}\big)}]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mtext mathvariant="normal">cost</mml:mtext><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>l</mml:mi><mml:mi>e</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:msub><mml:mo>log</mml:mo><mml:mn>2</mml:mn></mml:msub><mml:mrow><mml:mo minsize="1.2" maxsize="1.2" stretchy="false" form="prefix">(</mml:mo><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mfrac><mml:mn>1</mml:mn><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mtext mathvariant="normal">count</mml:mtext><mml:mi>_</mml:mi><mml:mtext mathvariant="normal">of</mml:mtext><mml:mi>_</mml:mi><mml:mtext mathvariant="normal">tokens</mml:mtext><mml:mi>_</mml:mi><mml:mtext mathvariant="normal">in</mml:mtext><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>r</mml:mi><mml:mi>u</mml:mi><mml:mi>l</mml:mi><mml:mi>e</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:mfrac><mml:mo minsize="1.2" maxsize="1.2" stretchy="false" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>Each edge is assigned a cost corresponding to the least costly
  transliteration rule leaf node that can be reached from it. Edges
  contain constraints that must be met before a node can be visited.
  Before token nodes, these constraints include a token in the input to
  be matched. Other constraints include previous and/or following tokens
  or token classes. To optimize the search, during initialization an
  <monospace>ordered_children</monospace> dictionary is added to each
  non-leaf node. Its values are a list of node indexes sorted by cost
  and keyed by the token that follows. Any rule immediately following a
  node is added to <monospace>ordered_children</monospace> as well as to
  each individual entry in it. Because of this preprocessing,
  <monospace>Graph Transliterator</monospace> does not need to iterate
  through all of the outgoing edges of a node to find the next node to
  search. Instead, it uses a best-first search implemented using a
  stack, and will backtrack if necessary to find the best match.</p>
  <p>Graph Transliterator is available at
  <ext-link ext-link-type="uri" xlink:href="https://github.com/seanpue/graphtransliterator">https://github.com/seanpue/graphtransliterator</ext-link>
  under the MIT License. Detailed installation and usage instructions
  are available at
  <ext-link ext-link-type="uri" xlink:href="https://graphtransliterator.readthedocs.io">https://graphtransliterator.readthedocs.io</ext-link>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>Software development was supported by an Andrew W. Mellon
  Foundation New Directions Fellowship (Grant Number 11600613) and by
  matching funds provided by the College of Arts and Letters, Michigan
  State University.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-GeneralTransformsICUa">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>Unicode Consortium</string-name>
        </person-group>
        <source>General Transforms - International Components for Unicode User Guide</source>
        <publisher-name>Unicode, Inc.</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <uri>http://userguide.icu-project.org/transforms/general</uri>
      </element-citation>
    </ref>
    <ref id="ref-Barry">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Barry</surname><given-names>R. K.</given-names></name>
        </person-group>
        <source>ALA-LC romanization tables: Transliteration schemes for non-roman scripts</source>
        <publisher-name>Library of Congress &amp; American Library Association</publisher-name>
        <year iso-8601-date="1997">1997</year>
        <uri>https://www.loc.gov/catdir/cpso/roman.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-prabhakar2018machine">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Prabhakar</surname><given-names>Dinesh Kumar</given-names></name>
          <name><surname>Pal</surname><given-names>Sukomal</given-names></name>
        </person-group>
        <article-title>Machine transliteration and transliterated text retrieval: A survey</article-title>
        <source>Sādhanā</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2018">2018</year>
        <volume>43</volume>
        <issue>6</issue>
        <pub-id pub-id-type="doi">10.1007/s12046-018-0828-8</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-durrani2010hindi">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Durrani</surname><given-names>Nadir</given-names></name>
          <name><surname>Sajjad</surname><given-names>Hassan</given-names></name>
          <name><surname>Fraser</surname><given-names>Alexander</given-names></name>
          <name><surname>Schmid</surname><given-names>Helmut</given-names></name>
        </person-group>
        <article-title>Hindi-to-urdu machine translation through transliteration</article-title>
        <source>Proceedings of the 48th annual meeting of the association for computational linguistics</source>
        <publisher-name>Association for Computational Linguistics</publisher-name>
        <year iso-8601-date="2010">2010</year>
      </element-citation>
    </ref>
    <ref id="ref-saini2008shahmukhi">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Saini</surname><given-names>Tejinder Singh</given-names></name>
          <name><surname>Lehal</surname><given-names>Gurpreet Singh</given-names></name>
          <name><surname>Kalra</surname><given-names>Virinder S</given-names></name>
        </person-group>
        <article-title>Shahmukhi to gurmukhi transliteration system</article-title>
        <source>22nd international conference on on computational linguistics: Demonstration papers</source>
        <publisher-name>Association for Computational Linguistics</publisher-name>
        <year iso-8601-date="2008">2008</year>
      </element-citation>
    </ref>
    <ref id="ref-merhav-ash-2018-design">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Merhav</surname><given-names>Yuval</given-names></name>
          <name><surname>Ash</surname><given-names>Stephen</given-names></name>
        </person-group>
        <article-title>Design challenges in named entity transliteration</article-title>
        <source>Proceedings of the 27th international conference on computational linguistics</source>
        <publisher-name>Association for Computational Linguistics</publisher-name>
        <publisher-loc>Santa Fe, New Mexico, USA</publisher-loc>
        <year iso-8601-date="2018-08">2018</year><month>08</month>
        <uri>https://www.aclweb.org/anthology/C18-1053</uri>
      </element-citation>
    </ref>
    <ref id="ref-chen2018report">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Chen</surname><given-names>Nancy</given-names></name>
          <name><surname>Banchs</surname><given-names>Rafael E</given-names></name>
          <name><surname>Zhang</surname><given-names>Min</given-names></name>
          <name><surname>Duan</surname><given-names>Xiangyu</given-names></name>
          <name><surname>Li</surname><given-names>Haizhou</given-names></name>
        </person-group>
        <article-title>Report of NEWS 2018 named entity transliteration shared task</article-title>
        <source>Proceedings of the seventh named entities workshop</source>
        <year iso-8601-date="2018">2018</year>
        <pub-id pub-id-type="doi">10.18653/v1/w18-2409</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-YAMLAintMarkup">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Ben-Kiki</surname><given-names>O.</given-names></name>
          <name><surname>Evans</surname><given-names>C.</given-names></name>
          <name><surname>döt Net</surname><given-names>I.</given-names></name>
        </person-group>
        <source>YAML Ain’t Markup Language (YAML) Version 1.2</source>
        <year iso-8601-date="2009">2009</year>
        <uri>https://yaml.org/spec/1.2/spec.html</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

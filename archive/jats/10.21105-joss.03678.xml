<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3678</article-id>
<article-id pub-id-type="doi">10.21105/joss.03678</article-id>
<title-group>
<article-title>Opfi: A Python package for identifying gene clusters in
large genomics and metagenomics data sets</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Alexis M. Hill</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<string-name>James R. Rybarski</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<string-name>Kuang Hu</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<string-name>Ilya J. Finkelstein</string-name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<string-name>Claus O. Wilke</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Integrative Biology, The University of Texas
at Austin, Austin, Texas 78712, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Molecular Biosciences, The University of
Texas at Austin, Austin, Texas 78712, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Center for Systems and Synthetic Biology, The University of
Texas at Austin, Austin, Texas, 78712, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-07-28">
<day>28</day>
<month>7</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>66</issue>
<fpage>3678</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>bioinformatics</kwd>
<kwd>metagenomics</kwd>
<kwd>gene cluster analysis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Gene clusters are sets of co-localized, often contiguous genes that
  together perform specific functions, many of which are relevant to
  biotechnology. There is a need for software tools that can extract
  candidate gene clusters from vast amounts of available genomic data.
  Therefore, we developed Opfi: a modular pipeline for identification of
  arbitrary gene clusters in assembled genomic or metagenomic sequences.
  Opfi contains functions for annotation, de-deduplication, and
  visualization of putative gene clusters. It utilizes a customizable
  rule-based filtering approach for selection of candidate systems that
  adhere to user-defined criteria. Opfi is implemented in Python, and is
  available on the Python Package Index and on Bioconda
  (<xref alt="Grüning et al., 2018" rid="ref-GrüningU003A2018" ref-type="bibr">Grüning
  et al., 2018</xref>).</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Gene clusters have been successfully repurposed for a number of
  biotechnical applications, including biofuel production, organic
  compound synthesis, and gene editing
  (<xref alt="Fischbach &amp; Voigt, 2010" rid="ref-FischbachU003A2010" ref-type="bibr">Fischbach
  &amp; Voigt, 2010</xref>). Despite the broad utility of known gene
  clusters, identification of novel gene clusters remains a challenging
  task. While there are many tools available for annotation of singular
  genes (or protein domains) in biological sequence data
  (<xref alt="Buchfink et al., 2021" rid="ref-BuchfinkU003A2021" ref-type="bibr">Buchfink
  et al., 2021</xref>;
  <xref alt="Camacho et al., 2009" rid="ref-CamachoU003A2009" ref-type="bibr">Camacho
  et al., 2009</xref>;
  <xref alt="Steinegger &amp; Söding, 2017" rid="ref-SteineggerU003A2017" ref-type="bibr">Steinegger
  &amp; Söding, 2017</xref>), these programs do not identify whole gene
  clusters out of the box. In many cases, researchers must combine
  bioinformatics tools ad hoc, resulting in one-off pipelines that can
  be difficult to reproduce. Several software packages have been
  developed for the discovery of specific types of gene clusters
  (<xref alt="Blin et al., 2019" rid="ref-BlinU003A2019" ref-type="bibr">Blin
  et al., 2019</xref>;
  <xref alt="Santos-Aberturas et al., 2019" rid="ref-Santos-AberturasU003A2019" ref-type="bibr">Santos-Aberturas
  et al., 2019</xref>;
  <xref alt="van Heel et al., 2018" rid="ref-vanHeelU003A2018" ref-type="bibr">van Heel
  et al., 2018</xref>), but these tools may not be sufficiently flexible
  to identify clusters of an arbitrary genomic composition. To address
  these gaps, we developed a modular pipeline that integrates multiple
  bioinformatics tools, providing a flexible, uniform computational
  framework for identification of arbitrary gene clusters. In a recent
  study, we used Opfi to uncover novel CRISPR-associated transposons
  (CASTs) in a large metagenomics dataset
  (<xref alt="Rybarski et al., 2021" rid="ref-RybarskiU003A2021" ref-type="bibr">Rybarski
  et al., 2021</xref>).</p>
</sec>
<sec id="implementation">
  <title>Implementation</title>
  <p>Opfi is implemented in Python, and uses several bioinformatics
  tools for feature annotation
  (<xref alt="Buchfink et al., 2021" rid="ref-BuchfinkU003A2021" ref-type="bibr">Buchfink
  et al., 2021</xref>;
  <xref alt="Camacho et al., 2009" rid="ref-CamachoU003A2009" ref-type="bibr">Camacho
  et al., 2009</xref>;
  <xref alt="Edgar, 2007" rid="ref-EdgarU003A2007" ref-type="bibr">Edgar,
  2007</xref>;
  <xref alt="Shi &amp; Liang, 2019" rid="ref-ShiU003A2019" ref-type="bibr">Shi
  &amp; Liang, 2019</xref>;
  <xref alt="Steinegger &amp; Söding, 2017" rid="ref-SteineggerU003A2017" ref-type="bibr">Steinegger
  &amp; Söding, 2017</xref>). Users can install Opfi and all of its
  dependencies through Bioconda
  (<xref alt="Grüning et al., 2018" rid="ref-GrüningU003A2018" ref-type="bibr">Grüning
  et al., 2018</xref>). Opfi consists of two major components: Gene
  Finder, for discovery of gene clusters, and Operon Analyzer, for
  rule-based filtering, deduplication, and visualization of gene
  clusters identified by Gene Finder. All modules generate output in a
  comma-separated (CSV) format that is common to the entire package.</p>
  <sec id="example-gene-finder-usage">
    <title>Example Gene Finder usage</title>
    <p>The following example script searches for putative CRISPR-Cas
    loci in the genome of <italic>Rippkaea orientalis PCC 8802</italic>.
    Information about the biological significance of this example, as
    well as data inputs and descriptions, can be found in the
    <monospace>tutorials</monospace> directory in the project GitHub
    repository. The example illustrates the use of the
    <monospace>Pipeline</monospace> class for setting up a gene cluster
    search. First, <monospace>add_seed_step</monospace> specifies a step
    to annotate <italic>cas1</italic> genes, using protein BLAST
    (BLASTP)
    (<xref alt="Camacho et al., 2009" rid="ref-CamachoU003A2009" ref-type="bibr">Camacho
    et al., 2009</xref>) and a database of representative Cas1 protein
    sequences. 10,000 bp regions directly up- and downstream of each
    putative <italic>cas1</italic> gene are selected for further
    analysis, and all other regions are discarded. Next,
    <monospace>add_filter_step</monospace> adds a step to annotate
    candidate regions for additonal <italic>cas</italic> genes.
    Candidates that do not have at least one additional
    <italic>cas</italic> gene are discarded from the master list of
    putative systems. Finally, <monospace>add_crispr_step</monospace>
    adds a step to search remaining candidates for CRISPR arrays,
    i.e. regions of alternating ~30 bp direct repeat and variable
    sequences, using the PILER-CR repeat finding software
    (<xref alt="Edgar, 2007" rid="ref-EdgarU003A2007" ref-type="bibr">Edgar,
    2007</xref>).</p>
    <code language="python">from gene_finder.pipeline import Pipeline
import os

genomic_data = &quot;GCF_000024045.1_ASM2404v1_genomic.fna.gz&quot;
job_id = &quot;r_orientalis&quot;

p = Pipeline()
p.add_seed_step(db=&quot;cas1&quot;, name=&quot;cas1&quot;, e_val=0.001, blast_type=&quot;PROT&quot;)
p.add_filter_step(db=&quot;cas_all&quot;, name=&quot;cas&quot;, e_val=0.001, blast_type=&quot;PROT&quot;)
p.add_crispr_step()

p.run(job_id=job_id, data=genomic_data, span=10000, gzip=True)</code>
    <p>Running this code creates the CSV file
    <monospace>r_orientalis_results.csv</monospace>, which contains
    information about each system identified; in this example, that is
    two canonical CRISPR-Cas systems, and one locus with weak homology
    to <italic>cas</italic> genes. Each line in the file represents a
    single putative feature in a candidate locus. Features from the same
    candidate are grouped together in the CSV. Detailed information
    about the output format can be found in the Opfi
    <ext-link ext-link-type="uri" xlink:href="https://opfi.readthedocs.io/">documentation</ext-link>.</p>
  </sec>
  <sec id="example-operon-analyzer-usage">
    <title>Example Operon Analyzer usage</title>
    <p>In the previous example, passing systems must meet the relatively
    permissive criterion of having at least one <italic>cas1</italic>
    gene co-localized with one additional <italic>cas</italic> gene.
    This is sufficient to identify CRISPR-Cas loci, but may also capture
    regions that do not contain functional CRISPR-Cas systems, but
    rather consist of open reading frames (ORFs) with weak homology to
    <italic>cas</italic> genes. These improbable systems could be
    eliminated during the homology search by making the match acceptance
    threshold more restrictive (i.e., by decreasing the e-value),
    however, this could result in the loss of interesting, highly
    diverged systems. Therefore, we implemented a module that enables
    post-homology search filtering of candidate systems, using flexible
    rules that can be combined to create sophisticated elimination
    functions. This allows the user to first perform a broad homology
    search with permissive parameters, and then apply rules to cull
    unlikely candidates without losing interesting and/or novel systems.
    Additionally, rules may be useful for selecting candidates with a
    specific genomic composition for downstream analysis. It should be
    noted that the use of the term “operon” throughout this library is
    an artifact from early development of Opfi. At this time, Opfi does
    not predict whether a candidate system represents a true operon,
    that is, a set of genes under the control of a single promoter.
    Although a candidate gene cluster may certainly qualify as an
    operon, it is currently up to the user to make that distinction.</p>
    <p>Rule-based filtering is illustrated with the following example.
    The sample script takes the output generated by the previous example
    and reconstructs each system as an <monospace>Operon</monospace>
    object. Next, the <monospace>RuleSet</monospace> class is used to
    assess each candidate; here, passing systems must contain two
    cascade genes (<italic>cas5</italic> and <italic>cas7</italic>) no
    more than 1000 bp apart, and at least one <italic>cas3</italic>
    (effector) gene. For a complete list of rules, see the Opfi
    <ext-link ext-link-type="uri" xlink:href="https://opfi.readthedocs.io/">documentation</ext-link>.</p>
    <code language="python">from operon_analyzer import analyze, rules

rs = rules.RuleSet()
rs.contains_group([&quot;cas5&quot;, &quot;cas7&quot;], max_gap_distance_bp = 1000)
rs.require(&quot;cas3&quot;))

with open(&quot;r_orientalis_results.csv&quot;, &quot;r&quot;) as input_csv:
    with open(&quot;filtered_output.csv&quot;, &quot;w&quot;) as output_csv:
        analyze.evaluate_rules_and_reserialize(input_csv, rs, output_csv)</code>
    <p>After running this code, the file
    <monospace>filtered_output.csv</monospace> contains only
    high-confidence type-I CRISPR-Cas systems (re-serialized to CSV
    format) that passed all rules in the rule set.</p>
  </sec>
  <sec id="candidate-visualization">
    <title>Candidate visualization</title>
    <p>Opfi integrates the <monospace>DNAFeaturesViewer</monospace>
    package
    (<xref alt="Zulkower &amp; Rosser, 2020" rid="ref-ZulkowerU003A2020" ref-type="bibr">Zulkower
    &amp; Rosser, 2020</xref>) to create gene diagrams of candidate
    systems. Each input system is visualized as a single PNG image. The
    sample script below reads in output from the previous example, and
    generates two gene diagram images, one for each CRISPR-Cas system
    present in <italic>Rippkaea orientalis</italic>. One image is
    provided for reference in
    <xref alt="Figure 1" rid="figU003Aoperon">Figure 1</xref>.</p>
    <code language="python">from operon_analyzer import load, rules, visualize

feature_colors = { &quot;cas1&quot;: &quot;lightblue&quot;,
                    &quot;cas2&quot;: &quot;seagreen&quot;,
                    &quot;cas3&quot;: &quot;gold&quot;,
                    &quot;cas4&quot;: &quot;springgreen&quot;,
                    &quot;cas5&quot;: &quot;darkred&quot;,
                    &quot;cas6&quot;: &quot;thistle&quot;,
                    &quot;cas7&quot;: &quot;coral&quot;,
                    &quot;cas8&quot;: &quot;red&quot;,
                    &quot;cas9&quot;: &quot;palegreen&quot;,
                    &quot;cas10&quot;: &quot;blue&quot;,
                    &quot;cas11&quot;: &quot;tan&quot;,
                    &quot;cas12&quot;: &quot;orange&quot;,
                    &quot;cas13&quot;: &quot;saddlebrown&quot;,
                    &quot;CRISPR array&quot;: &quot;purple&quot;
                    }

fs = rules.FilterSet().pick_overlapping_features_by_bit_score(0.9)
with open(&quot;filtered_output.csv&quot;, &quot;r&quot;) as operon_data:
    operons = [operon for operon in load.load_operons(operon_data)]
    for operon in operons:
      fs.evaluate(operon)
    visualize.plot_operons(operons, output_directory=&quot;.&quot;, \
      plot_ignored=False, feature_colors=feature_colors)</code>
    <p>The <monospace>FilterSet</monospace> class is used to resolve
    features with sequences that overlap by more than 90%. Specifically,
    only the overlapping feature with the highest bitscore value (a
    quantity that describes the overall quality of an alignment) is
    rendered when
    <monospace>pick_overlapping_features_by_bit_score</monospace> is
    applied. Note that is not a requirement for candidate visualization,
    but can improve gene diagram clarity.</p>
    <fig>
      <caption><p>One of two type-I CRISPR-Cas systems present in the
      genome of <italic>Rippkaea orientalis PCC 8802</italic>. Note that
      the ORF beginning at position ~2500 has homology with both
      <italic>cas1</italic> and <italic>cas4</italic>. These alignments
      have identical bitscores (i.e., the goodness of alignments is
      quivalent, using this metric), so both annotations appear in the
      diagram, even though
      <monospace>pick_overlapping_features_by_bit_score</monospace> was
      applied.<styled-content id="figU003Aoperon"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="operon_diagram.png" xlink:title="" />
    </fig>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The authors would like to thank the staff of the Texas Advanced
  Computing Center for providing computational resources, and members of
  the Finkelstein and Wilke labs for helpful discussions. This work was
  supported by an NIGMS grant R01GM124141 (to I.J.F.), the Welch
  Foundation grant F-1808 (to I.J.F.), NIGMS grant R01 GM088344 (to
  C.O.W.), and the College of Natural Sciences Catalyst Award for seed
  funding.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-GrüningU003A2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Grüning</surname><given-names>B.</given-names></name>
          <name><surname>Dale</surname><given-names>R.</given-names></name>
          <name><surname>Sjödin</surname><given-names>A</given-names></name>
          <name><surname>Chapman</surname><given-names>B.</given-names></name>
          <name><surname>Rowe</surname><given-names>J.</given-names></name>
          <name><surname>Tomkins-Tinch</surname><given-names>CH.</given-names></name>
          <name><surname>Valieris</surname><given-names>R.</given-names></name>
          <name><surname>Köster</surname><given-names>J.</given-names></name>
          <string-name>The Bioconda Team</string-name>
        </person-group>
        <article-title>Bioconda: sustainable and comprehensive software distribution for the life sciences</article-title>
        <source>Nature Methods</source>
        <year iso-8601-date="2018-07">2018</year><month>07</month>
        <volume>15</volume>
        <issue>7</issue>
        <uri>https://www.nature.com/articles/s41592-018-0046-7</uri>
        <pub-id pub-id-type="doi">10.1038/s41592-018-0046-7</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-FischbachU003A2010">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Fischbach</surname><given-names>Michael</given-names></name>
          <name><surname>Voigt</surname><given-names>Christopher A.</given-names></name>
        </person-group>
        <article-title>Prokaryotic gene clusters: A rich toolbox for synthetic biology</article-title>
        <source>Biotechnology Journal</source>
        <year iso-8601-date="2010">2010</year>
        <volume>5</volume>
        <issue>12</issue>
        <uri>https://onlinelibrary.wiley.com/doi/abs/10.1002/biot.201000181</uri>
        <pub-id pub-id-type="doi">10.1002/biot.201000181</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-CamachoU003A2009">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Camacho</surname><given-names>Christiam</given-names></name>
          <name><surname>Coulouris</surname><given-names>George</given-names></name>
          <name><surname>Avagyan</surname><given-names>Vahram</given-names></name>
          <name><surname>Ma</surname><given-names>Ning</given-names></name>
          <name><surname>Papadopoulos</surname><given-names>Jason</given-names></name>
          <name><surname>Bealer</surname><given-names>Kevin</given-names></name>
          <name><surname>Madden</surname><given-names>Thomas L.</given-names></name>
        </person-group>
        <article-title>BLAST+: Architecture and applications</article-title>
        <source>BMC Bioinformatics</source>
        <year iso-8601-date="2009-12-15">2009</year><month>12</month><day>15</day>
        <volume>10</volume>
        <issue>1</issue>
        <issn>1471-2105</issn>
        <uri>https://doi.org/10.1186/1471-2105-10-421</uri>
        <pub-id pub-id-type="doi">10.1186/1471-2105-10-421</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-SteineggerU003A2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Steinegger</surname><given-names>Martin</given-names></name>
          <name><surname>Söding</surname><given-names>Johannes</given-names></name>
        </person-group>
        <article-title>MMseqs2 enables sensitive protein sequence searching for the analysis of massive data sets</article-title>
        <source>Nature Biotechnology</source>
        <year iso-8601-date="2017-11-01">2017</year><month>11</month><day>01</day>
        <volume>35</volume>
        <issue>11</issue>
        <issn>1546-1696</issn>
        <uri>https://doi.org/10.1038/nbt.3988</uri>
        <pub-id pub-id-type="doi">10.1038/nbt.3988</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-BuchfinkU003A2021">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Buchfink</surname><given-names>Benjamin</given-names></name>
          <name><surname>Reuter</surname><given-names>Klaus</given-names></name>
          <name><surname>Drost</surname><given-names>Hajk-Georg</given-names></name>
        </person-group>
        <article-title>Sensitive protein alignments at tree-of-life scale using DIAMOND</article-title>
        <source>Nature Methods</source>
        <year iso-8601-date="2021-04-01">2021</year><month>04</month><day>01</day>
        <volume>18</volume>
        <issue>4</issue>
        <issn>1548-7105</issn>
        <uri>https://doi.org/10.1038/s41592-021-01101-x</uri>
        <pub-id pub-id-type="doi">10.1038/s41592-021-01101-x</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-BlinU003A2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Blin</surname><given-names>Kai</given-names></name>
          <name><surname>Shaw</surname><given-names>Simon</given-names></name>
          <name><surname>Steinke</surname><given-names>Katharina</given-names></name>
          <name><surname>Villebro</surname><given-names>Rasmus</given-names></name>
          <name><surname>Ziemert</surname><given-names>Nadine</given-names></name>
          <name><surname>Lee</surname><given-names>Sang Yup</given-names></name>
          <name><surname>Medema</surname><given-names>Marnix H</given-names></name>
          <name><surname>Weber</surname><given-names>Tilmann</given-names></name>
        </person-group>
        <article-title>antiSMASH 5.0: updates to the secondary metabolite genome mining pipeline</article-title>
        <source>Nucleic Acids Research</source>
        <year iso-8601-date="2019-04">2019</year><month>04</month>
        <volume>47</volume>
        <issue>W1</issue>
        <issn>0305-1048</issn>
        <uri>https://doi.org/10.1093/nar/gkz310</uri>
        <pub-id pub-id-type="doi">10.1093/nar/gkz310</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-vanHeelU003A2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>van Heel</surname><given-names>Auke J</given-names></name>
          <name><surname>de Jong</surname><given-names>Anne</given-names></name>
          <name><surname>Song</surname><given-names>Chunxu</given-names></name>
          <name><surname>Viel</surname><given-names>Jakob H</given-names></name>
          <name><surname>Kok</surname><given-names>Jan</given-names></name>
          <name><surname>Kuipers</surname><given-names>Oscar P</given-names></name>
        </person-group>
        <article-title>BAGEL4: a user-friendly web server to thoroughly mine RiPPs and bacteriocins</article-title>
        <source>Nucleic Acids Research</source>
        <year iso-8601-date="2018-05">2018</year><month>05</month>
        <volume>46</volume>
        <issue>W1</issue>
        <issn>0305-1048</issn>
        <uri>https://doi.org/10.1093/nar/gky383</uri>
        <pub-id pub-id-type="doi">10.1093/nar/gky383</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Santos-AberturasU003A2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Santos-Aberturas</surname><given-names>Javier</given-names></name>
          <name><surname>Chandra</surname><given-names>Govind</given-names></name>
          <name><surname>Frattaruolo</surname><given-names>Luca</given-names></name>
          <name><surname>Lacret</surname><given-names>Rodney</given-names></name>
          <name><surname>Pham</surname><given-names>Thu H</given-names></name>
          <name><surname>Vior</surname><given-names>Natalia M</given-names></name>
          <name><surname>Eyles</surname><given-names>Tom H</given-names></name>
          <name><surname>Truman</surname><given-names>Andrew W</given-names></name>
        </person-group>
        <article-title>Uncovering the unexplored diversity of thioamidated ribosomal peptides in Actinobacteria using the RiPPER genome mining tool</article-title>
        <source>Nucleic Acids Research</source>
        <year iso-8601-date="2019-03">2019</year><month>03</month>
        <volume>47</volume>
        <issue>9</issue>
        <issn>0305-1048</issn>
        <uri>https://doi.org/10.1093/nar/gkz192</uri>
        <pub-id pub-id-type="doi">10.1093/nar/gkz192</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-EdgarU003A2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Edgar</surname><given-names>Robert C.</given-names></name>
        </person-group>
        <article-title>PILER-CR: Fast and accurate identification of CRISPR repeats</article-title>
        <source>BMC Bioinformatics</source>
        <year iso-8601-date="2007-01-20">2007</year><month>01</month><day>20</day>
        <volume>8</volume>
        <issue>1</issue>
        <issn>1471-2105</issn>
        <uri>https://doi.org/10.1186/1471-2105-8-18</uri>
        <pub-id pub-id-type="doi">10.1186/1471-2105-8-18</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ShiU003A2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Shi</surname><given-names>Jieming</given-names></name>
          <name><surname>Liang</surname><given-names>Chun</given-names></name>
        </person-group>
        <article-title>Generic Repeat Finder: A High-Sensitivity Tool for Genome-Wide De Novo Repeat Detection</article-title>
        <source>Plant Physiology</source>
        <year iso-8601-date="2019-05">2019</year><month>05</month>
        <volume>180</volume>
        <issue>4</issue>
        <issn>0032-0889</issn>
        <uri>https://doi.org/10.1104/pp.19.00386</uri>
        <pub-id pub-id-type="doi">10.1104/pp.19.00386</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ZulkowerU003A2020">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Zulkower</surname><given-names>Valentin</given-names></name>
          <name><surname>Rosser</surname><given-names>Susan</given-names></name>
        </person-group>
        <article-title>DNA Features Viewer: a sequence annotation formatting and plotting library for Python</article-title>
        <source>Bioinformatics</source>
        <year iso-8601-date="2020-07">2020</year><month>07</month>
        <volume>36</volume>
        <issue>15</issue>
        <issn>1367-4803</issn>
        <uri>https://doi.org/10.1093/bioinformatics/btaa213</uri>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btaa213</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-RybarskiU003A2021">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Rybarski</surname><given-names>James R.</given-names></name>
          <name><surname>Hu</surname><given-names>Kuang</given-names></name>
          <name><surname>Hill</surname><given-names>Alexis M.</given-names></name>
          <name><surname>Wilke</surname><given-names>Claus O</given-names></name>
          <name><surname>Finkelstein</surname><given-names>Ilya J</given-names></name>
        </person-group>
        <article-title>Metagenomic discovery of CRISPR-associated transposons</article-title>
        <source>bioRxiv</source>
        <publisher-name>Cold Spring Harbor Laboratory</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <uri>https://www.biorxiv.org/content/early/2021/08/17/2021.08.16.456562</uri>
        <pub-id pub-id-type="doi">10.1101/2021.08.16.456562</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

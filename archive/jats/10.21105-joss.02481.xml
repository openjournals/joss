<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2481</article-id>
<article-id pub-id-type="doi">10.21105/joss.02481</article-id>
<title-group>
<article-title>PyMatting: A Python Library for Alpha
Matting</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Thomas Germer</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Tobias Uelwer</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Stefan Conrad</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Stefan Harmeling</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Computer Science, Heinrich Heine University
Düsseldorf</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-06-12">
<day>12</day>
<month>6</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>54</issue>
<fpage>2481</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>alpha matting</kwd>
<kwd>soft-segmentation</kwd>
<kwd>foreground extraction</kwd>
<kwd>toolbox</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>A fundamental problem of many image processing tasks is the
  extraction of specific objects from an image in order to place them in
  a scene of a movie or compose them onto another background. Alpha
  matting describes the problem of separating the objects in the
  foreground from the background of an image given only a rough sketch.
  Besides everyday image editing, alpha matting has been applied to
  medical image analysis
  (<xref alt="Fan et al., 2019" rid="ref-fan2019hierarchical" ref-type="bibr">Fan
  et al., 2019</xref>;
  <xref alt="Yin et al., 2010" rid="ref-zhaozheng2010understanding" ref-type="bibr">Yin
  et al., 2010</xref>) and microscopy image restoration
  (<xref alt="Kanade et al., 2011" rid="ref-kanade2011cell" ref-type="bibr">Kanade
  et al., 2011</xref>).</p>
  <p>For an image <inline-formula><alternatives>
  <tex-math><![CDATA[I]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>I</mml:mi></mml:math></alternatives></inline-formula>
  with foreground pixels <inline-formula><alternatives>
  <tex-math><![CDATA[F]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>F</mml:mi></mml:math></alternatives></inline-formula>
  and background pixels <inline-formula><alternatives>
  <tex-math><![CDATA[B]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>B</mml:mi></mml:math></alternatives></inline-formula>,
  alpha matting asks to determine opacities
  <inline-formula><alternatives>
  <tex-math><![CDATA[\alpha]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>α</mml:mi></mml:math></alternatives></inline-formula>,
  such that the equality <disp-formula><alternatives>
  <tex-math><![CDATA[I_i = \alpha_i F_i + (1-\alpha_i)B_i]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>α</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mi>F</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:msub><mml:mi>α</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:mrow></mml:math></alternatives></disp-formula>
  holds for every pixel <inline-formula><alternatives>
  <tex-math><![CDATA[i]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>i</mml:mi></mml:math></alternatives></inline-formula>.
  This problem is ill-posed since, for each pixel, we have three
  equations (one for each color channel) with seven unknown variables.
  The implemented methods rely on a trimap, which is a rough
  classification of the input image into foreground, background and
  unknown pixels, to further constrain the problem. Subsequently, the
  foreground <inline-formula><alternatives>
  <tex-math><![CDATA[F]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>F</mml:mi></mml:math></alternatives></inline-formula>
  can be extracted from the input image <inline-formula><alternatives>
  <tex-math><![CDATA[I]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>I</mml:mi></mml:math></alternatives></inline-formula>
  and the previously computed alpha matte <inline-formula><alternatives>
  <tex-math><![CDATA[\alpha]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>α</mml:mi></mml:math></alternatives></inline-formula>
  using a foreground estimation method
  (<xref alt="Figure 1" rid="figU003Agrid">Figure 1</xref>).</p>
  <p>We introduce the PyMatting toolbox for Python which implements
  various approaches to solve the alpha matting problem. Our library is
  also able to extract the foreground of an image given the alpha matte.
  The target audience are researchers of image processing and computer
  vision. The implementation aims to be computationally efficient and
  easy to use.</p>
  <sec id="implemented-methods-for-alpha-matting">
    <title>Implemented Methods for Alpha Matting</title>
    <list list-type="bullet">
      <list-item>
        <p>Closed-form Matting: Levin et al.
        (<xref alt="2008" rid="ref-levin2007closed" ref-type="bibr">2008</xref>)
        show that assuming local smoothness of pixel colors yields a
        closed-form solution to the alpha matting problem.</p>
      </list-item>
      <list-item>
        <p>KNN Matting: P. Lee &amp; Wu
        (<xref alt="2011" rid="ref-lee2011nonlocal" ref-type="bibr">2011</xref>)
        and Chen et al.
        (<xref alt="2013" rid="ref-chen2013knn" ref-type="bibr">2013</xref>)
        use nearest neighbor information to derive closed-form solutions
        to the alpha matting problem which they note to perform
        particularly well on sparse trimaps.</p>
      </list-item>
      <list-item>
        <p>Large Kernel Matting: He et al.
        (<xref alt="2010" rid="ref-he2010fast" ref-type="bibr">2010</xref>)
        propose an efficient algorithm based on a large kernel matting
        Laplacian. They show that the computational complexity of their
        method is independent of the kernel size.</p>
      </list-item>
      <list-item>
        <p>Random Walk Matting: Grady et al.
        (<xref alt="2005" rid="ref-grady2005random" ref-type="bibr">2005</xref>)
        use random walks on the pixels to estimate alpha. The calculated
        alpha of a pixel is the probability that a random walk starting
        from that pixel will reach a foreground pixel before
        encountering a background pixel.</p>
      </list-item>
      <list-item>
        <p>Learning Based Digital Matting: Zheng &amp; Kambhamettu
        (<xref alt="2009" rid="ref-zheng2009learning" ref-type="bibr">2009</xref>)
        estimate alpha using local semi-supervised learning. They assume
        that the alpha value of a pixel can be learned by a linear
        combination of the neighboring pixels.</p>
      </list-item>
    </list>
  </sec>
  <sec id="implemented-methods-for-foreground-estimation">
    <title>Implemented Methods for Foreground Estimation</title>
    <list list-type="bullet">
      <list-item>
        <p>Closed-form Foreground Estimation: For given
        <inline-formula><alternatives>
        <tex-math><![CDATA[\alpha]]></tex-math>
        <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>α</mml:mi></mml:math></alternatives></inline-formula>,
        the foreground pixels <inline-formula><alternatives>
        <tex-math><![CDATA[F]]></tex-math>
        <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>F</mml:mi></mml:math></alternatives></inline-formula>
        can be determined by making additional smoothness assumptions on
        <inline-formula><alternatives>
        <tex-math><![CDATA[F]]></tex-math>
        <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>F</mml:mi></mml:math></alternatives></inline-formula>
        and <inline-formula><alternatives>
        <tex-math><![CDATA[B]]></tex-math>
        <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>B</mml:mi></mml:math></alternatives></inline-formula>.
        Our library implements the foreground estimation by Levin et al.
        (<xref alt="2008" rid="ref-levin2007closed" ref-type="bibr">2008</xref>).</p>
      </list-item>
      <list-item>
        <p>Multi-level Foreground Estimation: Furthermore, the PyMatting
        library implements a novel multi-level approach for foreground
        estimation
        (<xref alt="Germer et al., 2020" rid="ref-germer2020fast" ref-type="bibr">Germer
        et al., 2020</xref>). For this method, our library also provides
        GPU implementations using PyCuda and PyOpenCL
        (<xref alt="Klöckner et al., 2012" rid="ref-kloeckner2012pycuda" ref-type="bibr">Klöckner
        et al., 2012</xref>).</p>
      </list-item>
    </list>
    <fig>
      <caption><p>Input image (top left) and input trimap (top right)
      are used to estimate an alpha matte (bottom left) and a foreground
      image (bottom right, composed onto a white background) using the
      Pymatting library. Input image and input trimap are courtesy of
      Rhemann et al.
      (<xref alt="2009" rid="ref-rhemann2009perceptually" ref-type="bibr">2009</xref>).
      <styled-content id="figU003Agrid"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figures/image_grid.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="installation-and-code-example">
    <title>Installation and Code Example</title>
    <p>The PyMatting library can be easily installed via
    <monospace>pip3 install pymatting</monospace>.</p>
    <p>The following code snippet demonstrates the usage of the
    library:</p>
    <code language="python">from pymatting import *
image = load_image(&quot;plant_image.png&quot;, &quot;RGB&quot;)
trimap = load_image(&quot;plant_trimap.png&quot;, &quot;GRAY&quot;)
alpha = estimate_alpha_cf(image, trimap)
foreground = estimate_foreground_cf(image, alpha)
cutout = stack_images(foreground, alpha)
save_image(&quot;result.png&quot;, cutout)</code>
    <p>The <inline-formula><alternatives>
    <tex-math><![CDATA[\texttt{estimate\_alpha\_cf}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">𝚎𝚜𝚝𝚒𝚖𝚊𝚝𝚎_𝚊𝚕𝚙𝚑𝚊_𝚌𝚏</mml:mtext></mml:math></alternatives></inline-formula>
    method implements closed-form alpha estimation, whereas the
    <inline-formula><alternatives>
    <tex-math><![CDATA[\texttt{estimate\_foreground\_cf}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">𝚎𝚜𝚝𝚒𝚖𝚊𝚝𝚎_𝚏𝚘𝚛𝚎𝚐𝚛𝚘𝚞𝚗𝚍_𝚌𝚏</mml:mtext></mml:math></alternatives></inline-formula>
    method implements the closed-form foreground estimation
    (<xref alt="Levin et al., 2008" rid="ref-levin2007closed" ref-type="bibr">Levin
    et al., 2008</xref>). The <inline-formula><alternatives>
    <tex-math><![CDATA[\texttt{stack\_images}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">𝚜𝚝𝚊𝚌𝚔_𝚒𝚖𝚊𝚐𝚎𝚜</mml:mtext></mml:math></alternatives></inline-formula>
    method can be used to compose the foreground onto a new
    background.</p>
    <p>More code examples at different levels of abstraction can be
    found in the documentation of the library.</p>
  </sec>
  <sec id="performance-comparison">
    <title>Performance Comparison</title>
    <p>Since all of the considered methods require to solve large sparse
    systems of linear equations, an efficient solver is crucial for good
    performance. Therefore, the PyMatting package implements the
    conjugate gradient method
    (<xref alt="Hestenes et al., 1952" rid="ref-hestenes1952methods" ref-type="bibr">Hestenes
    et al., 1952</xref>) together with different preconditioners that
    improve convergence: Jacobi, V-cycle
    (<xref alt="P. G. Lee &amp; Wu, 2014" rid="ref-lee2014scalable" ref-type="bibr">P.
    G. Lee &amp; Wu, 2014</xref>) and thresholded incomplete Cholesky
    decomposition
    (<xref alt="Jones &amp; Plassmann, 1995" rid="ref-jones1995improved" ref-type="bibr">Jones
    &amp; Plassmann, 1995</xref>;
    <xref alt="Kershaw, 1978" rid="ref-kershaw1978incomplete" ref-type="bibr">Kershaw,
    1978</xref>).</p>
    <p>To evaluate the performance of our implementation, we use the
    benchmark images from Rhemann et al.
    (<xref alt="2009" rid="ref-rhemann2009perceptually" ref-type="bibr">2009</xref>).
    <xref alt="Figure 2" rid="figU003Aerrors">Figure 2</xref> shows the
    mean squared error between the estimated alpha matte and the ground
    truth alpha matte, computed over the region of pixels with unknown
    alpha values. Our results are consistent with the results achieved
    by the authors’ implementations (if available).</p>
    <fig>
      <caption><p>Mean squared error between the estimated alpha matte
      and the ground truth alpha
      matte.<styled-content id="figU003Aerrors"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="figures/laplacian_quality_many_bars.pdf" xlink:title="" />
    </fig>
    <fig>
      <caption><p>Comparison of peak memory usage in MB (left) and
      runtime in seconds (right) of our implementation of the
      preconditioned CG method compared to other solvers for closed-form
      matting.<styled-content id="figU003Amemory-runtime"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="figures/memory_usage_and_running_time-crop.pdf" xlink:title="" />
    </fig>
    <fig>
      <caption><p>Comparison of runtime for different image
      sizes.<styled-content id="figU003Aruntimes"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="figures/time_image_size-crop.pdf" xlink:title="" />
    </fig>
    <p>We compare the computational runtime of our solver with other
    solvers: PyAMG
    (<xref alt="Olson &amp; Schroder, 2018" rid="ref-pyamg" ref-type="bibr">Olson
    &amp; Schroder, 2018</xref>), UMFPACK
    (<xref alt="Davis, 2004" rid="ref-umfpack" ref-type="bibr">Davis,
    2004</xref>), AMGCL
    (<xref alt="Demidov, 2019" rid="ref-amgcl" ref-type="bibr">Demidov,
    2019</xref>), MUMPS
    (<xref alt="Patrick R. Amestoy et al., 2001" rid="ref-MUMPS-a" ref-type="bibr">Patrick
    R. Amestoy et al., 2001</xref>;
    <xref alt="P. R. Amestoy et al., 2006" rid="ref-MUMPS-b" ref-type="bibr">P.
    R. Amestoy et al., 2006</xref>), Eigen
    (<xref alt="Guennebaud et al., 2010" rid="ref-eigen" ref-type="bibr">Guennebaud
    et al., 2010</xref>) and SuperLU
    (<xref alt="Li et al., 1999" rid="ref-li1999superlu" ref-type="bibr">Li
    et al., 1999</xref>).
    <xref alt="Figure 3" rid="figU003Amemory-runtime">Figure 3</xref>
    and <xref alt="Figure 4" rid="figU003Aruntimes">Figure 4</xref> show
    that our implemented conjugate gradient method in combination with
    the incomplete Cholesky decomposition preconditioner outperforms the
    other methods in terms of computational runtime by a large margin.
    For the iterative solver, we use an absolute tolerance of
    <inline-formula><alternatives>
    <tex-math><![CDATA[10^{-7}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mn>10</mml:mn><mml:mrow><mml:mo>−</mml:mo><mml:mn>7</mml:mn></mml:mrow></mml:msup></mml:math></alternatives></inline-formula>,
    which we scale with the number of known pixels, i.e., pixels that
    are either marked as foreground or background in the trimap. The
    benchmarked linear system arises from the matting Laplacian by Levin
    et al.
    (<xref alt="2008" rid="ref-levin2007closed" ref-type="bibr">2008</xref>).
    <xref alt="Figure 3" rid="figU003Amemory-runtime">Figure 3</xref>
    shows that our solver also outperforms the other solvers in terms of
    memory usage. All benchmarks are performed on a high-performance
    computer with an Intel Xeon Gold 6134 CPU (3.20 GHz) and 196 GB
    memory running Ubuntu 18.04. For better comparability, only a single
    thread is used.</p>
  </sec>
  <sec id="compatibility-and-extendability">
    <title>Compatibility and Extendability</title>
    <p>The PyMatting package has been tested on Windows 10, Ubuntu 16.04
    and macOS 10.15.2. New methods can easily be implemented by adding
    new definitions of graph Laplacian matrices. We plan on continuously
    extending our library with new methods.</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-fan2019hierarchical">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Fan</surname><given-names>Z.</given-names></name>
          <name><surname>Lu</surname><given-names>J.</given-names></name>
          <name><surname>Wei</surname><given-names>C.</given-names></name>
          <name><surname>Huang</surname><given-names>H.</given-names></name>
          <name><surname>Cai</surname><given-names>X.</given-names></name>
          <name><surname>Chen</surname><given-names>X.</given-names></name>
        </person-group>
        <article-title>A hierarchical image matting model for blood vessel segmentation in fundus images</article-title>
        <source>IEEE Transactions on Image Processing</source>
        <year iso-8601-date="2019-05">2019</year><month>05</month>
        <volume>28</volume>
        <issue>5</issue>
        <issn>1941-0042</issn>
        <pub-id pub-id-type="doi">10.1109/TIP.2018.2885495</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-zhaozheng2010understanding">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Yin</surname><given-names>Zhaozheng</given-names></name>
          <name><surname>Li</surname><given-names>Kang</given-names></name>
          <name><surname>Kanade</surname><given-names>Takeo</given-names></name>
          <name><surname>Chen</surname><given-names>Mei</given-names></name>
        </person-group>
        <article-title>Understanding the optics to aid microscopy image segmentation</article-title>
        <source>Medical Image Computing and Computer-Assisted Intervention – MICCAI 2010</source>
        <person-group person-group-type="editor">
          <name><surname>Jiang</surname><given-names>Tianzi</given-names></name>
          <name><surname>Navab</surname><given-names>Nassir</given-names></name>
          <name><surname>Pluim</surname><given-names>Josien P. W.</given-names></name>
          <name><surname>Viergever</surname><given-names>Max A.</given-names></name>
        </person-group>
        <publisher-name>Springer Berlin Heidelberg</publisher-name>
        <publisher-loc>Berlin, Heidelberg</publisher-loc>
        <year iso-8601-date="2010">2010</year>
        <isbn>978-3-642-15705-9</isbn>
        <pub-id pub-id-type="doi">10.1007/978-3-642-15705-9_26</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-kanade2011cell">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Kanade</surname><given-names>T.</given-names></name>
          <name><surname>Yin</surname><given-names>Z.</given-names></name>
          <name><surname>Bise</surname><given-names>R.</given-names></name>
          <name><surname>Huh</surname><given-names>S.</given-names></name>
          <name><surname>Eom</surname><given-names>S.</given-names></name>
          <name><surname>Sandbothe</surname><given-names>M. F.</given-names></name>
          <name><surname>Chen</surname><given-names>M.</given-names></name>
        </person-group>
        <article-title>Cell image analysis: Algorithms, system and applications</article-title>
        <source>2011 IEEE Workshop on Applications of Computer Vision (WACV)</source>
        <year iso-8601-date="2011-01">2011</year><month>01</month>
        <volume></volume>
        <issn>1550-5790</issn>
        <pub-id pub-id-type="doi">10.1109/WACV.2011.5711528</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-chen2013knn">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Chen</surname><given-names>Q.</given-names></name>
          <name><surname>Li</surname><given-names>D.</given-names></name>
          <name><surname>Tang</surname><given-names>C.</given-names></name>
        </person-group>
        <article-title>KNN matting</article-title>
        <source>IEEE Transactions on Pattern Analysis and Machine Intelligence</source>
        <year iso-8601-date="2013">2013</year>
        <volume>35</volume>
        <issue>9</issue>
        <issn>1939-3539</issn>
        <pub-id pub-id-type="doi">10.1109/TPAMI.2013.18</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-germer2020fast">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Germer</surname><given-names>Thomas</given-names></name>
          <name><surname>Uelwer</surname><given-names>Tobias</given-names></name>
          <name><surname>Conrad</surname><given-names>Stefan</given-names></name>
          <name><surname>Harmeling</surname><given-names>Stefan</given-names></name>
        </person-group>
        <article-title>Fast multi-level foreground estimation</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://arxiv.org/abs/2006.14970</uri>
      </element-citation>
    </ref>
    <ref id="ref-kloeckner2012pycuda">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Klöckner</surname><given-names>Andreas</given-names></name>
          <name><surname>Pinto</surname><given-names>Nicolas</given-names></name>
          <name><surname>Lee</surname><given-names>Yunsup</given-names></name>
          <name><surname>Catanzaro</surname><given-names>B.</given-names></name>
          <name><surname>Ivanov</surname><given-names>Paul</given-names></name>
          <name><surname>Fasih</surname><given-names>Ahmed</given-names></name>
        </person-group>
        <article-title>PyCUDA and PyOpenCL: A Scripting-Based Approach to GPU Run-Time Code Generation</article-title>
        <source>Parallel Computing</source>
        <year iso-8601-date="2012">2012</year>
        <volume>38</volume>
        <issue>3</issue>
        <issn>0167-8191</issn>
        <pub-id pub-id-type="doi">10.1016/j.parco.2011.09.001</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-levin2007closed">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Levin</surname><given-names>A.</given-names></name>
          <name><surname>Lischinski</surname><given-names>D.</given-names></name>
          <name><surname>Weiss</surname><given-names>Y.</given-names></name>
        </person-group>
        <article-title>A closed-form solution to natural image matting</article-title>
        <source>IEEE Transactions on Pattern Analysis and Machine Intelligence</source>
        <year iso-8601-date="2008-02">2008</year><month>02</month>
        <volume>30</volume>
        <issue>2</issue>
        <issn>1939-3539</issn>
        <pub-id pub-id-type="doi">10.1109/TPAMI.2007.1177</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-zheng2009learning">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Zheng</surname><given-names>Y.</given-names></name>
          <name><surname>Kambhamettu</surname><given-names>C.</given-names></name>
        </person-group>
        <article-title>Learning based digital matting</article-title>
        <source>2009 IEEE 12th International Conference on Computer Vision</source>
        <year iso-8601-date="2009">2009</year>
        <volume></volume>
        <issn>2380-7504</issn>
        <pub-id pub-id-type="doi">10.1109/ICCV.2009.5459326</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-grady2005random">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Grady</surname><given-names>Leo</given-names></name>
          <name><surname>Schiwietz</surname><given-names>Thomas</given-names></name>
          <name><surname>Aharon</surname><given-names>Shmuel</given-names></name>
          <name><surname>Westermann</surname><given-names>Rüdiger</given-names></name>
        </person-group>
        <article-title>Random walks for interactive alpha-matting</article-title>
        <source>Proceedings of VIIP</source>
        <year iso-8601-date="2005">2005</year>
        <volume>2005</volume>
      </element-citation>
    </ref>
    <ref id="ref-li1999superlu">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Li</surname><given-names>Xiaoye S</given-names></name>
          <name><surname>Demmel</surname><given-names>James W</given-names></name>
          <name><surname>Gilbert</surname><given-names>John R</given-names></name>
          <name><surname>Grigori</surname><given-names>Laura</given-names></name>
          <name><surname>Shao</surname><given-names>Meiyue</given-names></name>
          <name><surname>Yamazaki</surname><given-names>Ichitaro</given-names></name>
        </person-group>
        <article-title>SuperLU users’ guide</article-title>
        <source>Lawrence Berkeley National Laboratory</source>
        <year iso-8601-date="1999">1999</year>
        <pub-id pub-id-type="doi">10.2172/751785</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-umfpack">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Davis</surname><given-names>Timothy A.</given-names></name>
        </person-group>
        <article-title>Algorithm 832: UMFPACK V4.3—an unsymmetric-pattern multifrontal method</article-title>
        <source>ACM Transactions on Mathematical Software</source>
        <publisher-name>Association for Computing Machinery</publisher-name>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <year iso-8601-date="2004-06">2004</year><month>06</month>
        <volume>30</volume>
        <issue>2</issue>
        <issn>0098-3500</issn>
        <uri>https://doi.org/10.1145/992200.992206</uri>
        <pub-id pub-id-type="doi">10.1145/992200.992206</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-amgcl">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Demidov</surname><given-names>D.</given-names></name>
        </person-group>
        <article-title>AMGCL: An efficient, flexible, and extensible algebraic multigrid implementation</article-title>
        <source>Lobachevskii Journal of Mathematics</source>
        <year iso-8601-date="2019-05-01">2019</year><month>05</month><day>01</day>
        <volume>40</volume>
        <issue>5</issue>
        <issn>1818-9962</issn>
        <uri>https://doi.org/10.1134/S1995080219050056</uri>
        <pub-id pub-id-type="doi">10.1134/S1995080219050056</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-MUMPS-a">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Amestoy</surname><given-names>Patrick R.</given-names></name>
          <name><surname>Duff</surname><given-names>Iain S.</given-names></name>
          <name><surname>L’Excellent</surname><given-names>Jean-Yves</given-names></name>
          <name><surname>Koster</surname><given-names>Jacko</given-names></name>
        </person-group>
        <article-title>A fully asynchronous multifrontal solver using distributed dynamic scheduling</article-title>
        <source>SIAM Journal on Matrix Analysis and Applications</source>
        <year iso-8601-date="2001">2001</year>
        <volume>23</volume>
        <issue>1</issue>
        <uri>https://doi.org/10.1137/S0895479899358194</uri>
        <pub-id pub-id-type="doi">10.1137/S0895479899358194</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-MUMPS-b">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Amestoy</surname><given-names>P. R.</given-names></name>
          <name><surname>Guermouche</surname><given-names>A.</given-names></name>
          <name><surname>L’Excellent</surname><given-names>J.-Y.</given-names></name>
          <name><surname>Pralet</surname><given-names>S.</given-names></name>
        </person-group>
        <article-title>Hybrid scheduling for the parallel solution of linear systems</article-title>
        <source>Parallel Computing</source>
        <year iso-8601-date="2006">2006</year>
        <volume>32</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1016/j.parco.2005.07.004</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-eigen">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Guennebaud</surname><given-names>Gaël</given-names></name>
          <name><surname>Jacob</surname><given-names>Benoît</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>Eigen v3</article-title>
        <publisher-name>http://eigen.tuxfamily.org</publisher-name>
        <year iso-8601-date="2010">2010</year>
      </element-citation>
    </ref>
    <ref id="ref-pyamg">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Olson</surname><given-names>L. N.</given-names></name>
          <name><surname>Schroder</surname><given-names>J. B.</given-names></name>
        </person-group>
        <article-title>PyAMG: Algebraic multigrid solvers in Python v4.0</article-title>
        <year iso-8601-date="2018">2018</year>
        <uri>https://github.com/pyamg/pyamg</uri>
      </element-citation>
    </ref>
    <ref id="ref-he2010fast">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>He</surname><given-names>K.</given-names></name>
          <name><surname>Sun</surname><given-names>J.</given-names></name>
          <name><surname>Tang</surname><given-names>X.</given-names></name>
        </person-group>
        <article-title>Fast matting using large kernel matting laplacian matrices</article-title>
        <source>2010 IEEE Computer Society Conference on Computer Vision and Pattern Recognition</source>
        <year iso-8601-date="2010">2010</year>
        <volume></volume>
        <issn>1063-6919</issn>
        <pub-id pub-id-type="doi">10.1109/CVPR.2010.5539896</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-rhemann2009perceptually">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Rhemann</surname><given-names>C.</given-names></name>
          <name><surname>Rother</surname><given-names>C.</given-names></name>
          <name><surname>Wang</surname><given-names>J.</given-names></name>
          <name><surname>Gelautz</surname><given-names>M.</given-names></name>
          <name><surname>Kohli</surname><given-names>P.</given-names></name>
          <name><surname>Rott</surname><given-names>P.</given-names></name>
        </person-group>
        <article-title>A perceptually motivated online benchmark for image matting</article-title>
        <source>2009 IEEE Conference on Computer Vision and Pattern Recognition</source>
        <year iso-8601-date="2009">2009</year>
        <volume></volume>
        <issn>1063-6919</issn>
        <pub-id pub-id-type="doi">10.1109/CVPR.2009.5206503</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-lee2014scalable">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lee</surname><given-names>Philip G</given-names></name>
          <name><surname>Wu</surname><given-names>Ying</given-names></name>
        </person-group>
        <article-title>Scalable matting: A sub-linear approach</article-title>
        <source>arXiv preprint arXiv:1404.3933</source>
        <year iso-8601-date="2014">2014</year>
      </element-citation>
    </ref>
    <ref id="ref-kershaw1978incomplete">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kershaw</surname><given-names>David S</given-names></name>
        </person-group>
        <article-title>The incomplete cholesky—conjugate gradient method for the iterative solution of systems of linear equations</article-title>
        <source>Journal of Computational Physics</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="1978">1978</year>
        <volume>26</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1016/0021-9991(78)90098-0</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-hestenes1952methods">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hestenes</surname><given-names>Magnus R</given-names></name>
          <name><surname>Stiefel</surname><given-names>Eduard</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>Methods of conjugate gradients for solving linear systems</article-title>
        <source>Journal of Research of the National Bureau of Standards</source>
        <year iso-8601-date="1952">1952</year>
        <volume>49</volume>
        <issue>6</issue>
        <pub-id pub-id-type="doi">10.1201/9781351069397-24</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-lee2011nonlocal">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Lee</surname><given-names>P.</given-names></name>
          <name><surname>Wu</surname><given-names>Y.</given-names></name>
        </person-group>
        <article-title>Nonlocal matting</article-title>
        <source>CVPR 2011</source>
        <year iso-8601-date="2011">2011</year>
        <volume></volume>
        <issn>1063-6919</issn>
        <pub-id pub-id-type="doi">10.1109/CVPR.2011.5995665</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-jones1995improved">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Jones</surname><given-names>Mark T.</given-names></name>
          <name><surname>Plassmann</surname><given-names>Paul E.</given-names></name>
        </person-group>
        <article-title>An improved incomplete cholesky factorization</article-title>
        <source>ACM Transactions on Mathematical Software</source>
        <publisher-name>Association for Computing Machinery</publisher-name>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <year iso-8601-date="1995-03">1995</year><month>03</month>
        <volume>21</volume>
        <issue>1</issue>
        <issn>0098-3500</issn>
        <uri>https://doi.org/10.1145/200979.200981</uri>
        <pub-id pub-id-type="doi">10.1145/200979.200981</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1418</article-id>
<article-id pub-id-type="doi">10.21105/joss.01418</article-id>
<title-group>
<article-title>Container Tree: Software to Model Container Filesystems,
Packages, and Inheritance</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4387-3819</contrib-id>
<string-name>Vanessa Sochat</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Stanford University Research Computing</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-03-23">
<day>23</day>
<month>3</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>37</issue>
<fpage>1418</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>containers</kwd>
<kwd>docker</kwd>
<kwd>reproducibility</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Container technology is the unit of operation to ensure everything
  from scientific reproducibility to reliable enterprise deployment.
  However, despite this growing popularity, the actual study of
  containers, including inheritance structures, packaging, and
  filesystems, is a new problem that has not been addressed. Arguably, a
  reason for this lack of study comes down to missing software that can
  represent such structures. While container registries exist like
  Docker
  (<xref alt="Merkel, 2014" rid="ref-Merkel2014-da" ref-type="bibr">Merkel,
  2014</xref>) Hub, Quay.io, and Singularity Hub
  (<xref alt="Sochat et al., 2017" rid="ref-Sochat2017-ud" ref-type="bibr">Sochat
  et al., 2017</xref>), their search functionality is limited in the
  detail they are able to provide, and their purpose is not to directly
  serve scientific pursuit. Here I present software,
  <ext-link ext-link-type="uri" xlink:href="https://singularityhub.github.io/container-tree/">Container
  Tree</ext-link> that provides data structures well suited to directly
  study the inheritance, packaging, and filesystems of containers.
  Complete documentation and code is available
  (<xref alt="Container-Tree, 2018" rid="ref-container-tree" ref-type="bibr"><italic>Container-Tree</italic>,
  2018</xref>).</p>
  <sec id="container-file-trees">
    <title>Container File Trees</title>
    <p>The Container File Tree will create a tree that describes one or
    more containers. Specifically, each node in the tree is a folder or
    file on the path, with metadata stored such as the number of
    containers represented at the node, and tags that can be used to
    store container identifiers or other metadata of interest. An actual
    container filesystem, appropriately, is structured in the same way.
    The Container Tree data structure adds easy methods to search,
    trace, and find particular files or folder, and also feeds directly
    into useful interactive visualizations to explore the filesystem.
    For a tree with more than one container or tag, the software also
    provides methods to calculate similarity. A
    <ext-link ext-link-type="uri" xlink:href="https://singularityhub.github.io/container-tree/examples/files_tree/">tutorial</ext-link>
    is available.</p>
  </sec>
  <sec id="container-package-trees">
    <title>Container Package Trees</title>
    <p>Container Package Trees allow for the study of packages installed
    from popular managers Pypi and Apt, including names and versions
    across one or more containers. By way of the Container Diff
    (<xref alt="Container-Diff, 2017" rid="ref-container-diff" ref-type="bibr"><italic>Container-Diff</italic>,
    2017</xref>) open source tool, the user can quickly extract package
    information for one or more containers to create a package tree. The
    package trees are ideal data structures to store a representation of
    packages across containers. From the container Apt or Pip tree the
    user can easily compare containers based on packages within, or
    export a feature matrix with containers (rows) by packages
    (columns). A
    <ext-link ext-link-type="uri" xlink:href="https://singularityhub.github.io/container-tree/examples/package_tree/">tutorial</ext-link>
    is available for the interested user.</p>
  </sec>
  <sec id="collection-trees">
    <title>Collection Trees</title>
    <p>The container collection tree aims to help solve one of the more
    significant problems related to understanding containers: the
    problem that itâ€™s incredibly challenging to create an inheritance
    structure to understand how containers build upon one another. A
    container Collection Tree represents nodes as container namespaces,
    and each node contains a dictionary of the possible tags for the
    general namespace. The Container Collection Tree exposes functions
    to trace, search, and find containers based on a query of interest,
    and also export the tree structure as an actual filesystem. By way
    of mapping the inheritance tree to an actual filesystem, we can take
    advantage of linux command line tools (e.g., find, grep) to explore
    the space. Akin to the container file tree, the interested
    researcher can use the tree structure to calculate distances
    (similarity) between nodes (container collections) in the tree. A
    detailed
    <ext-link ext-link-type="uri" xlink:href="https://singularityhub.github.io/container-tree/examples/collection_tree/">example</ext-link>
    that creates, queries, and then exports a Collection Tree to the
    filesystem is also available.</p>
    <p>The Container Tree software aims to directly help researchers to
    study different aspects of containers, an essential task if we are
    to better optimize their development, distribution, and function.
    More information on containertree, including tutorials, and classes
    is provided at the Container Tree official documentation. This is an
    Open Source project, and so feedback and contributions are
    welcome.</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Merkel2014-da">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Merkel</surname><given-names>Dirk</given-names></name>
        </person-group>
        <article-title>Docker: Lightweight linux containers for consistent development and deployment</article-title>
        <source>Linux J.</source>
        <publisher-name>Belltown Media</publisher-name>
        <publisher-loc>Houston, TX</publisher-loc>
        <year iso-8601-date="2014-03">2014</year><month>03</month>
        <volume>2014</volume>
      </element-citation>
    </ref>
    <ref id="ref-container-tree">
      <element-citation>
        <article-title>Container-tree</article-title>
        <publisher-name>Github; https://github.com/singularityhub/container-tree</publisher-name>
        <year iso-8601-date="2018">2018</year>
        <pub-id pub-id-type="doi">10.5281/zenodo.2602127</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-container-diff">
      <element-citation>
        <article-title>Container-diff</article-title>
        <publisher-name>Github; https://www.github.com/GoogleContainerTools/container-diff</publisher-name>
        <year iso-8601-date="2017">2017</year>
      </element-citation>
    </ref>
    <ref id="ref-Sochat2017-ud">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Sochat</surname><given-names>Vanessa V</given-names></name>
          <name><surname>Prybol</surname><given-names>Cameron J</given-names></name>
          <name><surname>Kurtzer</surname><given-names>Gregory M</given-names></name>
        </person-group>
        <article-title>Enhancing reproducibility in scientific computing: Metrics and registry for singularity containers</article-title>
        <source>PLoS One</source>
        <year iso-8601-date="2017-11">2017</year><month>11</month>
        <volume>12</volume>
        <issue>11</issue>
        <pub-id pub-id-type="doi">https://doi.org/10.1371/journal.pone.0188511</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

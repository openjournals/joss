<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2945</article-id>
<article-id pub-id-type="doi">10.21105/joss.02945</article-id>
<title-group>
<article-title>libCEED: Fast algebra for high-order element-based
discretizations</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-9945-0639</contrib-id>
<string-name>Jed Brown</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5054-4784</contrib-id>
<string-name>Ahmad Abdelfattah</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1129-2056</contrib-id>
<string-name>Valeria Barra</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6060-4082</contrib-id>
<string-name>Natalie Beams</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-2421-1999</contrib-id>
<string-name>Jean-Sylvain Camier</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1793-5622</contrib-id>
<string-name>Veselin Dobrev</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5831-561X</contrib-id>
<string-name>Yohann Dudouit</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-0965-214X</contrib-id>
<string-name>Leila Ghaffari</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-2810-3090</contrib-id>
<string-name>Tzanio Kolev</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<string-name>David Medina</string-name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4885-2934</contrib-id>
<string-name>Will Pazner</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6102-6560</contrib-id>
<string-name>Thilina Ratnayaka</string-name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-2980-0899</contrib-id>
<string-name>Jeremy Thompson</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5937-7959</contrib-id>
<string-name>Stan Tomov</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>University of Colorado at Boulder</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Lawrence Livermore National Laboratory</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>University of Tennessee</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Occalytics LLC</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>University of Illinois at Urbana-Champaign</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-07-09">
<day>9</day>
<month>7</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>63</issue>
<fpage>2945</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>high-performance computing</kwd>
<kwd>high-order methods</kwd>
<kwd>finite elements</kwd>
<kwd>spectral elements</kwd>
<kwd>matrix-free</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary-and-statement-of-need">
  <title>Summary and statement of need</title>
  <p>Finite element methods are widely used to solve partial
  differential equations (PDE) in science and engineering, but their
  standard implementation
  (<xref alt="Arndt et al., 2020" rid="ref-dealII92" ref-type="bibr">Arndt
  et al., 2020</xref>;
  <xref alt="Kirk et al., 2006" rid="ref-libMeshPaper" ref-type="bibr">Kirk
  et al., 2006</xref>;
  <xref alt="Logg et al., 2012" rid="ref-LoggMardalWells2012" ref-type="bibr">Logg
  et al., 2012</xref>) relies on assembling sparse matrices. Sparse
  matrix multiplication and triangular operations perform a scalar
  multiply and add for each nonzero entry, just 2 floating point
  operations (flops) per scalar that must be loaded from memory
  (<xref alt="Williams et al., 2009" rid="ref-williams2009roofline" ref-type="bibr">Williams
  et al., 2009</xref>). Modern hardware is capable of nearly 100 flops
  per scalar streamed from memory
  (<xref alt="Rupp, 2020" rid="ref-kruppcomparison" ref-type="bibr">Rupp,
  2020</xref>) so sparse matrix operations cannot achieve more than
  about 2% utilization of arithmetic units. Matrix assembly becomes even
  more problematic when the polynomial degree
  <inline-formula><alternatives>
  <tex-math><![CDATA[p]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>p</mml:mi></mml:math></alternatives></inline-formula>
  of the basis functions is increased, resulting in
  <inline-formula><alternatives>
  <tex-math><![CDATA[O(p^d)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msup><mml:mi>p</mml:mi><mml:mi>d</mml:mi></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  storage and <inline-formula><alternatives>
  <tex-math><![CDATA[O(p^{2d})]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msup><mml:mi>p</mml:mi><mml:mrow><mml:mn>2</mml:mn><mml:mi>d</mml:mi></mml:mrow></mml:msup><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  compute per degree of freedom (DoF) in <inline-formula><alternatives>
  <tex-math><![CDATA[d]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>d</mml:mi></mml:math></alternatives></inline-formula>
  dimensions. Methods pioneered by the spectral element community
  (<xref alt="Deville et al., 2002" rid="ref-deville2002highorder" ref-type="bibr">Deville
  et al., 2002</xref>;
  <xref alt="Orszag, 1980" rid="ref-OrszagU003A1980" ref-type="bibr">Orszag,
  1980</xref>) exploit problem structure to reduce costs to
  <inline-formula><alternatives>
  <tex-math><![CDATA[O(1)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  storage and <inline-formula><alternatives>
  <tex-math><![CDATA[O(p)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>p</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  compute per DoF, with very high utilization of modern CPUs and GPUs.
  Unfortunately, high-quality implementations have been relegated to
  applications and intrusive frameworks that are often difficult to
  extend to new problems or incorporate into legacy applications,
  especially when strong preconditioners are required.</p>
  <p><monospace>libCEED</monospace>, the Code for Efficient Extensible
  Discretization
  (<xref alt="Abdelfattah et al., 2021" rid="ref-libceed-user-manual" ref-type="bibr">Abdelfattah
  et al., 2021</xref>), is a lightweight library that provides a purely
  algebraic interface for linear and nonlinear operators and
  preconditioners with element-based discretizations.
  <monospace>libCEED</monospace> provides portable performance via
  run-time selection of implementations optimized for CPUs and GPUs,
  including support for just-in-time (JIT) compilation. It is designed
  for convenient use in new and legacy software, and offers interfaces
  in C99
  (<xref alt="International Standards Organisation, 1999" rid="ref-C99-lang" ref-type="bibr">International
  Standards Organisation, 1999</xref>), Fortran77
  (<xref alt="ANSI, 1978" rid="ref-Fortran77-lang" ref-type="bibr">ANSI,
  1978</xref>), Python
  (<xref alt="Python, 2021" rid="ref-Python-lang" ref-type="bibr"><italic>Python</italic>,
  2021</xref>), Julia
  (<xref alt="Bezanson et al., 2017" rid="ref-Julia-lang" ref-type="bibr">Bezanson
  et al., 2017</xref>), and Rust
  (<xref alt="Rust, 2021" rid="ref-Rust-lang" ref-type="bibr"><italic>Rust</italic>,
  2021</xref>). Users and library developers can integrate
  <monospace>libCEED</monospace> at a low level into existing
  applications in place of existing matrix-vector products without
  significant refactoring of their own discretization infrastructure.
  Alternatively, users can utilize integrated
  <monospace>libCEED</monospace> support in MFEM
  (<xref alt="Anderson et al., 2020" rid="ref-mfem-paper" ref-type="bibr">Anderson
  et al., 2020</xref>;
  <xref alt="MFEM, 2021" rid="ref-MFEMlibrary" ref-type="bibr"><italic>MFEM</italic>,
  2021</xref>).</p>
  <p>In addition to supporting applications and discretization
  libraries, <monospace>libCEED</monospace> provides a platform for
  performance engineering and co-design, as well as an algebraic
  interface for solvers research like adaptive
  <inline-formula><alternatives>
  <tex-math><![CDATA[p]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>p</mml:mi></mml:math></alternatives></inline-formula>-multigrid,
  much like how sparse matrix libraries enable development and
  deployment of algebraic multigrid solvers.</p>
</sec>
<sec id="concepts-and-interface">
  <title>Concepts and interface</title>
  <p>Consider finite element discretization of a problem based on a weak
  form with one weak derivative: find <inline-formula><alternatives>
  <tex-math><![CDATA[u]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>u</mml:mi></mml:math></alternatives></inline-formula>
  such that</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[ v^T F(u) := \int_\Omega v \cdot f_0(u, \nabla u) + \nabla v \!:\! f_1(u, \nabla u) = 0 \quad \forall v, ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msup><mml:mi>v</mml:mi><mml:mi>T</mml:mi></mml:msup><mml:mi>F</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>:=</mml:mo><mml:msub><mml:mo>∫</mml:mo><mml:mi>Ω</mml:mi></mml:msub><mml:mi>v</mml:mi><mml:mo>⋅</mml:mo><mml:msub><mml:mi>f</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:mi>∇</mml:mi><mml:mi>u</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mi>∇</mml:mi><mml:mi>v</mml:mi><mml:mspace width="-0.167em"></mml:mspace><mml:mo>:</mml:mo><mml:mspace width="-0.167em"></mml:mspace><mml:msub><mml:mi>f</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:mi>∇</mml:mi><mml:mi>u</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>0</mml:mn><mml:mspace width="1.0em"></mml:mspace><mml:mo>∀</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>where the functions <inline-formula><alternatives>
  <tex-math><![CDATA[f_0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>f</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[f_1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>f</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
  define the physics and possible stabilization of the problem
  (<xref alt="Brown, 2010" rid="ref-BrownU003A2010" ref-type="bibr">Brown,
  2010</xref>) and the functions <inline-formula><alternatives>
  <tex-math><![CDATA[u]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>u</mml:mi></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[v]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>v</mml:mi></mml:math></alternatives></inline-formula>
  live in a suitable space. Integrals in the weak form are evaluated by
  summing over elements <inline-formula><alternatives>
  <tex-math><![CDATA[e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>e</mml:mi></mml:math></alternatives></inline-formula>,</p>
  <p><disp-formula><alternatives>
  <tex-math><![CDATA[ F(u) = \sum_e \mathcal E_e^T B_e^T W_e f(B_e \mathcal E_e u), ]]></tex-math>
  <mml:math display="block" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>F</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>u</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:munder><mml:mo>∑</mml:mo><mml:mi>e</mml:mi></mml:munder><mml:msubsup><mml:mstyle mathvariant="script"><mml:mi>ℰ</mml:mi></mml:mstyle><mml:mi>e</mml:mi><mml:mi>T</mml:mi></mml:msubsup><mml:msubsup><mml:mi>B</mml:mi><mml:mi>e</mml:mi><mml:mi>T</mml:mi></mml:msubsup><mml:msub><mml:mi>W</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:mi>f</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>B</mml:mi><mml:mi>e</mml:mi></mml:msub><mml:msub><mml:mstyle mathvariant="script"><mml:mi>ℰ</mml:mi></mml:mstyle><mml:mi>e</mml:mi></mml:msub><mml:mi>u</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></disp-formula></p>
  <p>where <inline-formula><alternatives>
  <tex-math><![CDATA[\mathcal E_e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mstyle mathvariant="script"><mml:mi>ℰ</mml:mi></mml:mstyle><mml:mi>e</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  restricts to element <inline-formula><alternatives>
  <tex-math><![CDATA[e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>e</mml:mi></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[B_e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>B</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  evaluates solution values and derivatives to quadrature points,
  <inline-formula><alternatives>
  <tex-math><![CDATA[f]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>f</mml:mi></mml:math></alternatives></inline-formula>
  acts independently at quadrature points, and
  <inline-formula><alternatives>
  <tex-math><![CDATA[W_e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>W</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  is a (diagonal) weighting at quadrature points. By grouping the
  operations <inline-formula><alternatives>
  <tex-math><![CDATA[W_e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>W</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[f]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>f</mml:mi></mml:math></alternatives></inline-formula>
  into a point-block diagonal <inline-formula><alternatives>
  <tex-math><![CDATA[D]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>D</mml:mi></mml:math></alternatives></inline-formula>
  and stacking the restrictions <inline-formula><alternatives>
  <tex-math><![CDATA[\mathcal E_e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mstyle mathvariant="script"><mml:mi>ℰ</mml:mi></mml:mstyle><mml:mi>e</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  and basis actions <inline-formula><alternatives>
  <tex-math><![CDATA[B_e]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>B</mml:mi><mml:mi>e</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  for each element, we can express the global residual in operator
  notation
  (<xref alt="Figure 1" rid="figU003Adecomposition">Figure 1</xref>),
  where <inline-formula><alternatives>
  <tex-math><![CDATA[\mathcal P]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="script"><mml:mi>𝒫</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>
  is an optional external operator, such as the parallel restriction in
  MPI-based
  (<xref alt="Gropp et al., 2014" rid="ref-gropp2014using" ref-type="bibr">Gropp
  et al., 2014</xref>) solvers. Inhomogeneous Neumann, Robin, and
  nonlinear boundary conditions can be added in a similar fashion by
  adding terms integrated over boundary faces while Dirichlet boundary
  conditions can be added by setting the target values prior to applying
  the operator representing the weak form. Similar face integral terms
  can also be used to represent discontinuous Galerkin formulations.</p>
  <fig>
    <caption><p><monospace>libCEED</monospace> uses a logical
    decomposition to define element-based discretizations, with
    optimized implementations of the action and preconditioning
    ingredients.
    <styled-content id="figU003Adecomposition"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="img/libCEED-2-trim.pdf" xlink:title="" />
  </fig>
  <p><monospace>libCEED</monospace>’s native C interface is
  object-oriented, providing data types for each logical object in the
  decomposition.</p>
  <table-wrap>
    <table>
      <thead>
        <tr>
          <th>Symbol</th>
          <th><monospace>libCEED</monospace> type</th>
          <th align="right">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><inline-formula><alternatives>
          <tex-math><![CDATA[D]]></tex-math>
          <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>D</mml:mi></mml:math></alternatives></inline-formula></td>
          <td><monospace>CeedQFunction</monospace></td>
          <td align="right">User-defined action at quadrature
          points</td>
        </tr>
        <tr>
          <td><inline-formula><alternatives>
          <tex-math><![CDATA[B]]></tex-math>
          <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>B</mml:mi></mml:math></alternatives></inline-formula></td>
          <td><monospace>CeedBasis</monospace></td>
          <td align="right">Basis evaluation to quadrature
          (dense/structured)</td>
        </tr>
        <tr>
          <td><inline-formula><alternatives>
          <tex-math><![CDATA[\mathcal E]]></tex-math>
          <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="script"><mml:mi>ℰ</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula></td>
          <td><monospace>CeedElemRestriction</monospace></td>
          <td align="right">Restriction to each element
          (sparse/boolean)</td>
        </tr>
        <tr>
          <td><inline-formula><alternatives>
          <tex-math><![CDATA[A]]></tex-math>
          <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>A</mml:mi></mml:math></alternatives></inline-formula></td>
          <td><monospace>CeedOperator</monospace></td>
          <td align="right">Linear or nonlinear operator acting on
          L-vectors</td>
        </tr>
      </tbody>
    </table>
  </table-wrap>
  <p><monospace>libCEED</monospace> implementations (“backends”) are
  free to reorder and fuse computational steps (including eliding memory
  to store intermediate representations) so long as the mathematical
  properties of the operator <inline-formula><alternatives>
  <tex-math><![CDATA[A]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>A</mml:mi></mml:math></alternatives></inline-formula>
  are preserved. A <monospace>CeedOperator</monospace> is composed of
  one or more operators defined as in
  <xref alt="Figure 1" rid="figU003Adecomposition">Figure 1</xref>, and
  acts on a <monospace>CeedVector</monospace>, which typically
  encapsulates zero-copy access to host or device memory provided by the
  caller. The element restriction <inline-formula><alternatives>
  <tex-math><![CDATA[\mathcal E]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="script"><mml:mi>ℰ</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>
  requires mesh topology and a numbering of DoFs, and may be a no-op
  when data is already composed by element (such as with discontinuous
  Galerkin methods). The discrete basis <inline-formula><alternatives>
  <tex-math><![CDATA[B]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>B</mml:mi></mml:math></alternatives></inline-formula>
  is the purely algebraic expression of a finite element basis (shape
  functions) and quadrature; it often possesses structure that is
  exploited to speed up its action. Some constructors are provided for
  arbitrary polynomial degree <inline-formula><alternatives>
  <tex-math><![CDATA[H^1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mi>H</mml:mi><mml:mn>1</mml:mn></mml:msup></mml:math></alternatives></inline-formula>
  Lagrange bases with a tensor-product representation due to the
  computational efficiency of computing solution values and derivatives
  at quadrature points via tensor contractions. However, the user can
  define a <monospace>CeedBasis</monospace> for arbitrary element
  topology including tetrahedra, prisms, and other realizations of
  abstract polytopes, by providing quadrature weights and the matrices
  used to compute solution values and derivatives at quadrature points
  from the DoFs on the element.</p>
  <p>The physics (weak form) is expressed through
  <monospace>CeedQFunction</monospace>, which can either be defined by
  the user or selected from a gallery distributed with
  <monospace>libCEED</monospace>. These pointwise functions do not
  depend on element resolution, topology, or basis degree (see
  <xref alt="Figure 2" rid="figU003Aschematic">Figure 2</xref>), in
  contrast to systems like FEniCS where UFL forms specify basis degree
  at compile time. This isolation is valuable for
  <inline-formula><alternatives>
  <tex-math><![CDATA[hp]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>h</mml:mi><mml:mi>p</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>-refinement
  and adaptivity (where <inline-formula><alternatives>
  <tex-math><![CDATA[h]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>h</mml:mi></mml:math></alternatives></inline-formula>
  commonly denotes the average element size and
  <inline-formula><alternatives>
  <tex-math><![CDATA[p]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>p</mml:mi></mml:math></alternatives></inline-formula>
  the polynomial degree of the basis functions; see Babuška &amp; Suri
  (<xref alt="1994" rid="ref-babuska1994hpfem" ref-type="bibr">1994</xref>))
  and <inline-formula><alternatives>
  <tex-math><![CDATA[p]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>p</mml:mi></mml:math></alternatives></inline-formula>-multigrid
  solvers; mixed-degree, mixed-topology, and
  <inline-formula><alternatives>
  <tex-math><![CDATA[h]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>h</mml:mi></mml:math></alternatives></inline-formula>-nonconforming
  finite element methods are readily expressed by composition.
  Additionally, a single source implementation (in vanilla C or C++) for
  the <monospace>CeedQFunction</monospace>s can be used on CPUs or GPUs
  (transparently using the <italic>NVRTC</italic>
  (<xref alt="2021" rid="ref-NVRTCwebsite" ref-type="bibr">2021</xref>),
  HIPRTC, or OCCA
  (<xref alt="OCCA Development Site, 2021" rid="ref-OCCAwebsite" ref-type="bibr"><italic>OCCA
  Development Site</italic>, 2021</xref>) run-time compilation
  features).</p>
  <p><monospace>libCEED</monospace> provides computation of the true
  operator diagonal for preconditioning with Jacobi and Chebyshev as
  well as direct assembly of sparse matrices (e.g., for coarse operators
  in multigrid) and construction of <inline-formula><alternatives>
  <tex-math><![CDATA[p]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>p</mml:mi></mml:math></alternatives></inline-formula>-multigrid
  prolongation and restriction operators. Preconditioning matrix-free
  operators is an active area of research; support for domain
  decomposition methods and inexact subdomain solvers based on the fast
  diagonalization method
  (<xref alt="Lottes &amp; Fischer, 2005" rid="ref-lottes2005hms" ref-type="bibr">Lottes
  &amp; Fischer, 2005</xref>) are in active development.</p>
  <fig>
    <caption><p>A schematic of element restriction and basis applicator
    operators for elements with different topology. This sketch shows
    the independence of Q-functions (in this case representing a
    Laplacian) on element resolution, topology, and basis
    degree.<styled-content id="figU003Aschematic"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="img/QFunctionSketch.pdf" xlink:title="" />
  </fig>
</sec>
<sec id="high-level-languages">
  <title>High-level languages</title>
  <p><monospace>libCEED</monospace> provides high-level interfaces in
  Python, Julia, and Rust, each of which is maintained and tested as
  part of the main repository, but distributed through each language’s
  respective package manager.</p>
  <p>The Python interface uses CFFI, the C Foreign Function Interface
  (<xref alt="C Foreign Function Interface for Python, 2021" rid="ref-python-cffi" ref-type="bibr"><italic>C
  Foreign Function Interface for Python</italic>, 2021</xref>). CFFI
  allows reuse of most C declarations and requires only a minimal
  adaptation of some of them. The C and Python APIs are mapped in a
  nearly 1:1 correspondence. For instance, a
  <monospace>CeedVector</monospace> object is exposed as
  <monospace>libceed.Vector</monospace> in Python, and supports no-copy
  host and GPU device interperability with Python arrays from the NumPy
  (<xref alt="Harris et al., 2020" rid="ref-NumPy" ref-type="bibr">Harris
  et al., 2020</xref>) or Numba
  (<xref alt="Lam et al., 2015" rid="ref-Numba" ref-type="bibr">Lam et
  al., 2015</xref>) packages. The interested reader can find more
  details on <monospace>libCEED</monospace>’s Python interface in Barra
  et al.
  (<xref alt="2020" rid="ref-libceed-paper-proc-scipy-2020" ref-type="bibr">2020</xref>).</p>
  <p>The Julia interface, referred to as
  <monospace>LibCEED.jl</monospace>, provides both a low-level
  interface, which is generated automatically from
  <monospace>libCEED</monospace>’s C header files, and a high-level
  interface. The high-level interface takes advantage of Julia’s
  metaprogramming and just-in-time compilation capabilities to enable
  concise definition of Q-functions that work on both CPUs and GPUs,
  along with their composition into operators as in
  <xref alt="Figure 1" rid="figU003Adecomposition">Figure 1</xref>.</p>
  <p>The Rust interface also wraps automatically-generated bindings from
  the <monospace>libCEED</monospace> C header files, offering increased
  safety due to Rust ownership and borrow checking, and more convenient
  definition of Q-functions (e.g., via closures).</p>
</sec>
<sec id="backends">
  <title>Backends</title>
  <p><xref alt="Figure 3" rid="figU003AlibCEEDBackends">Figure 3</xref>
  shows a subset of the backend implementations (backends) available in
  <monospace>libCEED</monospace>. GPU implementations are available via
  pure <italic>CUDA</italic>
  (<xref alt="2021" rid="ref-CUDAwebsite" ref-type="bibr">2021</xref>)
  and pure <italic>HIP</italic>
  (<xref alt="2021" rid="ref-HIPwebsite" ref-type="bibr">2021</xref>),
  as well as the OCCA
  (<xref alt="OCCA Development Site, 2021" rid="ref-OCCAwebsite" ref-type="bibr"><italic>OCCA
  Development Site</italic>, 2021</xref>) and MAGMA
  (<xref alt="MAGMA development site, 2021" rid="ref-MAGMAwebsite" ref-type="bibr"><italic><named-content content-type="nocase">MAGMA
  development site</named-content></italic>, 2021</xref>) libraries. CPU
  implementations are available via pure C and AVX intrinsics as well as
  the LIBXSMM library
  (<xref alt="LIBXSMM development site, 2021" rid="ref-LIBXSMM" ref-type="bibr"><italic><named-content content-type="nocase">LIBXSMM
  development site</named-content></italic>, 2021</xref>).
  <monospace>libCEED</monospace> provides a dynamic interface such that
  users only need to write a single source (no need for
  templates/generics) and can select the desired specialized
  implementation at run time. Moreover, each process or thread can
  instantiate an arbitrary number of backends on an arbitrary number of
  devices.</p>
  <fig>
    <caption><p><monospace>libCEED</monospace> provides the algebraic
    core for element-based discretizations, with specialized
    implementations (backends) for heterogeneous
    architectures.<styled-content id="figU003AlibCEEDBackends"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="img/libCEEDBackends.png" xlink:title="" />
  </fig>
</sec>
<sec id="performance-benchmarks">
  <title>Performance benchmarks</title>
  <p>The Exascale Computing Project (ECP) co-design Center for Efficient
  Exascale Discretization
  (<xref alt="CEED, 2021" rid="ref-CEEDwebsite" ref-type="bibr"><italic>CEED</italic>,
  2021</xref>) has defined a suite of Benchmark Problems (BPs) to test
  and compare the performance of high-order finite element
  implementations
  (<xref alt="Fischer et al., 2020" rid="ref-Fischer2020scalability" ref-type="bibr">Fischer
  et al., 2020</xref>;
  <xref alt="Kolev et al., 2021" rid="ref-CEED-ECP-paper" ref-type="bibr">Kolev
  et al., 2021</xref>).
  <xref alt="Figure 4" rid="figU003Abp3">Figure 4</xref> compares the
  performance of <monospace>libCEED</monospace> solving BP3 (CG
  iteration on a 3D Poisson problem) or CPU and GPU systems of similar
  (purchase/operating and energy) cost. These tests use PETSc
  (<xref alt="Balay et al., 2021" rid="ref-PETScUserManual" ref-type="bibr">Balay
  et al., 2021</xref>) for unstructured mesh management and parallel
  solvers with GPU-aware communication
  (<xref alt="Zhang et al., 2021" rid="ref-zhang2021petscsf" ref-type="bibr">Zhang
  et al., 2021</xref>); a similar implementation with comparable
  performance is available through MFEM.</p>
  <fig>
    <caption><p>Performance for BP3 using the backend on a 2-socket AMD
    EPYC 7452 (32-core, 2.35GHz) and the backend on LLNL’s Lassen system
    with NVIDIA V100 GPUs. Each curve represents fixing the basis degree
    <inline-formula><alternatives>
    <tex-math><![CDATA[p]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>p</mml:mi></mml:math></alternatives></inline-formula>
    and varying the number of elements. The CPU enables faster solution
    of smaller problem sizes (as in strong scaling) while the GPU is
    more efficient for applications that can afford to wait for larger
    sizes. Note that the CPU exhibits a performance drop when the
    working set becomes too large for L3 cache (128 MB/socket) while no
    such drop exists for the GPU. (This experiment was run with release
    candidates of PETSc 3.14 and libCEED 0.7 using gcc-10 on EPYC and
    clang-10/CUDA-10 on Lassen.)
    <styled-content id="figU003Abp3"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="img/bp3-2020.pdf" xlink:title="" />
  </fig>
</sec>
<sec id="demo-applications-and-integration">
  <title>Demo applications and integration</title>
  <p>To highlight the ease of library reuse for solver composition and
  leverage <monospace>libCEED</monospace>’s full capability for
  real-world applications, <monospace>libCEED</monospace> comes with a
  suite of application examples, including problems of interest to the
  fluid dynamics and solid mechanics communities. The fluid dynamics
  example solves the 2D and 3D compressible Navier-Stokes equations
  using SU/SUPG stabilization and implicit, explicit, or IMEX time
  integration;
  <xref alt="Figure 5" rid="figU003ANSvortices">Figure 5</xref> shows
  vortices arising in the “density current”
  (<xref alt="Straka et al., 1993" rid="ref-straka1993numerical" ref-type="bibr">Straka
  et al., 1993</xref>) when a cold bubble of air reaches the ground. The
  solid mechanics example solves static linear elasticity and
  hyperelasticity with load continuation and Newton-Krylov solvers with
  <inline-formula><alternatives>
  <tex-math><![CDATA[p]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>p</mml:mi></mml:math></alternatives></inline-formula>-multigrid
  preconditioners;
  <xref alt="Figure 6" rid="figU003ASolids">Figure 6</xref> shows a
  twisted Neo-Hookean beam. Both of these examples have been developed
  using PETSc, where <monospace>libCEED</monospace> provides the
  matrix-free operator and preconditioner ingredient evaluation and
  PETSc provides the unstructured mesh management and parallel
  solvers.</p>
  <fig>
    <caption><p>Vortices develop as a cold air bubble drops to the
    ground.<styled-content id="figU003ANSvortices"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="img/Vortices.png" xlink:title="" />
  </fig>
  <fig>
    <caption><p>Strain energy density in a twisted Neo-Hookean
    beam.<styled-content id="figU003ASolids"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="jpeg" xlink:href="img/SolidTwistExample.jpeg" xlink:title="" />
  </fig>
  <p><monospace>libCEED</monospace> also includes additional examples
  with PETSc, MFEM, and Nek5000
  (<xref alt="Nek5000, 2021" rid="ref-Nekwebsite" ref-type="bibr"><italic>Nek5000</italic>,
  2021</xref>).</p>
  <p>If MFEM is built with <monospace>libCEED</monospace> support,
  existing MFEM users can pass
  <monospace>-d ceed-cuda:/gpu/cuda/gen</monospace> to use a
  <monospace>libCEED</monospace> CUDA backend, and similarly for other
  backends. The <monospace>libCEED</monospace> implementations, accessed
  in this way, currently provide MFEM users with the fastest operator
  action on CPUs and GPUs (CUDA and HIP/ROCm) without writing any
  <monospace>libCEED</monospace> Q-functions.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This research is supported by the Exascale Computing Project
  (17-SC-20-SC), a collaborative effort of two U.S. Department of Energy
  organizations (Office of Science and the National Nuclear Security
  Administration) responsible for the planning and preparation of a
  capable exascale ecosystem, including software, applications,
  hardware, advanced system engineering and early testbed platforms, in
  support of the nations exascale computing imperative. We thank
  Lawrence Livermore National Laboratory for access to the Lassen and
  Corona machines.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-BrownU003A2010">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Brown</surname><given-names>J.</given-names></name>
        </person-group>
        <article-title>Efficient nonlinear solvers for nodal high-order finite elements in 3D</article-title>
        <source>Journal of Scientific Computing</source>
        <year iso-8601-date="2010-10">2010</year><month>10</month>
        <volume>45</volume>
        <pub-id pub-id-type="doi">10.1007/s10915-010-9396-8</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-C99-lang">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>International Standards Organisation</string-name>
        </person-group>
        <article-title>ISO/IEC 9899: 1999 programming languages-c</article-title>
        <publisher-name>American National Standards Institute, New York</publisher-name>
        <year iso-8601-date="1999">1999</year>
      </element-citation>
    </ref>
    <ref id="ref-CEED-ECP-paper">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kolev</surname><given-names>Tzanio</given-names></name>
          <name><surname>Fischer</surname><given-names>Paul</given-names></name>
          <name><surname>Min</surname><given-names>Misun</given-names></name>
          <name><surname>Dongarra</surname><given-names>Jack</given-names></name>
          <name><surname>Brown</surname><given-names>Jed</given-names></name>
          <name><surname>Dobrev</surname><given-names>Veselin</given-names></name>
          <name><surname>Warburton</surname><given-names>Tim</given-names></name>
          <name><surname>Tomov</surname><given-names>Stanimire</given-names></name>
          <name><surname>Shephard</surname><given-names>Mark S.</given-names></name>
          <name><surname>Abdelfattah</surname><given-names>Ahmad</given-names></name>
          <name><surname>Barra</surname><given-names>Valeria</given-names></name>
          <name><surname>Beams</surname><given-names>Natalie</given-names></name>
          <name><surname>Camier</surname><given-names>Jean-Sylvain</given-names></name>
          <name><surname>Chalmers</surname><given-names>Noel</given-names></name>
          <name><surname>Dudouit</surname><given-names>Yohann</given-names></name>
          <name><surname>Karakus</surname><given-names>Ali</given-names></name>
          <name><surname>Karlin</surname><given-names>Ian</given-names></name>
          <name><surname>Kerkemeier</surname><given-names>Stefan</given-names></name>
          <name><surname>Lan</surname><given-names>Yu-Hsiang</given-names></name>
          <name><surname>Medina</surname><given-names>David</given-names></name>
          <name><surname>Merzari</surname><given-names>Elia</given-names></name>
          <name><surname>Obabko</surname><given-names>Aleksandr</given-names></name>
          <name><surname>Pazner</surname><given-names>Will</given-names></name>
          <name><surname>Rathnayake</surname><given-names>Thilina</given-names></name>
          <name><surname>Smith</surname><given-names>Cameron W.</given-names></name>
          <name><surname>Spies</surname><given-names>Lukas</given-names></name>
          <name><surname>Swirydowicz</surname><given-names>Kasia</given-names></name>
          <name><surname>Thompson</surname><given-names>Jeremy</given-names></name>
          <name><surname>Tomboulides</surname><given-names>Ananias</given-names></name>
          <name><surname>Tomov</surname><given-names>Vladimir</given-names></name>
        </person-group>
        <article-title>Efficient exascale discretizations: High-order finite element methods</article-title>
        <source>International Journal of High Performance Computing Applications</source>
        <year iso-8601-date="2021">2021</year>
        <pub-id pub-id-type="doi">10.1177/10943420211020803</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-CEEDwebsite">
      <element-citation>
        <article-title>CEED</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://ceed.exascaleproject.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-CUDAwebsite">
      <element-citation>
        <article-title>CUDA</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://developer.nvidia.com/about-cuda</uri>
      </element-citation>
    </ref>
    <ref id="ref-Fischer2020scalability">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Fischer</surname><given-names>Paul</given-names></name>
          <name><surname>Min</surname><given-names>Misun</given-names></name>
          <name><surname>Rathnayake</surname><given-names>Thilina</given-names></name>
          <name><surname>Dutta</surname><given-names>Som</given-names></name>
          <name><surname>Kolev</surname><given-names>Tzanio</given-names></name>
          <name><surname>Dobrev</surname><given-names>Veselin</given-names></name>
          <name><surname>Camier</surname><given-names>Jean-Sylvain</given-names></name>
          <name><surname>Kronbichler</surname><given-names>Martin</given-names></name>
          <name><surname>Warburton</surname><given-names>Tim</given-names></name>
          <name><surname>Świrydowicz</surname><given-names>Kasia</given-names></name>
          <name><surname>Brown</surname><given-names>Jed</given-names></name>
        </person-group>
        <article-title>Scalability of high-performance PDE solvers</article-title>
        <source>The International Journal of High Performance Computing Applications</source>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.1177/1094342020915762</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Fortran77-lang">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>ANSI</surname></name>
        </person-group>
        <source>Standard X3. 9-1978, programming language Fortran (revision of ANSI X2. 9-1966)</source>
        <year iso-8601-date="1978">1978</year>
      </element-citation>
    </ref>
    <ref id="ref-HIPwebsite">
      <element-citation>
        <article-title>HIP</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://rocmdocs.amd.com/en/latest/Programming_Guides/HIP-GUIDE.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-Julia-lang">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bezanson</surname><given-names>Jeff</given-names></name>
          <name><surname>Edelman</surname><given-names>Alan</given-names></name>
          <name><surname>Karpinski</surname><given-names>Stefan</given-names></name>
          <name><surname>Shah</surname><given-names>Viral B</given-names></name>
        </person-group>
        <article-title>Julia: A fresh approach to numerical computing</article-title>
        <source>SIAM Review</source>
        <publisher-name>SIAM</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>59</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1137/141000671</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-libceed-user-manual">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Abdelfattah</surname><given-names>Ahmad</given-names></name>
          <name><surname>Barra</surname><given-names>Valeria</given-names></name>
          <name><surname>Beams</surname><given-names>Natalie</given-names></name>
          <name><surname>Brown</surname><given-names>Jed</given-names></name>
          <name><surname>Camier</surname><given-names>Jean-Sylvain</given-names></name>
          <name><surname>Dobrev</surname><given-names>Veselin</given-names></name>
          <name><surname>Dudouit</surname><given-names>Yohann</given-names></name>
          <name><surname>Ghaffari</surname><given-names>Leila</given-names></name>
          <name><surname>Kolev</surname><given-names>Tzanio</given-names></name>
          <name><surname>Medina</surname><given-names>David</given-names></name>
          <name><surname>Pazner</surname><given-names>Will</given-names></name>
          <name><surname>Rathnayake</surname><given-names>Thilina</given-names></name>
          <name><surname>Thompson</surname><given-names>Jeremy L</given-names></name>
          <name><surname>Tomov</surname><given-names>Stanimire</given-names></name>
        </person-group>
        <article-title>libCEED user manual</article-title>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2021-03">2021</year><month>03</month>
        <pub-id pub-id-type="doi">10.5281/zenodo.4895340</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-libceed-paper-proc-scipy-2020">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Barra</surname><given-names>Valeria</given-names></name>
          <name><surname>Brown</surname><given-names>Jed</given-names></name>
          <name><surname>Thompson</surname><given-names>Jeremy</given-names></name>
          <name><surname>Dudouit</surname><given-names>Yohann</given-names></name>
        </person-group>
        <article-title>High-performance operator evaluations with ease of use: LibCEED’s Python interface</article-title>
        <source>Proceedings of the 19th Python in Science Conference</source>
        <person-group person-group-type="editor">
          <name><surname>Agarwal</surname></name>
          <name><surname>Calloway</surname></name>
          <name><surname>Niederhut</surname></name>
          <name><surname>Shupe</surname></name>
        </person-group>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.25080/Majora-342d178e-00c</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-LIBXSMM">
      <element-citation>
        <article-title>LIBXSMM development site</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>http://github.com/hfp/libxsmm</uri>
      </element-citation>
    </ref>
    <ref id="ref-MAGMAwebsite">
      <element-citation>
        <article-title>MAGMA development site</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://bitbucket.org/icl/magma</uri>
      </element-citation>
    </ref>
    <ref id="ref-MFEMlibrary">
      <element-citation>
        <article-title>MFEM: Modular Finite Element Methods Library</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://mfem.org/</uri>
        <pub-id pub-id-type="doi">10.11578/dc.20171025.1248</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-mfem-paper">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Anderson</surname><given-names>R.</given-names></name>
          <name><surname>Andrej</surname><given-names>J.</given-names></name>
          <name><surname>Barker</surname><given-names>A.</given-names></name>
          <name><surname>Bramwell</surname><given-names>J.</given-names></name>
          <name><surname>Camier</surname><given-names>J.-S.</given-names></name>
          <name><surname>Dobrev</surname><given-names>J. Cerveny V.</given-names></name>
          <name><surname>Dudouit</surname><given-names>Y.</given-names></name>
          <name><surname>Fisher</surname><given-names>A.</given-names></name>
          <name><surname>Kolev</surname><given-names>Tz.</given-names></name>
          <name><surname>Pazner</surname><given-names>W.</given-names></name>
          <name><surname>Stowell</surname><given-names>M.</given-names></name>
          <name><surname>Tomov</surname><given-names>V.</given-names></name>
          <name><surname>Akkerman</surname><given-names>I.</given-names></name>
          <name><surname>Dahm</surname><given-names>J.</given-names></name>
          <name><surname>Medina</surname><given-names>D.</given-names></name>
          <name><surname>Zampini</surname><given-names>S.</given-names></name>
        </person-group>
        <article-title>MFEM: A modular finite element library</article-title>
        <source>Computers &amp; Mathematics with Applications</source>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.1016/j.camwa.2020.06.009</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Nekwebsite">
      <element-citation>
        <article-title>Nek5000</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://nek5000.mcs.anl.gov/</uri>
      </element-citation>
    </ref>
    <ref id="ref-Numba">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Lam</surname><given-names>Siu Kwan</given-names></name>
          <name><surname>Pitrou</surname><given-names>Antoine</given-names></name>
          <name><surname>Seibert</surname><given-names>Stanley</given-names></name>
        </person-group>
        <article-title>Numba: A LLVM-based python JIT compiler</article-title>
        <source>Proceedings of the second workshop on the LLVM compiler infrastructure in HPC</source>
        <publisher-name>Association for Computing Machinery</publisher-name>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <year iso-8601-date="2015">2015</year>
        <isbn>9781450340052</isbn>
        <pub-id pub-id-type="doi">10.1145/2833157.2833162</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-NumPy">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
          <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
          <name><surname>Walt</surname><given-names>St’efan J. van der</given-names></name>
          <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
          <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
          <name><surname>Cournapeau</surname><given-names>David</given-names></name>
          <name><surname>Wieser</surname><given-names>Eric</given-names></name>
          <name><surname>Taylor</surname><given-names>Julian</given-names></name>
          <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
          <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
          <name><surname>Kern</surname><given-names>Robert</given-names></name>
          <name><surname>Picus</surname><given-names>Matti</given-names></name>
          <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
          <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
          <name><surname>Brett</surname><given-names>Matthew</given-names></name>
          <name><surname>Haldane</surname><given-names>Allan</given-names></name>
          <name><surname>R’ıo</surname><given-names>Jaime Fern’andez del</given-names></name>
          <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <name><surname>G’erard-Marchant</surname><given-names>Pierre</given-names></name>
          <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
          <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
          <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
          <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
          <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        </person-group>
        <article-title>Array programming with NumPy</article-title>
        <source>Nature</source>
        <publisher-name>Springer Science; Business Media LLC</publisher-name>
        <year iso-8601-date="2020-09">2020</year><month>09</month>
        <volume>585</volume>
        <issue>7825</issue>
        <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-NVRTCwebsite">
      <element-citation>
        <article-title>NVRTC</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://docs.nvidia.com/cuda/nvrtc/index.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-OCCAwebsite">
      <element-citation>
        <article-title>OCCA development site</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>http://github.com/libocca/occa</uri>
      </element-citation>
    </ref>
    <ref id="ref-OrszagU003A1980">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Orszag</surname><given-names>Steven A</given-names></name>
        </person-group>
        <article-title>Spectral methods for problems in complex geometries</article-title>
        <source>Journal of Computational Physics</source>
        <year iso-8601-date="1980">1980</year>
        <volume>37</volume>
        <pub-id pub-id-type="doi">10.1016/0021-9991(80)90005-4</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-PETScUserManual">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <name><surname>Balay</surname><given-names>Satish</given-names></name>
          <name><surname>Abhyankar</surname><given-names>Shrirang</given-names></name>
          <name><surname>Adams</surname><given-names>Mark F.</given-names></name>
          <name><surname>Brown</surname><given-names>Jed</given-names></name>
          <name><surname>Brune</surname><given-names>Peter</given-names></name>
          <name><surname>Buschelman</surname><given-names>Kris</given-names></name>
          <name><surname>Dalcin</surname><given-names>Lisandro</given-names></name>
          <name><surname>Dener</surname><given-names>Alp</given-names></name>
          <name><surname>Eijkhout</surname><given-names>Victor</given-names></name>
          <name><surname>Gropp</surname><given-names>William D.</given-names></name>
          <name><surname>Karpeyev</surname><given-names>Dmitry</given-names></name>
          <name><surname>Kaushik</surname><given-names>Dinesh</given-names></name>
          <name><surname>Knepley</surname><given-names>Matthew G.</given-names></name>
          <name><surname>May</surname><given-names>Dave A.</given-names></name>
          <name><surname>McInnes</surname><given-names>Lois Curfman</given-names></name>
          <name><surname>Mills</surname><given-names>Richard Tran</given-names></name>
          <name><surname>Munson</surname><given-names>Todd</given-names></name>
          <name><surname>Rupp</surname><given-names>Karl</given-names></name>
          <name><surname>Sanan</surname><given-names>Patrick</given-names></name>
          <name><surname>Smith</surname><given-names>Barry F.</given-names></name>
          <name><surname>Zampini</surname><given-names>Stefano</given-names></name>
          <name><surname>Zhang</surname><given-names>Hong</given-names></name>
          <name><surname>Zhang</surname><given-names>Hong</given-names></name>
        </person-group>
        <article-title>PETSc users manual</article-title>
        <publisher-name>Argonne National Laboratory</publisher-name>
        <year iso-8601-date="2021">2021</year>
      </element-citation>
    </ref>
    <ref id="ref-Python-lang">
      <element-citation>
        <article-title>Python</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://www.python.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-Rust-lang">
      <element-citation>
        <article-title>Rust</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://www.rust-lang.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-python-cffi">
      <element-citation>
        <article-title>C foreign function interface for Python</article-title>
        <year iso-8601-date="2021">2021</year>
        <uri>https://cffi.readthedocs.io</uri>
      </element-citation>
    </ref>
    <ref id="ref-straka1993numerical">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Straka</surname><given-names>Jerry M</given-names></name>
          <name><surname>Wilhelmson</surname><given-names>Robert B</given-names></name>
          <name><surname>Wicker</surname><given-names>Louis J</given-names></name>
          <name><surname>Anderson</surname><given-names>John R</given-names></name>
          <name><surname>Droegemeier</surname><given-names>Kelvin K</given-names></name>
        </person-group>
        <article-title>Numerical solutions of a non-linear density current: A benchmark solution and comparisons</article-title>
        <source>International Journal for Numerical Methods in Fluids</source>
        <publisher-name>Wiley Online Library</publisher-name>
        <year iso-8601-date="1993">1993</year>
        <volume>17</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1002/fld.1650170103</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-deville2002highorder">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Deville</surname><given-names>Michel O</given-names></name>
          <name><surname>Fischer</surname><given-names>Paul F</given-names></name>
          <name><surname>Mund</surname><given-names>Ernest H</given-names></name>
        </person-group>
        <source>High-order methods for incompressible fluid flow</source>
        <publisher-name>Cambridge University Press</publisher-name>
        <year iso-8601-date="2002">2002</year>
        <isbn>0-521-45309-7</isbn>
      </element-citation>
    </ref>
    <ref id="ref-gropp2014using">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gropp</surname><given-names>William</given-names></name>
          <name><surname>Lusk</surname><given-names>Ewing</given-names></name>
          <name><surname>Skjellum</surname><given-names>Anthony</given-names></name>
        </person-group>
        <article-title>Using MPI: Portable parallel programming with the message-passing interface</article-title>
        <publisher-name>The MIT Press</publisher-name>
        <year iso-8601-date="2014">2014</year>
        <isbn>9780262527392</isbn>
      </element-citation>
    </ref>
    <ref id="ref-libMeshPaper">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kirk</surname><given-names>Benjamin S.</given-names></name>
          <name><surname>Peterson</surname><given-names>John W.</given-names></name>
          <name><surname>Stogner</surname><given-names>Roy H.</given-names></name>
          <name><surname>Carey</surname><given-names>Graham F.</given-names></name>
        </person-group>
        <article-title>libMesh: A C++ Library for Parallel Adaptive Mesh Refinement/Coarsening Simulations</article-title>
        <source>Engineering with Computers</source>
        <year iso-8601-date="2006">2006</year>
        <volume>22</volume>
        <issue>3–4</issue>
        <pub-id pub-id-type="doi">10.1007/s00366-006-0049-3</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-LoggMardalWells2012">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Logg</surname><given-names>Anders</given-names></name>
          <name><surname>Mardal</surname><given-names>Kent-Andre</given-names></name>
          <name><surname>Wells</surname><given-names>Garth N.</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <source>Automated solution of differential equations by the finite element method: The FEniCS book</source>
        <person-group person-group-type="editor">
          <name><surname>Logg</surname><given-names>Anders</given-names></name>
          <name><surname>Mardal</surname><given-names>Kent-Andre</given-names></name>
          <name><surname>Wells</surname><given-names>Garth N.</given-names></name>
        </person-group>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2012">2012</year>
        <volume>84</volume>
        <isbn>978-3-642-23098-1</isbn>
        <pub-id pub-id-type="doi">10.1007/978-3-642-23099-8</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-dealII92">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Arndt</surname><given-names>Daniel</given-names></name>
          <name><surname>Bangerth</surname><given-names>Wolfgang</given-names></name>
          <name><surname>Blais</surname><given-names>Bruno</given-names></name>
          <name><surname>Clevenger</surname><given-names>Thomas C.</given-names></name>
          <name><surname>Fehling</surname><given-names>Marc</given-names></name>
          <name><surname>Grayver</surname><given-names>Alexander V.</given-names></name>
          <name><surname>Heister</surname><given-names>Timo</given-names></name>
          <name><surname>Heltai</surname><given-names>Luca</given-names></name>
          <name><surname>Kronbichler</surname><given-names>Martin</given-names></name>
          <name><surname>Maier</surname><given-names>Matthias</given-names></name>
          <name><surname>Munch</surname><given-names>Peter</given-names></name>
          <name><surname>Pelteret</surname><given-names>Jean-Paul</given-names></name>
          <name><surname>Rastak</surname><given-names>Reza</given-names></name>
          <name><surname>Thomas</surname><given-names>Ignacio</given-names></name>
          <name><surname>Turcksin</surname><given-names>Bruno</given-names></name>
          <name><surname>Wang</surname><given-names>Zhuoran</given-names></name>
          <name><surname>Wells</surname><given-names>David</given-names></name>
        </person-group>
        <article-title>The deal.II library, version 9.2</article-title>
        <source>Journal of Numerical Mathematics</source>
        <publisher-name>De Gruyter</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <volume>28</volume>
        <issue>3</issue>
        <uri>https://dealii.org/deal92-preprint.pdf</uri>
        <pub-id pub-id-type="doi">10.1515/jnma-2020-0043</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-kruppcomparison">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Rupp</surname><given-names>Karl</given-names></name>
        </person-group>
        <article-title>CPU-GPU-MIC comparision charts</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://github.com/karlrupp/cpu-gpu-mic-comparison</uri>
      </element-citation>
    </ref>
    <ref id="ref-williams2009roofline">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Williams</surname><given-names>Samuel</given-names></name>
          <name><surname>Waterman</surname><given-names>Andrew</given-names></name>
          <name><surname>Patterson</surname><given-names>David</given-names></name>
        </person-group>
        <article-title>Roofline: An insightful visual performance model for multicore architectures</article-title>
        <source>Communications of the ACM</source>
        <publisher-name>ACM</publisher-name>
        <year iso-8601-date="2009">2009</year>
        <volume>52</volume>
        <issue>4</issue>
        <pub-id pub-id-type="doi">10.1145/1498765.1498785</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-babuska1994hpfem">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Babuška</surname><given-names>Ivo</given-names></name>
          <name><surname>Suri</surname><given-names>Manil</given-names></name>
        </person-group>
        <article-title>The p and h-p versions of the finite element method, basic principles and properties</article-title>
        <source>SIAM Review</source>
        <publisher-name>SIAM</publisher-name>
        <year iso-8601-date="1994">1994</year>
        <volume>36</volume>
        <issue>4</issue>
        <pub-id pub-id-type="doi">10.1137/1036141</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-lottes2005hms">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lottes</surname><given-names>J. W.</given-names></name>
          <name><surname>Fischer</surname><given-names>P. F.</given-names></name>
        </person-group>
        <article-title>Hybrid multigrid/Schwarz algorithms for the spectral element method</article-title>
        <source>Journal of Scientific Computing</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2005">2005</year>
        <volume>24</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1007/s10915-004-4787-3</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-zhang2021petscsf">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Zhang</surname><given-names>Junchao</given-names></name>
          <name><surname>Brown</surname><given-names>Jed</given-names></name>
          <name><surname>Balay</surname><given-names>Satish</given-names></name>
          <name><surname>Faibussowitsch</surname><given-names>Jacob</given-names></name>
          <name><surname>Knepley</surname><given-names>Matthew</given-names></name>
          <name><surname>Marin</surname><given-names>Oana</given-names></name>
          <name><surname>Mills</surname><given-names>Richard Tran</given-names></name>
          <name><surname>Munson</surname><given-names>Todd</given-names></name>
          <name><surname>Smith</surname><given-names>Barry F</given-names></name>
          <name><surname>Zampini</surname><given-names>Stefano</given-names></name>
        </person-group>
        <article-title>The PetscSF scalable communication layer</article-title>
        <source>IEEE Transactions on Parallel and Distributed Systems</source>
        <year iso-8601-date="2021">2021</year>
        <uri>https://arxiv.org/abs/2102.13018</uri>
        <pub-id pub-id-type="doi">10.1109/TPDS.2021.3084070</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3608</article-id>
<article-id pub-id-type="doi">10.21105/joss.03608</article-id>
<title-group>
<article-title>CellPyLib: A Python Library for working with Cellular
Automata</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4867-5635</contrib-id>
<string-name>Luis M. Antunes</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Chemistry, University of Reading,
Whiteknights, Reading RG6 6DX, United Kingdom</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-07-28">
<day>28</day>
<month>7</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>67</issue>
<fpage>3608</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Cellular Automata</kwd>
<kwd>complex systems</kwd>
<kwd>non-linear dynamics</kwd>
<kwd>discrete dynamical systems</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Cellular Automata (CA) are discrete dynamical systems with a rich
  history
  (<xref alt="Ilachinski, 2001" rid="ref-ilachinski2001cellular" ref-type="bibr">Ilachinski,
  2001</xref>). Introduced by John von Neumann and Stanislaw Ulam in the
  1940s
  (<xref alt="Von Neumann, 1951" rid="ref-von1951general" ref-type="bibr">Von
  Neumann, 1951</xref>), CA have continued to fascinate, as their
  conceptual simplicity serves as a powerful microscope that allows us
  to explore the nature of computation and complexity, and the origins
  of emergence. Far from being an antiquated computational model,
  investigators are utilizing CA in novel and creative ways, such as the
  incorporation with Deep Learning
  (<xref alt="Mordvintsev et al., 2020" rid="ref-mordvintsev2020growing" ref-type="bibr">Mordvintsev
  et al., 2020</xref>;
  <xref alt="Nichele &amp; Molund, 2017" rid="ref-nichele2017deep" ref-type="bibr">Nichele
  &amp; Molund, 2017</xref>). Popularized and investigated by Stephen
  Wolfram in his book <italic>A New Kind of Science</italic>
  (<xref alt="Wolfram, 2002" rid="ref-wolfram2002new" ref-type="bibr">Wolfram,
  2002</xref>), CA remain premier reminders of a common theme in the
  study of the physical world: that simple systems and rules can give
  rise to remarkable complexity. They are a laboratory for the study of
  the origins of the complexity we see in the world around us.</p>
  <p><monospace>CellPyLib</monospace> is a Python library for working
  with CA. It provides a concise and simple interface for defining and
  analyzing 1- and 2-dimensional CA. The CA can consist of discrete or
  continuous states. Neighbourhood radii are adjustable, and in the
  2-dimensional case, both Moore and von Neumann neighbourhoods are
  supported. With <monospace>CellPyLib</monospace>, it is trivial to
  create Elementary CA, and CA with totalistic rules, as these rules are
  provided as part of the library. Additionally, the library provides a
  means for creating asynchronous and reversible CA. Finally, an
  implementation of C. G. Langtonâ€™s approach for creating CA rules using
  the lambda value is provided, allowing for the exploration of complex
  systems, phase transitions and emergent computation
  (<xref alt="Langton, 1990" rid="ref-langton1990computation" ref-type="bibr">Langton,
  1990</xref>).</p>
  <p>Utility functions for plotting and viewing the evolved CA are also
  provided. These tools make it easy to visualize the results of CA
  evolution, and include the option of creating animations of the
  evolution itself. Moreover, utility functions for computing the
  information-theoretic properties of CA, such as the Shannon entropy
  and mutual information, are included.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>The Python software ecosystem is lacking when it comes to Cellular
  Automata. A web search reveals that while there are some projects
  dedicated to the simulation of CA, most are not general-purpose,
  focusing only on certain CA systems, and are generally missing a
  substantial test suite, hindering their future extensibility and
  maintainability. In short, there appears to be a dearth of robust and
  flexible libraries for working with CA in Python.</p>
  <p>Currently, many scientists choose Python as their main tool for
  computational tasks. Though researchers can choose to implement CA
  themselves, this is error-prone, as there are some subtleties when it
  comes to correctly handling issues such as boundary conditions on
  periodic lattices, or constructing von Neumann neighbourhoods with
  radius greater than 1, for example. Researchers may be dissuaded from
  incorporating CA into their research if they are forced to work with
  unfamiliar languages and technologies, or are required to devote
  considerable effort to the implementation and testing of non-trivial
  algorithms. The availability of a user-friendly Python library for CA
  will likely encourage more researchers to consider these fascinating
  dynamical and computational systems. Moreover, having a standard
  implementation of CA in the Python environment helps to ensure that
  scientific results are reproducible. CellPyLib is a Python library
  aimed to meet this need, which supports the creation and analysis of
  models that exist on a regular array or uniform grid, such as
  elementary CA, and 2D CA with Moore or von Neumann neighbourhoods.</p>
  <p>Researchers and students alike should find CellPyLib useful.
  Students and instructors can use CellPyLib in an educational context
  if they would like to learn about elementary CA and 2D CA on a uniform
  grid. Researchers in both the computer and physical sciences can use
  CellPyLib to answer serious questions about the computational and
  natural worlds. For example, the Abelian sandpile model included in
  the library can be used as part of a university course on complex
  systems to demonstrate the phenomenon of self-organized criticality.
  The same model may be used by professional physicists wishing to
  explore self-organized criticality more deeply.</p>
  <p>While CellPyLib is expected to be of interest to students,
  educators, and researchers, there are certain scenarios in which
  alternate tools would be more appropriate. For example, if a
  researcher would like to evolve CA with a very large number of cells,
  or for very many iterations, in a timely fashion, then an
  implementation that is optimized for the specific model in question
  would be more appropriate. Also, if the model is not constrained to a
  uniform grid, then other solutions should be sought.</p>
</sec>
<sec id="example-usage">
  <title>Example Usage</title>
  <p><monospace>CellPyLib</monospace> can be readily installed using
  <monospace>pip</monospace>:</p>
  <preformat>$ pip install cellpylib</preformat>
  <p>It has minimal dependencies, depending only on the commonly used
  libraries NumPy
  (<xref alt="Harris et al., 2020" rid="ref-harris2020array" ref-type="bibr">Harris
  et al., 2020</xref>) and Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-HunterU003A2007" ref-type="bibr">Hunter,
  2007</xref>).</p>
  <p>The following example illustrates the evolution of the Rule 30 CA,
  described in <monospace>A New Kind of Science</monospace>
  (<xref alt="Wolfram, 2002" rid="ref-wolfram2002new" ref-type="bibr">Wolfram,
  2002</xref>), as implemented with
  <monospace>CellPyLib</monospace>:</p>
  <code language="python">import cellpylib as cpl

cellular_automaton = cpl.init_simple(200)

rule = lambda n, c, t: cpl.nks_rule(n, 30)

cellular_automaton = cpl.evolve(cellular_automaton, timesteps=100, 
                                apply_rule=rule)</code>
  <p>First, the initial conditions are instantiated using the function
  <monospace>init_simple</monospace>, which, in this example, creates a
  200-dimensional vector consisting of zeroes, except for the component
  in the center of the vector, which is initialized with a value of 1.
  Next, the system is subjected to evolution by calling the
  <monospace>evolve</monospace> function. The system evolves under the
  rule specified through the <monospace>apply_rule</monospace>
  parameter. Any function that accepts the three arguments
  <monospace>n</monospace>, <monospace>c</monospace> and
  <monospace>t</monospace> can be supplied as a rule, but in this case
  the built-in function <monospace>nks_rule</monospace> is invoked to
  provide Rule 30. The CA is evolved for 100
  <monospace>timesteps</monospace>, or 100 applications of the rule to
  the initial and subsequent conditions.</p>
  <p>During each timestep, the function supplied to
  <monospace>apply_rule</monospace> is invoked for each cell. The
  <monospace>n</monospace> argument refers to the neighbourhood of the
  current cell, and consists of an array (in the 1-dimensional CA case)
  of the activities (i.e.Â  states) of the cells comprising the current
  cellâ€™s neighbourhood (an array with length 3, in the case of a
  1-dimensional CA with radius of 1). The <monospace>c</monospace>
  argument refers to index of the cell under consideration. It serves as
  a label identifying the current cell. The <monospace>t</monospace>
  argument is an integer specifying the current timestep.</p>
  <p>Finally, to visualize the results, the <monospace>plot</monospace>
  function can be utilized:</p>
  <code language="python">cpl.plot(cellular_automaton)</code>
  <fig>
    <caption><p>Rule 30, as rendered with
    CellPyLib.<styled-content id="figU003Arule30"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="rule30.png" xlink:title="" />
  </fig>
  <p>The result is rendered, as depicted in
  <xref alt="FigureÂ 1" rid="figU003Arule30">FigureÂ 1</xref>.</p>
</sec>
<sec id="scope">
  <title>Scope</title>
  <p>While <monospace>CellPyLib</monospace> is a general-purpose library
  that allows for the implementation of a wide variety of CA, it is
  important to note that CA constitute a very broad class of models.
  <monospace>CellPyLib</monospace> focuses on those that are constrained
  to a regular array or uniform grid, such as elementary CA, and 2D CA
  with Moore or von Neumann neighbourhoods.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-ilachinski2001cellular">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Ilachinski</surname><given-names>Andrew</given-names></name>
        </person-group>
        <source>Cellular Automata: A Discrete Universe</source>
        <publisher-name>World Scientific Publishing Company</publisher-name>
        <year iso-8601-date="2001">2001</year>
        <pub-id pub-id-type="doi">10.1142/4702</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-wolfram2002new">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Wolfram</surname><given-names>Stephen</given-names></name>
        </person-group>
        <source>A New Kind of Science</source>
        <publisher-name>Wolfram media Champaign, IL</publisher-name>
        <year iso-8601-date="2002">2002</year>
        <volume>5</volume>
      </element-citation>
    </ref>
    <ref id="ref-von1951general">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Von Neumann</surname><given-names>John</given-names></name>
        </person-group>
        <article-title>The General and Logical Theory of Automata, Cerebral Mechanisms in Behavior. The Hixon Symposium</article-title>
        <source>New York: John Wiley&amp;Sons</source>
        <year iso-8601-date="1951">1951</year>
      </element-citation>
    </ref>
    <ref id="ref-langton1990computation">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Langton</surname><given-names>Chris G</given-names></name>
        </person-group>
        <article-title>Computation at the Edge of Chaos: Phase Transitions and Emergent Computation</article-title>
        <source>Physica D: Nonlinear Phenomena</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="1990">1990</year>
        <volume>42</volume>
        <issue>1-3</issue>
        <pub-id pub-id-type="doi">10.1016/0167-2789(90)90064-v</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-harris2020array">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
          <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
          <name><surname>Walt</surname><given-names>StÃ©fan J. van der</given-names></name>
          <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
          <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
          <name><surname>Cournapeau</surname><given-names>David</given-names></name>
          <name><surname>Wieser</surname><given-names>Eric</given-names></name>
          <name><surname>Taylor</surname><given-names>Julian</given-names></name>
          <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
          <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
          <name><surname>Kern</surname><given-names>Robert</given-names></name>
          <name><surname>Picus</surname><given-names>Matti</given-names></name>
          <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
          <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
          <name><surname>Brett</surname><given-names>Matthew</given-names></name>
          <name><surname>Haldane</surname><given-names>Allan</given-names></name>
          <name><surname>RÃ­o</surname><given-names>Jaime FernÃ¡ndez del</given-names></name>
          <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <name><surname>GÃ©rard-Marchant</surname><given-names>Pierre</given-names></name>
          <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
          <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
          <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
          <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
          <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        </person-group>
        <article-title>Array programming with NumPy</article-title>
        <source>Nature</source>
        <publisher-name>Springer Science; Business Media LLC</publisher-name>
        <year iso-8601-date="2020-09">2020</year><month>09</month>
        <volume>585</volume>
        <issue>7825</issue>
        <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
        <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-HunterU003A2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>J. D.</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D graphics environment</article-title>
        <source>Computing in Science &amp; Engineering</source>
        <publisher-name>IEEE COMPUTER SOC</publisher-name>
        <year iso-8601-date="2007">2007</year>
        <volume>9</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-nichele2017deep">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Nichele</surname><given-names>Stefano</given-names></name>
          <name><surname>Molund</surname><given-names>Andreas</given-names></name>
        </person-group>
        <article-title>Deep Learning with Cellular Automaton-based Reservoir Computing</article-title>
        <source>Complex Systems</source>
        <publisher-name>Complex Systems Publications Inc</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>26</volume>
        <issue>4</issue>
        <pub-id pub-id-type="doi">10.25088/complexsystems.26.4.319</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-mordvintsev2020growing">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Mordvintsev</surname><given-names>Alexander</given-names></name>
          <name><surname>Randazzo</surname><given-names>Ettore</given-names></name>
          <name><surname>Niklasson</surname><given-names>Eyvind</given-names></name>
          <name><surname>Levin</surname><given-names>Michael</given-names></name>
        </person-group>
        <article-title>Growing neural cellular automata</article-title>
        <source>Distill</source>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.23915/distill.00023</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

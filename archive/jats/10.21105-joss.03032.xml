<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3032</article-id>
<article-id pub-id-type="doi">10.21105/joss.03032</article-id>
<title-group>
<article-title>Magicwand: A platform to provide high-quality, reliable,
and reproducible data sets for low-and-slow DDoS
attacks.</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Banjo Obayomi</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Christopher H. Todd</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Lucas Cadalzo</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>David Killian</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Anthony C. Wong</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Two Six Labs</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Unaffiliated</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>6</volume>
<issue>61</issue>
<fpage>3032</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Cybersecurity</kwd>
<kwd>Network Traffic</kwd>
<kwd>Distributed Denial of Service</kwd>
<kwd>DDoS</kwd>
<kwd>LSDDoS</kwd>
<kwd>Machine Learning</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>Magicwand</monospace> is a Python platform to provide
  high-quality, reliable, and replicable data sets for low-and-slow
  distributed denial-of-service (LSDDoS) attacks. Using a Command line
  interface (CLI), researchers can generate packet capture (.pcap) data
  with labels for attackers and benign clients. With the use of Docker,
  and JavaScript Object Notation (JSON) files,
  <monospace>Magicwand</monospace> provides a customizable and
  extensible data generation framework to generate a multitude of
  network traffic PCAPs.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Distributed denial-of-service (DDoS) attacks remain a pervasive
  cybersecurity threat
  (<xref alt="Krebs, 2016" rid="ref-krebsU003A2016" ref-type="bibr">Krebs,
  2016</xref>),
  (<xref alt="Plante, 2015" rid="ref-dotaU003A2015" ref-type="bibr">Plante,
  2015</xref>), and
  (<xref alt="Markoff, 2008" rid="ref-russiaU003A2008" ref-type="bibr">Markoff,
  2008</xref>). While various commercial services such as Akamai and
  CloudFlare are effective in mitigating traditional, high-volume DDoS
  attacks, LSDDoS attacks present a different kind of threat
  (<xref alt="Makrushin, 2013" rid="ref-makrushinU003A2013" ref-type="bibr">Makrushin,
  2013</xref>). These attacks stealthily degrade server performance
  through cleverly crafted transmissions of data, rather than
  brute-force floods of traffic. The adversary sends low-bandwidth
  requests that slowly transmit data and consume a disproportionate
  amount of the server’s resources. The relatively small amount of
  traffic needed to cause a denial-of-service has two important
  consequences: these attacks are both easier to launch and more
  difficult to detect, in comparison to high-volume DDoS.</p>
  <p>In order to create a robust LSDDoS defense, researchers in the
  security community must have access to sufficient data capturing how
  these attacks behave. The most widely-adopted public source of data
  for LSDDoS was generated by the Canadian Institute for Cybersecurity
  (CIC) at the University of New Brunswick
  (<xref alt="Sharafaldin &amp; Ghorbani, 2018" rid="ref-sharafaldinU003A2018" ref-type="bibr">Sharafaldin
  &amp; Ghorbani, 2018</xref>). However, the vast majority of instances
  in this dataset are from high-volume attacks, and the dataset does not
  contain any benign traffic directed towards the victim host.
  Additionally, the range of LSDDoS attacks employed is limited. In an
  effort to facilitate the generation of more thorough LSDDoS datasets,
  we are introducing our traffic generation tool
  <monospace>Magicwand</monospace>.</p>
  <p>Through its development, these key goals informed the design and
  implementation:</p>
  <list list-type="bullet">
    <list-item>
      <p>The user must not be required to be an expert in low-and-slow
      DDoS attacks.</p>
    </list-item>
    <list-item>
      <p>Data generated must be representative of low-and-slow DDoS
      attack behavior and their impact on victim servers.</p>
    </list-item>
    <list-item>
      <p>Data generated should be validated through a series of
      automated tests and checks.</p>
    </list-item>
    <list-item>
      <p>The software must be able to generate data on any hardware that
      meets a minimum set of requirements.</p>
    </list-item>
    <list-item>
      <p>The software should be extensible to enable new components in
      the future.</p>
    </list-item>
    <list-item>
      <p>The software should allow for user flexibility in configuration
      of LSDDoS scenarios.</p>
    </list-item>
  </list>
</sec>
<sec id="extensibility">
  <title>Extensibility</title>
  <p><monospace>Magicwand</monospace> was designed as a framework that
  can be extended based on project needs; to this end, the tool is
  comprised of extensible <italic>components</italic> that can be
  considered a foundation for expanding the tool’s capabilities. The
  four core components of the system are the attack clients, benign
  clients, systems under threat (SUTs), and sensors. Each of these
  components was designed to be operationalized into any
  <monospace>Magicwand</monospace> experiment.</p>
  <sec id="attack-clients">
    <title>Attack Clients</title>
    <p>The set of implemented attack images consists of Slowloris
    (<xref alt="Valialkin, 2014" rid="ref-golorisU003A2014" ref-type="bibr">Valialkin,
    2014</xref>), R U Dead Yet
    (<xref alt="Shekyan, 2011" rid="ref-shtU003A2011" ref-type="bibr">Shekyan,
    2011</xref>), Slow Read
    (<xref alt="Shekyan, 2011" rid="ref-shtU003A2011" ref-type="bibr">Shekyan,
    2011</xref>), Apache Killer
    (<xref alt="Stampar, 2011" rid="ref-killapacheU003A2011" ref-type="bibr">Stampar,
    2011</xref>), Sockstress
    (<xref alt="Hornby, 2012" rid="ref-sockstressU003A2012" ref-type="bibr">Hornby,
    2012</xref>), and a second implementation of Slowloris
    (<xref alt="Valialkin, 2014" rid="ref-golorisU003A2014" ref-type="bibr">Valialkin,
    2014</xref>). The JSON files provide configurations that can scale
    the intensity of attack and adjust other attack-specific-specific
    parameters (e.g. threads per connection for Apache Killer).</p>
  </sec>
  <sec id="benign-clients">
    <title>Benign Clients</title>
    <p>For benign traffic generation, <monospace>Magicwand</monospace>
    uses customized agents, based on Locust
    (<xref alt="Byström et al., 2019" rid="ref-locustU003A2019" ref-type="bibr">Byström
    et al., 2019</xref>), that continuously browse the SUT, traversing
    randomly from link to link within the SUT. The JSON files allow for
    the configuration of parameters such as clients per container,
    connection runtime, rate of activity, and more.</p>
  </sec>
  <sec id="system-under-threat-sut">
    <title>System Under Threat (SUT)</title>
    <p>The primary SUT included with <monospace>Magicwand</monospace> is
    an Apache WordPress server. We choose this stack for two reasons:
    first, it is widely used on the web, ensuring our system has wide
    applicability. Second, there is a substantial set of known LSDDoS
    attack implementations for this stack.</p>
  </sec>
  <sec id="sensors">
    <title>Sensors</title>
    <p><monospace>Magicwand</monospace> includes sensors that use
    tcpdump to capture real-time network traffic and provide a PCAP for
    each experiment. An additional sensor captures Round-Trip-Time (RTT)
    data of the SUT to understand the impact of the attack and what a
    client would experience during the experiment.</p>
  </sec>
  <sec id="developing-a-new-component">
    <title>Developing A New Component</title>
    <p>Developing a new <monospace>Magicwand</monospace> component
    requires extending the Python <monospace>MwComponent</monospace>
    abstract base class. The critical methods/attributes are
    <monospace>validate</monospace>, <monospace>run</monospace>, and
    <monospace>config</monospace> and must be implemented for a new
    component. The developer must also create a
    <monospace>configuration.json</monospace> file that defines the
    parameters for the component and default values.</p>
  </sec>
  <sec id="component-containerization">
    <title>Component Containerization</title>
    <p><monospace>Magicwand</monospace> experiments rely on Docker
    containers to run any component. For each component, a user will
    need to create a <monospace>Dockerfile</monospace> that will run the
    component during the experiment, a
    <monospace>docker-compose.yml</monospace> file that will handle
    parameters and runtime-config for the component during the
    experiment.</p>
  </sec>
</sec>
<sec id="experiments">
  <title>Experiments</title>
  <p>Experiments are defined by the components that will run, the
  timeline for each component to execute, and customizable configuration
  for each component. Each experiment will run locally and generate data
  that includes PCAPs of the network traffic generated, data from each
  sensor component, and metadata from the experiment.</p>
</sec>
<sec id="system-calibration">
  <title>System Calibration</title>
  <p>To ensure the data is representative of LSDDoS attacks and
  realistic benign clients, <monospace>Magicwand</monospace> includes
  calibration functionality.</p>
  <p>For benign components, <monospace>Magicwand</monospace> ensures
  that the amount of benign traffic flowing towards the SUT is not so
  large that it causes congestion, absent any malicious traffic.</p>
  <p>For attack components, <monospace>Magicwand</monospace> finds the
  configuration required to ensure an attack is strong enough to induce
  a denial-of-service condition on the SUT. For example, Apache Killer
  calibration process will determine the parameters needed to yield a
  mean RTT greater than 2x the mean RTT of experiments with only benign
  traffic.</p>
  <p>Attack calibration works by launching two experiments: one with
  only benign traffic and the other with only attack traffic. We then
  compare various metrics between the two experiments that detail the
  state of the SUT, such as RTT and memory consumption. The SUT
  parameters are held constant between each experiment to compare how
  the attack and benign traffic changes based on the inputs. If the
  ratio between the metrics of the benign and attack experiments
  indicates that the attack succeeded in inducing a denial-of-service
  condition, then the JSON configuration file is saved.</p>
</sec>
<sec id="data-validation">
  <title>Data Validation</title>
  <p>We validate each experiment to ensure representative and expected
  data was produced. After each experiment,
  <monospace>Magicwand</monospace> conducts a series of checks based on
  the input parameters against the generated data and run logs. Each
  component has its own validation functionality.</p>
  <p>Attack components verify that each attack yielded expected
  signatures in the data; an example would be Apache Killer generating
  packets that send overlapping bytes in the resulting PCAP. Each attack
  has specific validations that are tailored to how the attack
  works.</p>
  <p>Benign client validation confirms that the clients performed the
  tasks they were configured to do; an example is verifying that an
  experiment with 10 benign clients attempted to spin up 10 connections
  during the experiment.</p>
  <p>Sensor validation confirms that the sensors ran and yielded the
  data each sensor is responsible for and that the data is not
  corrupted. SUT validation confirms that SUT receives all expected
  trafic and that it ran as expected through the experiment.</p>
  <p>While we have been systematic and methodical in crafting these
  checks to make them as comprehensive as possible, these are not
  exhaustive. This is where researchers can define validation methods to
  ensure their <monospace>Magicwand</monospace> experiments are
  producing data that they would expect.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This research was developed with funding from the Defense Advanced
  Research Projects Agency (DARPA) under Contract # HR0011-16-C-0060.
  This document was cleared for release under Distribution Statement” A”
  (Approved for Public Release, Distribution Unlimited). The views,
  opinions, and/or findings expressed are those of the authors and
  should not be interpreted as representing the official views or
  policies of the Department of Defense of the U.S. Government.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-sharafaldinU003A2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Sharafaldin</surname><given-names>Lashkari</given-names><suffix>I.</suffix></name>
          <name><surname>Ghorbani</surname><given-names>A. A.</given-names></name>
        </person-group>
        <article-title>Toward generating a new intrusion detection dataset and intrusion traffic characterization</article-title>
        <source>SciTePress</source>
        <year iso-8601-date="2018">2018</year>
        <uri>https://www.scitepress.org/Link.aspx?doi=10.5220/0006639801080116</uri>
        <pub-id pub-id-type="doi">10.5220/0006639801080116</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-krebsU003A2016">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Krebs</surname><given-names>Brian</given-names></name>
        </person-group>
        <article-title>KrebsOnSecurity hit with record DDoS</article-title>
        <year iso-8601-date="2016">2016</year>
        <uri>https://krebsonsecurity.com/2016/09/krebsonsecurity-hit-with-record-ddos/</uri>
      </element-citation>
    </ref>
    <ref id="ref-makrushinU003A2013">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Makrushin</surname><given-names>Denis</given-names></name>
        </person-group>
        <article-title>The cost of launching a DDoS attack</article-title>
        <year iso-8601-date="2013">2013</year>
        <uri>https://securelist.com/the-cost-of-launching-a-ddos-attack/77784/</uri>
      </element-citation>
    </ref>
    <ref id="ref-russiaU003A2008">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Markoff</surname><given-names>John</given-names></name>
        </person-group>
        <article-title>Before the gunfire, cyberattacks</article-title>
        <source>The New York Times</source>
        <year iso-8601-date="2008">2008</year>
        <uri>https://www.nytimes.com/2008/08/13/technology/13cyber.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-dotaU003A2015">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Plante</surname><given-names>Chris</given-names></name>
        </person-group>
        <article-title>Valve’s $18 million dota 2 tournament delayed by DDoS attack</article-title>
        <person-group person-group-type="editor">
          <string-name>theverge</string-name>
        </person-group>
        <year iso-8601-date="2015">2015</year>
        <uri>https://www.theverge.com/2015/8/4/9097597/the-international-dota-2-ddos-attack-valve</uri>
      </element-citation>
    </ref>
    <ref id="ref-locustU003A2019">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Byström</surname><given-names>Carl</given-names></name>
          <name><surname>Heyman</surname><given-names>Jonatan</given-names></name>
          <name><surname>Hamrén</surname><given-names>Joakim</given-names></name>
          <name><surname>Heyman</surname><given-names>Hugo</given-names></name>
        </person-group>
        <article-title>Locust</article-title>
        <source>GitHub repository</source>
        <publisher-name>https://github.com/locustio/locust; GitHub</publisher-name>
        <year iso-8601-date="2019">2019</year>
      </element-citation>
    </ref>
    <ref id="ref-golorisU003A2014">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Valialkin</surname><given-names>Aliaksandr</given-names></name>
        </person-group>
        <article-title>Goloris</article-title>
        <source>GitHub repository</source>
        <publisher-name>https://github.com/valyala/goloris; GitHub</publisher-name>
        <year iso-8601-date="2014">2014</year>
      </element-citation>
    </ref>
    <ref id="ref-shtU003A2011">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Shekyan</surname><given-names>Sergey</given-names></name>
        </person-group>
        <article-title>SlowHTTPTest</article-title>
        <source>GitHub repository</source>
        <publisher-name>https://github.com/shekyan/slowhttptest; GitHub</publisher-name>
        <year iso-8601-date="2011">2011</year>
      </element-citation>
    </ref>
    <ref id="ref-killapacheU003A2011">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Stampar</surname><given-names>Miroslav</given-names></name>
        </person-group>
        <article-title>KillApachePy</article-title>
        <source>GitHub repository</source>
        <publisher-name>https://github.com/tkisason/KillApachePy/; GitHub</publisher-name>
        <year iso-8601-date="2011">2011</year>
      </element-citation>
    </ref>
    <ref id="ref-sockstressU003A2012">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Hornby</surname><given-names>Taylor</given-names></name>
        </person-group>
        <article-title>Sockstress</article-title>
        <source>GitHub repository</source>
        <publisher-name>https://github.com/defuse/sockstress; GitHub</publisher-name>
        <year iso-8601-date="2012">2012</year>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

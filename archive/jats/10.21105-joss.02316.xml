<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2316</article-id>
<article-id pub-id-type="doi">10.21105/joss.02316</article-id>
<title-group>
<article-title>dantro: a Python package for handling, transforming, and
visualizing hierarchically structured data</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-3858-0904</contrib-id>
<string-name>Yunus Sevinchan</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6343-3004</contrib-id>
<string-name>Benjamin Herdeanu</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-8911-6365</contrib-id>
<string-name>Jeremias Traub</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Institute of Environmental Physics, Heidelberg University,
Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Heidelberg Graduate School for Physics, Heidelberg
University, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-07-08">
<day>8</day>
<month>7</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>52</issue>
<fpage>2316</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>YAML</kwd>
<kwd>computer simulations</kwd>
<kwd>research software</kwd>
<kwd>data analysis</kwd>
<kwd>plotting</kwd>
<kwd>data processing pipeline</kwd>
<kwd>configuration-based interfaces</kwd>
<kwd>hierarchical data structures</kwd>
<kwd>HDF5</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Researchers, especially those relying on computer simulations,
  frequently generate and analyze large amounts of data. With recent
  increases in computational capacity, the demand to efficiently and
  reliably process the generated data is growing accordingly. To address
  these needs, one powerful approach is to streamline the data handling,
  transformation, and visualization procedures into a <italic>data
  processing pipeline</italic>. Akin to the Continuous Integration
  pipelines widely used in modern software engineering, a data
  processing pipeline implements an automated sequence of predefined,
  yet dynamically configurable operations. Ultimately, using such a data
  processing pipeline can greatly improve the efficiency, reliability,
  and reproducibility of the scientific workflow.</p>
  <p>However, we observed two challenges that impede the implementation
  and use of data processing pipelines in modeling-based research.
  First, data is often hierarchically structured, typically because it
  represents some underlying modularization in the investigated model.
  Second, the data may be semantically heterogeneous: this means that it
  may include many different data structures (e.g., numerical array-like
  data of different sizes, configuration files, metadata), or data that
  becomes meaningful only after processing. These properties make it
  difficult to handle data uniformly, thus greatly complicating the
  automatization efforts needed when constructing a processing
  pipeline.</p>
  <p><monospace>dantro</monospace> – from <italic>data</italic> and
  <italic>dentro</italic> (Greek for <italic>tree</italic>) – is a
  Python package that overcomes these problems; it does so by providing
  a uniform interface that handles hierarchically structured and
  semantically heterogeneous data. <monospace>dantro</monospace> is
  built around three main features, which constitute the stages of the
  data processing pipeline:</p>
  <list list-type="bullet">
    <list-item>
      <p><bold>handling:</bold> loading heterogeneous data into a
      tree-like data structure and providing a uniform interface for
      it</p>
    </list-item>
    <list-item>
      <p><bold>transformation:</bold> efficiently performing arbitrary
      operations on the data</p>
    </list-item>
    <list-item>
      <p><bold>visualization:</bold> creating a visual representation of
      the processed data</p>
    </list-item>
  </list>
  <p>While plenty of established Python packages exist for each of these
  stages (e.g., <monospace>numpy</monospace>
  (<xref alt="van der Walt et al., 2011" rid="ref-vanderwalt2011numpy" ref-type="bibr">van
  der Walt et al., 2011</xref>), <monospace>xarray</monospace>
  (<xref alt="Hoyer &amp; Hamman, 2017" rid="ref-hoyer2017xarray" ref-type="bibr">Hoyer
  &amp; Hamman, 2017</xref>), <monospace>h5py</monospace>
  (<xref alt="Collette, 2013" rid="ref-collette2013h5py" ref-type="bibr">Collette,
  2013</xref>), <monospace>dask</monospace>
  (<xref alt="Dask Development Team, 2016" rid="ref-dask2016manual" ref-type="bibr">Dask
  Development Team, 2016</xref>;
  <xref alt="Rocklin, 2015" rid="ref-rocklin2015dask" ref-type="bibr">Rocklin,
  2015</xref>), and <monospace>matplotlib</monospace>
  (<xref alt="Hunter, 2007" rid="ref-hunter2007matplotlib" ref-type="bibr">Hunter,
  2007</xref>)), coupling them into a processing pipeline can be
  difficult, especially when high generality and flexibility is desired.
  With <monospace>dantro</monospace>’s uniform data handling interface,
  the interoperability between these packages is simplified, while
  additionally allowing pipeline-specific specializations (see details
  section for more information). Furthermore,
  <monospace>dantro</monospace> is designed for a configuration-based
  specification of all operations via YAML configuration files
  (<xref alt="Ben-Kiki et al., 2009" rid="ref-yaml2009" ref-type="bibr">Ben-Kiki
  et al., 2009</xref>). Thus, once the pipeline is set up, it can be
  controlled entirely via these configuration files and without
  requiring any code changes. Taken together, the unique feature of
  <monospace>dantro</monospace> is that it conveniently combines the
  capabilities of many packages and defines a data processing pipeline
  without having to take care of interfacing between the many involved
  packages.</p>
  <p>Importantly, <monospace>dantro</monospace> is meant to be
  <italic>integrated</italic> into projects. While this integration
  process creates a one-time overhead during the setup of the pipeline,
  we believe that it offers more generality and supplies a wider feature
  set compared to any ready-to-use pipeline. To achieve a deep
  integration, the data structures provided by
  <monospace>dantro</monospace> define a shared interface and offer many
  possibilities to specialize and extend them to the requirements and
  data structures of the project it is integrated in. Effectively, the
  processing pipeline becomes a part of the project, growing and
  developing alongside it.</p>
  <p><monospace>dantro</monospace> was developed as part of the Utopia
  project
  (<xref alt="Riedel et al., 2020" rid="ref-riedel2020utopia" ref-type="bibr">Riedel
  et al., 2020</xref>;
  <xref alt="Sevinchan et al., 2020" rid="ref-sevinchan2020iccs" ref-type="bibr">Sevinchan
  et al., 2020</xref>), a modeling framework for complex and evolving
  systems. Within this project, <monospace>dantro</monospace> is used
  for automated, configuration-based data processing and plotting. While
  <monospace>dantro</monospace> was devised with simulation-based
  applications in mind, it is general enough to be used in all domains
  that require the handling, transformation, and visualization of data,
  also offering use cases for statistical or exploratory data
  analysis.</p>
  <p>The <monospace>dantro</monospace> package is released under the
  <ext-link ext-link-type="uri" xlink:href="https://www.gnu.org/licenses/lgpl-3.0.html">LGPLv3+</ext-link>
  and is available from the Python Package Index (PyPI) at
  <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/dantro/"><monospace>pypi.org/project/dantro</monospace></ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://anaconda.org/conda-forge/dantro">from
  <monospace>conda-forge</monospace></ext-link>. Its documentation,
  including integration instructions and examples, can be found at
  <ext-link ext-link-type="uri" xlink:href="https://dantro.readthedocs.io/"><monospace>dantro.readthedocs.io</monospace></ext-link>.</p>
</sec>
<sec id="details">
  <title>Details</title>
  <p>Corresponding to the three stages comprising a data processing
  pipeline, <monospace>dantro</monospace> is built upon three main
  modules: the data tree, a data transformation framework, and a
  plotting framework.</p>
  <sec id="the-data-tree">
    <title>The Data Tree</title>
    <p>The data tree is a representation of hierarchically structured
    data. Therein, <monospace>dantro</monospace> employs <italic>data
    groups</italic> and <italic>data containers</italic>, which
    constitute the branching points and the leaves of the tree,
    respectively. Abstract base classes are used to define the shared
    interface for all data types used in the tree.</p>
    <p>Furthermore, <monospace>dantro</monospace> provides a set of
    mixin classes, which can be used to specialize a container or group
    for the data they are expected to hold. As an example, a group might
    hold containers that represent sequential simulation output; the
    group could then be specialized to represent a time series, offering
    the corresponding data selection capabilities. Another example is
    the <monospace>GraphGroup</monospace>, which generates a
    <monospace>networkx</monospace>
    (<xref alt="Hagberg et al., 2008" rid="ref-networkx2008" ref-type="bibr">Hagberg
    et al., 2008</xref>) graph object from the data available in the
    group. For numerical data, containers are available that specialize
    in holding <monospace>numpy</monospace> arrays or
    <monospace>xarray</monospace> data structures; these containers
    behave in the same way as the underlying arrays while additionally
    adhering to the <monospace>dantro</monospace> interface. As long as
    groups and containers concur to the interface of the data tree, they
    can be customized in any way that suits the data structures of the
    project <monospace>dantro</monospace> is used in.</p>
    <p>At the root of the data tree is the
    <monospace>DataManager</monospace>, which is associated with a data
    directory; it takes care of loading data into the tree, forming a
    bridge between the data in memory and that inside the directory. The
    <monospace>DataManager</monospace> can be extended with a set of
    readily-available loaders for different file formats. For loading
    HDF5 files
    (<xref alt="The HDF Group, 1997" rid="ref-hdf5" ref-type="bibr">The
    HDF Group, 1997</xref>), which are widely used to handle high
    volumes of hierarchically organized data, it uses
    <monospace>h5py</monospace> to load the file into the data tree
    while retaining its internal structure.
    <monospace>dantro</monospace> furthermore provides a <italic>data
    proxy</italic> construct, which acts as a placeholder for any form
    of data, effectively allowing it to delay the loading of the data
    until it becomes necessary. For numerical data,
    <monospace>dantro</monospace> combines this with the capabilities of
    the <monospace>dask</monospace> package to perform operations on
    data that cannot be loaded into memory at the same time.</p>
  </sec>
  <sec id="the-data-transformation-framework">
    <title>The Data Transformation Framework</title>
    <p>The data transformation framework relies on the uniform interface
    of the data tree, which allows it to perform arbitrary
    transformations on the data. This includes but is not limited to
    aggregating statistical measures, filtering data, or performing
    calculations using different entities from the data tree.</p>
    <p>To achieve this, a pipeline user specifies a directed acyclic
    graph (DAG) of operations that are to be carried out on the data.
    These operations can be chosen from a set of predefined or
    user-specified operations, but in principle include all operations
    available in Python. Moreover, transformations can involve arbitrary
    objects in the data tree and file-based caching of operations can be
    used to alleviate repeating long computations, thus speeding up the
    data transformation procedure. Following
    <monospace>dantro</monospace>’s configuration-based approach,
    specification of the DAG and its arguments can happen entirely via
    YAML configuration files.</p>
  </sec>
  <sec id="the-plotting-framework">
    <title>The Plotting Framework</title>
    <p>The visualization of the potentially transformed data concludes
    the data processing pipeline. The <monospace>dantro</monospace>
    plotting framework consists of two main data structures: the
    <monospace>PlotManager</monospace> and the <italic>plot
    creators</italic>.</p>
    <p>The <monospace>PlotManager</monospace> implements a
    configuration-based interface for defining which plots are to be
    created and further consolidates all overarching features. For
    example, the data tree is made available, the DAG framework is
    invoked, or plot configuration inheritance and composition are
    managed. Furthermore, using the <monospace>paramspace</monospace>
    package
    (<xref alt="Sevinchan, 2020" rid="ref-sevinchan2020paramspace" ref-type="bibr">Sevinchan,
    2020</xref>), one can easily declare plot configurations with
    varying parameters, subsequently resulting in multiple output
    files.</p>
    <p>Given the configuration and the data, the individual plot
    creators then focus on the actual visualization using a plotting
    backend. Currently, <monospace>dantro</monospace> provides plot
    creators that are based on <monospace>matplotlib</monospace>.
    Plotting procedures are defined as separate functions that use the
    familiar <monospace>matplotlib</monospace> interface. On top of
    that, these creators allow the user to specify plot aesthetics
    (e.g., style sheet, RC parameters) via the plot configuration and
    simplify the creation of animations. For instance, to generically
    represent high-dimensional data, <monospace>dantro</monospace>
    integrates <monospace>xarray</monospace>’s plotting capabilities and
    uses the animation feature to make one additional visualization
    dimension available. Aside from the integrated plotting functions,
    custom plotting functions can be easily defined and benefit from the
    same infrastructure.</p>
    <p>As part of a pipeline, additional plot creators can be defined
    that use a different plotting backend or focus on some specific
    visualization aspects. As an example, one intriguing addition to the
    set of plot creators would be to utilize the
    <monospace>altair</monospace> framework
    (<xref alt="VanderPlas et al., 2018" rid="ref-altair2018" ref-type="bibr">VanderPlas
    et al., 2018</xref>) where plots can be specified via the Vega-Lite
    visualization grammar
    (<xref alt="Satyanarayan et al., 2017" rid="ref-vegalite2017" ref-type="bibr">Satyanarayan
    et al., 2017</xref>). Such a declarative plotting approach would be
    well-suited for the visualization stage of a
    <monospace>dantro</monospace>-based data processing pipeline,
    further simplifying and generalizing the bridge between transformed
    data and its visualization.</p>
  </sec>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>We would like to thank Unai Fischer Abaigar, Daniel Lake, and
  Julian Weninger for their contributions to
  <monospace>dantro</monospace>. We thank Maria Blöchl for comments on
  an earlier version of this manuscript. We are grateful to Kurt Roth
  for feedback on the manuscript and his support during the development
  of this project.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-sevinchan2020iccs">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Sevinchan</surname><given-names>Yunus</given-names></name>
          <name><surname>Herdeanu</surname><given-names>Benjamin</given-names></name>
          <name><surname>Mack</surname><given-names>Harald</given-names></name>
          <name><surname>Riedel</surname><given-names>Lukas</given-names></name>
          <name><surname>Roth</surname><given-names>Kurt</given-names></name>
        </person-group>
        <article-title>Boosting group-level synergies by using a shared modeling framework</article-title>
        <source>Lecture notes in computer science</source>
        <publisher-name>Springer International Publishing</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <uri>https://doi.org/10.1007/978-3-030-50436-6_32</uri>
        <pub-id pub-id-type="doi">10.1007/978-3-030-50436-6_32</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-riedel2020utopia">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Riedel</surname><given-names>Lukas</given-names></name>
          <name><surname>Herdeanu</surname><given-names>Benjamin</given-names></name>
          <name><surname>Mack</surname><given-names>Harald</given-names></name>
          <name><surname>Sevinchan</surname><given-names>Yunus</given-names></name>
          <name><surname>Weninger</surname><given-names>Julian</given-names></name>
        </person-group>
        <article-title>Utopia: A comprehensive and collaborative modeling framework for complex and evolving systems</article-title>
        <source>Journal of Open Source Software</source>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.21105/joss.02165</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-sevinchan2020paramspace">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Sevinchan</surname><given-names>Yunus</given-names></name>
        </person-group>
        <source>Paramspace v2.4.1</source>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2020-05">2020</year><month>05</month>
        <uri>https://pypi.org/project/paramspace/</uri>
        <pub-id pub-id-type="doi">10.5281/zenodo.3826470</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-hoyer2017xarray">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
          <name><surname>Hamman</surname><given-names>Joe</given-names></name>
        </person-group>
        <article-title>Xarray: N-D labeled arrays and datasets in Python</article-title>
        <source>Journal of Open Research Software</source>
        <publisher-name>Ubiquity Press</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>5</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.5334/jors.148</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-hunter2007matplotlib">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>John D.</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D graphics environment</article-title>
        <source>Computing in Science Engineering</source>
        <year iso-8601-date="2007-05">2007</year><month>05</month>
        <volume>9</volume>
        <issue>3</issue>
        <issn>1558-366X</issn>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-vanderwalt2011numpy">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>van der Walt</surname><given-names>Stefan</given-names></name>
          <name><surname>Colbert</surname><given-names>S. Chris</given-names></name>
          <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        </person-group>
        <article-title>The NumPy array: A structure for efficient numerical computation</article-title>
        <source>Computing in Science Engineering</source>
        <year iso-8601-date="2011">2011</year>
        <volume>13</volume>
        <issue>2</issue>
        <issn>1558-366X</issn>
        <pub-id pub-id-type="doi">10.1109/MCSE.2011.37</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-dask2016manual">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>Dask Development Team</string-name>
        </person-group>
        <source>Dask: Library for dynamic task scheduling</source>
        <year iso-8601-date="2016">2016</year>
        <uri>https://dask.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-rocklin2015dask">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Rocklin</surname><given-names>Matthew</given-names></name>
        </person-group>
        <article-title>Dask: Parallel computation with blocked algorithms and task scheduling</article-title>
        <source>Proceedings of the 14th python in science conference</source>
        <person-group person-group-type="editor">
          <name><surname>Huff</surname><given-names>Kathryn</given-names></name>
          <name><surname>Bergstra</surname><given-names>James</given-names></name>
        </person-group>
        <year iso-8601-date="2015">2015</year>
        <pub-id pub-id-type="doi">10.25080/majora-7b98e3ed-013</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-collette2013h5py">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Collette</surname><given-names>Andrew</given-names></name>
        </person-group>
        <source>Python and HDF5</source>
        <publisher-name>O’Reilly Media</publisher-name>
        <year iso-8601-date="2013">2013</year>
      </element-citation>
    </ref>
    <ref id="ref-hdf5">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>The HDF Group</string-name>
        </person-group>
        <article-title>Hierarchical data format version 5</article-title>
        <year iso-8601-date="1997">1997</year>
        <uri>http://www.hdfgroup.org/HDF5</uri>
      </element-citation>
    </ref>
    <ref id="ref-yaml2009">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Ben-Kiki</surname><given-names>Oren</given-names></name>
          <name><surname>Evans</surname><given-names>Clark</given-names></name>
          <name><surname>Net</surname><given-names>Ingy döt</given-names></name>
        </person-group>
        <article-title>YAML Ain’t Markup Language, v1.2</article-title>
        <year iso-8601-date="2009">2009</year>
        <date-in-citation content-type="access-date"><year iso-8601-date="2020-03-03">2020</year><month>03</month><day>03</day></date-in-citation>
        <uri>https://yaml.org/spec/1.2/spec.html</uri>
      </element-citation>
    </ref>
    <ref id="ref-altair2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>VanderPlas</surname><given-names>Jacob</given-names></name>
          <name><surname>Granger</surname><given-names>Brian</given-names></name>
          <name><surname>Heer</surname><given-names>Jeffrey</given-names></name>
          <name><surname>Moritz</surname><given-names>Dominik</given-names></name>
          <name><surname>Wongsuphasawat</surname><given-names>Kanit</given-names></name>
          <name><surname>Satyanarayan</surname><given-names>Arvind</given-names></name>
          <name><surname>Lees</surname><given-names>Eitan</given-names></name>
          <name><surname>Timofeev</surname><given-names>Ilia</given-names></name>
          <name><surname>Welsh</surname><given-names>Ben</given-names></name>
          <name><surname>Sievert</surname><given-names>Scott</given-names></name>
        </person-group>
        <article-title>Altair: Interactive statistical visualizations for python</article-title>
        <source>Journal of Open Source Software</source>
        <publisher-name>The Open Journal</publisher-name>
        <year iso-8601-date="2018">2018</year>
        <pub-id pub-id-type="doi">10.21105/joss.01057</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-vegalite2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Satyanarayan</surname><given-names>Arvind</given-names></name>
          <name><surname>Moritz</surname><given-names>Dominik</given-names></name>
          <name><surname>Wongsuphasawat</surname><given-names>Kanit</given-names></name>
          <name><surname>Heer</surname><given-names>Jeffrey</given-names></name>
        </person-group>
        <article-title>Vega-lite: A grammar of interactive graphics</article-title>
        <source>IEEE Trans. Visualization &amp; Comp. Graphics (Proc. InfoVis)</source>
        <year iso-8601-date="2017">2017</year>
        <uri>http://idl.cs.washington.edu/papers/vega-lite</uri>
        <pub-id pub-id-type="doi">10.1109/TVCG.2016.2599030</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-networkx2008">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Hagberg</surname><given-names>Aric A.</given-names></name>
          <name><surname>Schult</surname><given-names>Daniel A.</given-names></name>
          <name><surname>Swart</surname><given-names>Pieter J.</given-names></name>
        </person-group>
        <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
        <source>Proceedings of the 7th python in science conference</source>
        <person-group person-group-type="editor">
          <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
          <name><surname>Vaught</surname><given-names>Travis</given-names></name>
          <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
        </person-group>
        <publisher-loc>Pasadena, CA USA</publisher-loc>
        <year iso-8601-date="2008">2008</year>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

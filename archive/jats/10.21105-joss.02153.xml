<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2153</article-id>
<article-id pub-id-type="doi">10.21105/joss.02153</article-id>
<title-group>
<article-title>EvoMaster: A Search-Based System Test Generation
Tool</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-0799-2930</contrib-id>
<string-name>Andrea Arcuri</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-0747-8205</contrib-id>
<string-name>Juan Pablo Galeotti</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-1393-4123</contrib-id>
<string-name>Bogdan Marculescu</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-1204-9322</contrib-id>
<string-name>Man Zhang</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Kristiania University College, Department of Technology,
Oslo, Norway</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>FCEyN-UBA, and ICC, CONICET-UBA, Depto. de Computaci'on,
Buenos Aires, Argentina</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>6</volume>
<issue>57</issue>
<fpage>2153</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Kotlin</kwd>
<kwd>SBST</kwd>
<kwd>search-based software engineering</kwd>
<kwd>test generation</kwd>
<kwd>system testing</kwd>
<kwd>REST</kwd>
<kwd>evolutionary computation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Testing web/enterprise applications is complex and expensive when
  done manually. Often, software testing takes up to half of the
  development time and cost for a system. So much testing is needed
  because the cost of software failure is simply too large: for example,
  in 2017, 304 software failures (reported in the media) impacted 3.6
  billion people and $1.7 trillion in assets worldwide
  (<xref alt="Tricentis, 2017" rid="ref-tricentis2017" ref-type="bibr">Tricentis,
  2017</xref>). Unfortunately, due to its high cost, software testing is
  often left incomplete, and only applied partially.</p>
  <p>To address this problem, in <italic>Software Engineering</italic>
  (SE) research a lot of effort has been spent in trying to design and
  implement novel techniques aimed at automating several different
  tasks, where software testing is among the most studied tasks.
  <italic>Search-Based Software Testing</italic> (SBST)
  (<xref alt="Harman et al., 2012" rid="ref-harman2012search" ref-type="bibr">Harman
  et al., 2012</xref>) casts the problem of software testing as an
  optimization problem, aimed at, for example, maximizing code coverage
  and fault detection.</p>
  <p>Our SBST tool called <monospace>EvoMaster</monospace> addresses
  these challenges by using evolutionary techniques to automatically
  generate test cases. It currently focuses on RESTful web services,
  which are the pillars of modern web and enterprise applications
  (<xref alt="Allamaraju, 2010" rid="ref-allamaraju2010restful" ref-type="bibr">Allamaraju,
  2010</xref>;
  <xref alt="Fielding, 2000" rid="ref-fielding2000architectural" ref-type="bibr">Fielding,
  2000</xref>).</p>
  <p>The <monospace>EvoMaster</monospace> tool is aimed at:</p>
  <list list-type="bullet">
    <list-item>
      <p>practitioners in industry that want to automatically test their
      software.</p>
    </list-item>
    <list-item>
      <p>researchers that need generated test cases for their
      studies.</p>
    </list-item>
  </list>
</sec>
<sec id="tool-summary">
  <title>Tool Summary</title>
  <p><monospace>EvoMaster</monospace>
  (<xref alt="Arcuri, 2018a" rid="ref-arcuri2018evomaster" ref-type="bibr">Arcuri,
  2018a</xref>) is a SBST tool that automatically
  <italic>generates</italic> system-level test cases. Internally, it
  uses an <italic>Evolutionary Algorithm</italic> and <italic>Dynamic
  Program Analysis</italic> to be able to generate effective test cases.
  The approach is to <italic>evolve</italic> test cases from an initial
  population of random ones, using code coverage and fault detection as
  fitness function.</p>
  <p>Key features:</p>
  <list list-type="bullet">
    <list-item>
      <p>At the moment, <italic>EvoMaster</italic> targets RESTful APIs
      compiled to JVM <bold>8</bold> and <bold>11</bold> bytecode.</p>
    </list-item>
    <list-item>
      <p>The APIs must provide a schema in
      <italic>OpenAPI/Swagger</italic> format (either
      <italic>v2</italic> or <italic>v3</italic>).</p>
    </list-item>
    <list-item>
      <p>The tool generates JUnit (version 4 or 5) tests, written in
      either Java or Kotlin.</p>
    </list-item>
    <list-item>
      <p>Fault detection: <italic>EvoMaster</italic> can generate tests
      cases that reveal faults/bugs in the tested applications.
      Different heuristics are employed, like checking for 500 status
      codes and mismatches from the API schemas.</p>
    </list-item>
    <list-item>
      <p>Self-contained tests: the generated tests do start/stop the
      application, binding to an ephemeral port. This means that the
      generated tests can be used for <italic>regression
      testing</italic> (e.g., added to the <italic>Git</italic>
      repository of the application, and run with any build tool such as
      <italic>Maven</italic> and <italic>Gradle</italic>).</p>
    </list-item>
    <list-item>
      <p>Advanced <italic>whitebox</italic> heuristics:
      <italic>EvoMaster</italic> analyses the bytecode of the tested
      applications, and uses several heuristics such as
      <italic>testability transformations</italic> and <italic>taint
      analysis</italic> to be able to generate more effective test
      cases.</p>
    </list-item>
    <list-item>
      <p>SQL handling: <italic>EvoMaster</italic> can intercept and
      analyse all communications done with SQL databases, and use such
      information to generate higher code coverage test cases.
      Furthermore, it can generate data directly into the databases, and
      have such initialization automatically added in the generated
      tests. At the moment, <italic>EvoMaster</italic> supports
      <italic>H2</italic> and <italic>Postgres</italic> databases.</p>
    </list-item>
    <list-item>
      <p><italic>Blackbox</italic> testing mode: can run on any API
      (regardless of its programming language), as long as an
      <italic>OpenAPI</italic> schema is provided. However, results will
      be worse than <italic>whitebox</italic> testing (e.g., due to lack
      of bytecode analysis).</p>
    </list-item>
  </list>
</sec>
<sec id="published-results">
  <title>Published Results</title>
  <p>When addressing the testing of real-world web/enterprise
  applications, there are many challenges. The tested code can for
  example have complex execution flows, where the boolean predicates in
  <italic>if</italic> and <italic>loop</italic> statements depend on
  specific input data. Furthermore, the execution flow could depend on
  interactions with external entities, such as databases, GUIs and
  remote web services. The search space of all possible test inputs is
  huge, where only a tiny subset lead to maximize code coverage and
  detect faults.</p>
  <p>To face and overcome those challenges, <italic>EvoMaster</italic>
  has been used to experiment with several novel techniques. These
  techniques are now integrated in <italic>EvoMaster</italic>, where
  their best settings (based on empirical studies) are on by
  default.</p>
  <p>This research work led to several publications: novel search
  algorithms such as <italic>MIO</italic>
  (<xref alt="Arcuri, 2017a" rid="ref-mio2017" ref-type="bibr">Arcuri,
  2017a</xref>,
  <xref alt="2018b" rid="ref-arcuri2018test" ref-type="bibr">2018b</xref>),
  addressing the white-box testing of RESTful APIs
  (<xref alt="Arcuri, 2017b" rid="ref-arcuri2017restful" ref-type="bibr">Arcuri,
  2017b</xref>,
  <xref alt="2019" rid="ref-arcuri2019restful" ref-type="bibr">2019</xref>),
  resource-dependency handling
  (<xref alt="Zhang et al., 2019" rid="ref-zhang2019resource" ref-type="bibr">Zhang
  et al., 2019</xref>), accesses to SQL databases
  (<xref alt="Arcuri &amp; Galeotti, 2019" rid="ref-arcuri2019sql" ref-type="bibr">Arcuri
  &amp; Galeotti, 2019</xref>), and novel <italic>testability
  transformations</italic>
  (<xref alt="Arcuri &amp; Galeotti, 2020" rid="ref-arcuri2020testability" ref-type="bibr">Arcuri
  &amp; Galeotti, 2020</xref>).</p>
</sec>
<sec id="related-work">
  <title>Related Work</title>
  <p>In the recent years, different techniques have been proposed for
  <italic>black-box</italic> testing of RESTful APIs
  (<xref alt="Atlidakis et al., 2019" rid="ref-restlerICSE2019" ref-type="bibr">Atlidakis
  et al., 2019</xref>;
  <xref alt="Ed-douibi et al., 2018" rid="ref-eddouibi2018automatic" ref-type="bibr">Ed-douibi
  et al., 2018</xref>;
  <xref alt="Karlsson et al., 2020" rid="ref-karlsson2020QuickREST" ref-type="bibr">Karlsson
  et al., 2020</xref>;
  <xref alt="Viglianisi et al., 2020" rid="ref-viglianisi2020resttestgen" ref-type="bibr">Viglianisi
  et al., 2020</xref>). Those present different variants of random
  testing, enhanced with heuristics based on the information provided in
  the API schemas. As those techniques are black-box, they do not access
  the source-code/bytecode of the tested APIs, and so cannot exploit any
  such information to improve the generation of test cases.</p>
  <p>At the time of this writing, <italic>EvoMaster</italic> appears to
  be the only tool that can do both <italic>black-box</italic> and
  <italic>white-box</italic> testing, and that is also released as
  open-source. Supporting black-box testing is important, as it is
  easier to setup and use. However, white-box testing leads to better
  results (e.g., higher code coverage and fault detection), as it can
  exploit more information on the system under test.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We thank Annibale Panichella for providing a review and fix of our
  implementation of his MOSA algorithm. We also want to thank Agustina
  Aldasoro for her contributed bug fixes. This work is funded by the
  Research Council of Norway (project on Evolutionary Enterprise
  Testing, grant agreement No 274385), and partially by UBACYT-2018
  20020170200249BA, PICT-2015-2741.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-arcuri2018evomaster">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Arcuri</surname><given-names>Andrea</given-names></name>
        </person-group>
        <article-title>EvoMaster: Evolutionary Multi-context Automated System Test Generation</article-title>
        <source>IEEE International Conference on Software Testing, Verification and Validation (ICST)</source>
        <publisher-name>IEEE</publisher-name>
        <year iso-8601-date="2018">2018</year>
        <pub-id pub-id-type="doi">10.1109/icst.2018.00046</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-mio2017">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Arcuri</surname><given-names>Andrea</given-names></name>
        </person-group>
        <article-title>Many Independent Objective (MIO) Algorithm for Test Suite Generation</article-title>
        <source>International Symposium on Search Based Software Engineering (SSBSE)</source>
        <year iso-8601-date="2017">2017</year>
        <pub-id pub-id-type="doi">10.1007/978-3-319-66299-2_1</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-arcuri2018test">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Arcuri</surname><given-names>Andrea</given-names></name>
        </person-group>
        <article-title>Test suite generation with the Many Independent Objective (MIO) algorithm</article-title>
        <source>Information and Software Technology</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2018">2018</year>
        <volume>104</volume>
        <pub-id pub-id-type="doi">10.1016/j.infsof.2018.05.003</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-arcuri2017restful">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Arcuri</surname><given-names>Andrea</given-names></name>
        </person-group>
        <article-title>RESTful API Automated Test Case Generation</article-title>
        <source>IEEE International Conference on Software Quality, Reliability and Security (QRS)</source>
        <publisher-name>IEEE</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <pub-id pub-id-type="doi">10.1109/qrs.2017.11</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-arcuri2019restful">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Arcuri</surname><given-names>Andrea</given-names></name>
        </person-group>
        <article-title>RESTful API Automated Test Case Generation with EvoMaster</article-title>
        <source>ACM Transactions on Software Engineering and Methodology (TOSEM)</source>
        <publisher-name>ACM</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <volume>28</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1145/3293455</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-zhang2019resource">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Zhang</surname><given-names>Man</given-names></name>
          <name><surname>Marculescu</surname><given-names>Bogdan</given-names></name>
          <name><surname>Arcuri</surname><given-names>Andrea</given-names></name>
        </person-group>
        <article-title>Resource-based test case generation for RESTful web services</article-title>
        <source>Genetic and Evolutionary Computation Conference (GECCO)</source>
        <publisher-name>ACM</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <pub-id pub-id-type="doi">10.1145/3321707.3321815</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-arcuri2019sql">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Arcuri</surname><given-names>Andrea</given-names></name>
          <name><surname>Galeotti</surname><given-names>Juan P</given-names></name>
        </person-group>
        <article-title>SQL data generation to enhance Search-Based System Testing</article-title>
        <source>Genetic and Evolutionary Computation Conference (GECCO)</source>
        <publisher-name>ACM</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <pub-id pub-id-type="doi">10.1145/3321707.3321732</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-arcuri2020testability">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Arcuri</surname><given-names>Andrea</given-names></name>
          <name><surname>Galeotti</surname><given-names>Juan P.</given-names></name>
        </person-group>
        <article-title>Testability Transformations For Existing APIs</article-title>
        <source>IEEE International Conference on Software Testing, Verification and Validation (ICST)</source>
        <publisher-name>IEEE</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.1109/ICST46399.2020.00025</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-tricentis2017">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Tricentis</surname></name>
        </person-group>
        <article-title>Software Fail Watch 5th Edition</article-title>
        <publisher-name>https://www.tricentis.com/resources/software-fail-watch-5th-edition/</publisher-name>
        <year iso-8601-date="2017">2017</year>
      </element-citation>
    </ref>
    <ref id="ref-harman2012search">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Harman</surname><given-names>M.</given-names></name>
          <name><surname>Mansouri</surname><given-names>S. A.</given-names></name>
          <name><surname>Zhang</surname><given-names>Y.</given-names></name>
        </person-group>
        <article-title>Search-based software engineering: Trends, techniques and applications</article-title>
        <source>ACM Computing Surveys (CSUR)</source>
        <publisher-name>ACM</publisher-name>
        <year iso-8601-date="2012">2012</year>
        <volume>45</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1145/2379776.2379787</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-allamaraju2010restful">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Allamaraju</surname><given-names>Subbu</given-names></name>
        </person-group>
        <source>Restful web services cookbook: Solutions for improving scalability and simplicity</source>
        <publisher-name>&quot; O’Reilly Media, Inc.&quot;</publisher-name>
        <year iso-8601-date="2010">2010</year>
      </element-citation>
    </ref>
    <ref id="ref-fielding2000architectural">
      <element-citation publication-type="thesis">
        <person-group person-group-type="author">
          <name><surname>Fielding</surname><given-names>Roy Thomas</given-names></name>
        </person-group>
        <article-title>Architectural styles and the design of network-based software architectures</article-title>
        <publisher-name>University of California, Irvine</publisher-name>
        <year iso-8601-date="2000">2000</year>
      </element-citation>
    </ref>
    <ref id="ref-restlerICSE2019">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Atlidakis</surname><given-names>Vaggelis</given-names></name>
          <name><surname>Godefroid</surname><given-names>Patrice</given-names></name>
          <name><surname>Polishchuk</surname><given-names>Marina</given-names></name>
        </person-group>
        <article-title>RESTler: Stateful REST API Fuzzing</article-title>
        <source>Proceedings of the 41st International Conference on Software Engineering</source>
        <publisher-name>IEEE Press</publisher-name>
        <publisher-loc>Montreal, Quebec, Canada</publisher-loc>
        <year iso-8601-date="2019">2019</year>
        <pub-id pub-id-type="doi">10.1109/ICSE.2019.00083</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-karlsson2020QuickREST">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Karlsson</surname><given-names>Stefan</given-names></name>
          <name><surname>Causevic</surname><given-names>Adnan</given-names></name>
          <name><surname>Sundmark</surname><given-names>Daniel</given-names></name>
        </person-group>
        <article-title>QuickREST: Property-based Test Generation of OpenAPI Described RESTful APIs</article-title>
        <source>IEEE International Conference on Software Testing, Verification and Validation (ICST)</source>
        <publisher-name>IEEE</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.1109/ICST46399.2020.00023</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-viglianisi2020resttestgen">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Viglianisi</surname><given-names>Emanuele</given-names></name>
          <name><surname>Dallago</surname><given-names>Michael</given-names></name>
          <name><surname>Ceccato</surname><given-names>Mariano</given-names></name>
        </person-group>
        <article-title>RESTTESTGEN: Automated Black-Box Testing of RESTful APIs</article-title>
        <source>IEEE International Conference on Software Testing, Verification and Validation (ICST)</source>
        <publisher-name>IEEE</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <pub-id pub-id-type="doi">10.1109/ICST46399.2020.00024</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-eddouibi2018automatic">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Ed-douibi</surname><given-names>Hamza</given-names></name>
          <name><surname>Cánovas Izquierdo</surname><given-names>Javier Luis</given-names></name>
          <name><surname>Cabot</surname><given-names>Jordi</given-names></name>
        </person-group>
        <article-title>Automatic Generation of Test Cases for REST APIs: A Specification-Based Approach</article-title>
        <source>2018 IEEE 22nd International Enterprise Distributed Object Computing Conference (EDOC)</source>
        <year iso-8601-date="2018">2018</year>
        <volume></volume>
        <pub-id pub-id-type="doi">10.1109/EDOC.2018.00031</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">44</article-id>
<article-id pub-id-type="doi">10.21105/joss.00044</article-id>
<title-group>
<article-title>Elektra: universal framework to access configuration
parameters</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-1493-9065</contrib-id>
<string-name>Markus Raab</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>TU Wien (TUW)</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2016-07-23">
<day>23</day>
<month>7</month>
<year>2016</year>
</pub-date>
<volume>1</volume>
<issue>8</issue>
<fpage>44</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>configuration</kwd>
<kwd>context awareness</kwd>
<kwd>configuration files</kwd>
<kwd>interception</kwd>
<kwd>integration</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Today, most software invent their own configuration systems to
  dynamically load their configuration files at run-time. Up to now, it
  was difficult to integrate and specify the configuration across such
  applications. Elektra
  (<xref alt="Raab, 2016b" rid="ref-elektra" ref-type="bibr">Raab,
  2016b</xref>) provides a framework to bridge this gap
  (<xref alt="Raab, 2010" rid="ref-raab2010thesis" ref-type="bibr">Raab,
  2010</xref>). In its essence, Elektra can be thought of a database
  that uses standard configuration files to persist data. Furthermore, a
  simple configuration specification language can be used to describe
  the data and its access to it.</p>
  <p>Because of its generic nature, we cannot give an exhaustive list of
  what can be done with Elektra. The obvious cases, how developers and
  administrators should use Elektra to avoid configuration integration
  issues mentioned earlier, are described in Elektra’s documentation.
  But it is ongoing research to find further use cases where these
  abstractions are useful. In this paper, we will give three concrete
  examples where Elektra has value to the research community.</p>
  <sec id="context-awareness">
    <title>Context Awareness</title>
    <p>Currently, applications sometimes modify configuration values
    before using them. The reasons for such modifications can be called
    context, e.g., the number of CPUs, the current operating system, or
    the battery status [raab2016persistent]. The modifications within
    applications are problematic because it is not transparent for the
    user which configuration values the application actually will
    use.</p>
    <p>We propose to move the logic that is responsible for determining
    configuration values into Elektra’s specification language
    (<xref alt="Raab, 2015b" rid="ref-raab2015kps" ref-type="bibr">Raab,
    2015b</xref>)
    (<xref alt="Raab, 2016a" rid="ref-raab2016improving" ref-type="bibr">Raab,
    2016a</xref>)
    (<xref alt="Raab, 2016c" rid="ref-raab2016unanticipated" ref-type="bibr">Raab,
    2016c</xref>). This way, the user can query the up-to-date
    configuration values and get identical results to what the
    application will see. But even better, users can change the way
    context is taken into account easily.</p>
    <p>Elektra allows us to intercept unmodified applications (by
    ‘’hijacking’’ calls to their configuration system)
    (<xref alt="Raab, 2016c" rid="ref-raab2016unanticipated" ref-type="bibr">Raab,
    2016c</xref>). For example, an application calls the C-function
    getenv() but actually retrieves a value from Elektra and not from an
    environment variable. This way we can make applications context
    aware that previously were not.</p>
  </sec>
  <sec id="validation">
    <title>Validation</title>
    <p>Developers often do not provide a way to validate configuration
    files
    (<xref alt="Raab, 2015a" rid="ref-raab2015safe" ref-type="bibr">Raab,
    2015a</xref>). So administrators are forced to start applications to
    see if the configuration file is rejected.</p>
    <p>We propose to move the validation from the applications to
    Elektra’s specification language
    (<xref alt="Raab, 2016a" rid="ref-raab2016improving" ref-type="bibr">Raab,
    2016a</xref>). Then every modification of the configuration files
    via Elektra gets automatically validated. This can be via an editor,
    a graphical user interface, or a web interface.</p>
    <p>Furthermore, based on the specification language, we can generate
    valid and invalid configuration files. Such configuration files can
    be used to test the behavior of applications, e.g., injecting faulty
    configuration files to see if applications crash.</p>
  </sec>
  <sec id="code-generator">
    <title>Code Generator</title>
    <p>Applications today often have hand-written glue code to transform
    the strings received from configuration files to the variables used
    in the application. In Elektra a code generator
    (<xref alt="Raab, 2015a" rid="ref-raab2015safe" ref-type="bibr">Raab,
    2015a</xref>) allows us to generate this code. Based on the
    configuration specification, Elektra provides methods with type-safe
    access to configuration values.</p>
    <p>This simplifies writing new applications
    (<xref alt="Raab &amp; Puntigam, 2014" rid="ref-raab2014program" ref-type="bibr">Raab
    &amp; Puntigam, 2014</xref>) because we can also generate
    documentation and code to parse command-line options. But this
    technique can also be used to replace existing hand-written
    code.</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-elektra">
      <element-citation publication-type="webpage">
        <person-group person-group-type="author">
          <name><surname>Raab</surname><given-names>Markus</given-names></name>
        </person-group>
        <article-title>Elektra</article-title>
        <year iso-8601-date="2016">2016</year>
        <date-in-citation content-type="access-date"><year iso-8601-date="2016-07-23">2016</year><month>07</month><day>23</day></date-in-citation>
        <uri>http://www.libelektra.org</uri>
      </element-citation>
    </ref>
    <ref id="ref-raab2010thesis">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Raab</surname><given-names>Markus</given-names></name>
        </person-group>
        <article-title>A modular approach to configuration storage</article-title>
        <source>Master’s thesis, Vienna University of Technology</source>
        <year iso-8601-date="2010">2010</year>
      </element-citation>
    </ref>
    <ref id="ref-raab2014program">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Raab</surname><given-names>Markus</given-names></name>
          <name><surname>Puntigam</surname><given-names>Franz</given-names></name>
        </person-group>
        <article-title>Program execution environments as contextual values</article-title>
        <source>Proceedings of 6th international workshop on context-oriented programming</source>
        <publisher-name>ACM</publisher-name>
        <publisher-loc>NY, USA</publisher-loc>
        <year iso-8601-date="2014">2014</year>
        <isbn>978-1-4503-2861-6</isbn>
        <uri>http://dx.doi.org/10.1145/2637066.2637074</uri>
      </element-citation>
    </ref>
    <ref id="ref-raab2015safe">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Raab</surname><given-names>Markus</given-names></name>
        </person-group>
        <article-title>Safe management of software configuration</article-title>
        <source>Proceedings of the CAiSE’2015 doctoral consortium</source>
        <publisher-name>http://ceur-ws.org/Vol-1415/</publisher-name>
        <publisher-loc>urn:nbn:de:0074-1415-4</publisher-loc>
        <year iso-8601-date="2015">2015</year>
        <uri>http://ceur-ws.org/Vol-1415/CAISE2015DC09.pdf</uri>
      </element-citation>
    </ref>
    <ref id="ref-raab2015kps">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Raab</surname><given-names>Markus</given-names></name>
        </person-group>
        <article-title>Sharing software configuration via specified links and transformation rules</article-title>
        <source>Technical report from KPS 2015</source>
        <publisher-name>Vienna University of Technology, Complang Group</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <volume>18</volume>
      </element-citation>
    </ref>
    <ref id="ref-raab2016improving">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Raab</surname><given-names>Markus</given-names></name>
        </person-group>
        <article-title>Improving system integration using a modular configuration specification language</article-title>
        <source>Companion proceedings of the 15th international conference on modularity</source>
        <publisher-name>ACM</publisher-name>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <year iso-8601-date="2016">2016</year>
        <isbn>978-1-4503-4033-5</isbn>
        <uri>http://doi.acm.org/10.1145/2892664.2892691</uri>
        <pub-id pub-id-type="doi">10.1145/2892664.2892691</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-raab2016unanticipated">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Raab</surname><given-names>Markus</given-names></name>
        </person-group>
        <article-title>Unanticipated context awareness for software configuration access using the getenv API</article-title>
        <source>Computer and information science</source>
        <person-group person-group-type="editor">
          <name><surname>Lee</surname><given-names>Roger</given-names></name>
        </person-group>
        <publisher-name>Springer International Publishing</publisher-name>
        <publisher-loc>Cham</publisher-loc>
        <year iso-8601-date="2016">2016</year>
        <isbn>978-3-319-40171-3</isbn>
        <uri>http://dx.doi.org/10.1007/978-3-319-40171-3_4</uri>
        <pub-id pub-id-type="doi">10.1007/978-3-319-40171-3_4</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

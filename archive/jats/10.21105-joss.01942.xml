<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1942</article-id>
<article-id pub-id-type="doi">10.21105/joss.01942</article-id>
<title-group>
<article-title>The DynaGUI package</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-6650-5365</contrib-id>
<string-name>Benjamin Edward Bolling</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>European Spallation Source ERIC</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>MAX IV Laboratory</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-11-01">
<day>1</day>
<month>11</month>
<year>2019</year>
</pub-date>
<volume>5</volume>
<issue>56</issue>
<fpage>1942</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>particle accelerator</kwd>
<kwd>physics</kwd>
<kwd>control system</kwd>
<kwd>dynamic</kwd>
<kwd>graphical user interface</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>At large research facilities and industrial complexes, there is a
  need for control system user interfaces. However, modern facilities
  also require continuous upgrading, maintenance, and development, which
  means that also the control systems need to be upgraded. In order to
  simplify the construction of control systems and diagnostics, the
  DynaGUI (Dynamic Graphical User Interface) package was created. The
  main idea of this package is to get rid of the middle-hand coding
  needed between hardware and the user by supplying the user with a
  simple GUI toolkit for generating diagnostics- and control-system GUIs
  in accordance with any user’s need. Initially developed at MAX IV
  Laboratory
  (<xref alt="Tavares et al., 2014" rid="ref-MAXIVproj" ref-type="bibr">Tavares
  et al., 2014</xref>), the initial and main users for this package are
  control rooms at large-scale research facilities, such as particle
  accelerators.</p>
  <p>In order to further enhance the user-friendliness of this package,
  a simple system of configuration files has been developed, enabling
  users to configure the applications using any plain text-editor. The
  DynaGUI package consists of three applications:</p>
  <list list-type="bullet">
    <list-item>
      <p>DynaGUI TF, a true/false (boolean) dynamic control system,</p>
    </list-item>
    <list-item>
      <p>DynaGUI Alarms, a dynamic diagnostics system for continuously
      monitoring of the values for a set of attributes, and</p>
    </list-item>
    <list-item>
      <p>DynaGUI NV, a system for observing attributes’ numerical-,
      string-, vector- or waveform values.</p>
    </list-item>
  </list>
  <p>Each DynaGUI application’s layout is designed for simplicity. At
  the top of each application is a combobox with the list of attributes
  defined. Below the combobox is a button called ‘Edit DynaGUI’, which
  opens a window for configuring the DynaGUI. Below the ‘Edit DynaGUI’
  button is the dynamic field, in which a dynamic control panel is
  generated. Below the dynamic control panel field is the DynaGUI status
  bar, showing the last action carried out, error messages, or if an
  alarm is active (for DynaGUI Alarms). Below the status bar are the
  load and save buttons for loading or saving DynaGUI configuration
  files. These also have a tool-tip function showing the last loaded or
  saved file (in the current session). The simplest method to launch
  DynaGUI is via its launcher (Launcher.py), in which the user can
  select a control system and either directly define the path to the
  configuration file or browse to it. If the field is left blank,
  DynaGUI will load with a predefined setup.</p>
  <p>DynaGUI TF (True/False) is dynamical in the sense that the user can
  insert the name of any device’s servers and attributes that, in
  current state, are True or False. The GUI then builds itself up by
  creating buttons for each device server that will display the boolean
  of the device in the combobox selected attribute. First, the
  application will try to connect to the device’s server as entered, and
  then read in the attribute selected in the combobox and paint the
  button’s background colour: green meaning True, red meaning False,
  fuchsia meaning attribute not existing or not boolean, and maroon
  meaning that the device cannot be connected.</p>
  <p>The DynaGUI Alarms (Dynamic Alarms GUI) has been designed to
  monitor numerical values and notify user(s) if a condition is not
  fulfilled. To edit the alarms GUI, the user has to press Edit DynaGUI
  to open an edit-panel. In the left window of the edit-panel, the user
  has to define the list of devices’ server domains and signals to
  monitor. In the right window of the edit-panel, the user has to define
  descriptions of the different alarm signals as they should appear in
  the DynaGUI Alarms control panel, as well as the sweep-time (how
  frequently the system should check the values). The DynaGUI Alarms’
  dynamic panel can be divided into three columns for each device and
  attribute it monitors. The first column contains the descriptions of
  the alarms, the second column contains the numerical values from the
  last sweep, the fourth column contains the alarm limit, and the third
  column contains a combobox with two gaps (larger than or smaller than)
  which points in the way it should between the read value and the alarm
  limit. For gap criteria that are fulfilled, the background colour of
  the alarm description is painted lime-green. If a gap criteria is not
  fulfilled, the computer’s speakers will emit an alarm, and the display
  will show a message in the DynaGUI Alarms’ status bar. The alarm
  description’s background colour becomes red.</p>
  <p>DynaGUI NV is the most advanced tool in the package. Each device
  has two columns. The first column is a button with the server address
  of the device, whilst the value of the selected attribute is shown in
  the second column, enabling users to inspect values in a simple and
  fast manner. DynaGUI NV also allows for launching a controller for the
  device (using AtkPanel for Tango Controls
  (<xref alt="Chaize et al., 1999" rid="ref-TangoCS" ref-type="bibr">Chaize
  et al., 1999</xref>)) or for initializing 1D plots or 2D colormaps of
  the selected attribute for all devices for which the attribute is
  valid. Each device’s control panel button becomes painted in
  lime-green if the attribute is valid, in fuchsia if the attribute is
  not existing for the device and maroon if a connection to the device
  cannot be established. The plot initialization automatically launches
  for all devices for which the attribute is valid. The plotting tool
  has been elaborately described in the DynaGUI documentation. Features
  in the 1D graph tool include plotting read values in real time, and
  setting up and plotting equations (or functions) by using NumPy
  (<xref alt="van der Walt et al., 2011" rid="ref-numpy" ref-type="bibr">van
  der Walt et al., 2011</xref>) of the read values as well as combining
  the read values with one another. Examples are shown in Figure 1. The
  1D graph tool supports both scalar and vector (or waveform) plotting
  in real time, and plot data can be saved and loaded.</p>
  <p>The package aims to enable users to construct dynamic GUIs for
  multiple purposes, and the author is open to implementing new
  functions and control systems on demand. For testing purposes, an
  artificial control system ‘Randomizer’ has been created displaying
  only random values. In this DynaGUI version, the DynaGUI panels are
  constructed using PyQt
  (<xref alt="Riverbank Computing Limited, 2016" rid="ref-PyQtReference" ref-type="bibr">Riverbank
  Computing Limited, 2016</xref>), with versions 4 and 5 supported. The
  author is working on fully implementing the PyEPICS
  (<xref alt="PyEpics, 2014" rid="ref-pyepicsReference" ref-type="bibr"><italic>PyEpics</italic>,
  2014</xref>) package as well as a new Finance package built on Pandas
  (<xref alt="McKinney, 2011" rid="ref-pandasReference" ref-type="bibr">McKinney,
  2011</xref>) and Matplotlib
  (<xref alt="Hunter, 2007" rid="ref-matplotlib" ref-type="bibr">Hunter,
  2007</xref>) in order to have more sources to monitor live-stream data
  from and hence to demonstrate the openness that serves as the core of
  the package.</p>
</sec>
<sec id="figures">
  <title>Figures</title>
  <fig>
    <caption><p>A dynamic control panel of DynaGUI NV has been
    configured (top-left), from which a 1D realtime plot has been
    launched for 4 artificial devices for a made-up attribute (right).
    Using this tool, two other lines have been set up as functions of
    two input data streams, with equations defined in the bottom-left
    figure and then plotted.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="figureNV.png" xlink:title="" />
  </fig>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The author wants to thank Bernhard Meirose at the MAX IV Laboratory
  for the discussion that inspired and led me into developing this
  package. The author also recognises and wants to thank Jonas Petersson
  and Robin Svard at the MAX IV Laboratory for developing the original
  2D Spectrogram Application (for monitoring transverse beam position
  via Beam Position Monitors at the MAX IV Laboratory storage rings).
  The author also wants to thank Bernhard Meirose at the MAX IV
  Laboratory for giving the inspiration and awakening the idea to create
  this package.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-MAXIVproj">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Tavares</surname><given-names>P. F.</given-names></name>
          <name><surname>Leemann</surname><given-names>S. C.</given-names></name>
          <name><surname>Sjostrom</surname><given-names>M.</given-names></name>
          <name><surname>Andersson</surname><given-names>A.</given-names></name>
        </person-group>
        <article-title>The MAX IV storage ring project</article-title>
        <source>Journal of Synchrotron Radiation</source>
        <year iso-8601-date="2014-10">2014</year><month>10</month>
        <volume>21</volume>
        <pub-id pub-id-type="doi">10.1107/S1600577514011503</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-TangoCS">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Chaize</surname><given-names>J. M.</given-names></name>
          <name><surname>Gotz</surname><given-names>A.</given-names></name>
          <name><surname>Klotz</surname><given-names>W-D.</given-names></name>
          <name><surname>Meyer</surname><given-names>J.</given-names></name>
          <name><surname>Perez</surname><given-names>M.</given-names></name>
          <name><surname>Taurel</surname><given-names>E.</given-names></name>
        </person-group>
        <article-title>TANGO - an object oriented control system based on CORBA</article-title>
        <source>ICALEPCS’99</source>
        <year iso-8601-date="1999">1999</year>
      </element-citation>
    </ref>
    <ref id="ref-PyQtReference">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>Riverbank Computing Limited</string-name>
        </person-group>
        <article-title>PyQt5: Python bindings for the Qt cross platform UI and application toolkit</article-title>
        <year iso-8601-date="2016">2016</year>
        <uri>https://www.riverbankcomputing.com/software/pyqt/</uri>
      </element-citation>
    </ref>
    <ref id="ref-pyepicsReference">
      <element-citation>
        <article-title>PyEpics: Interface for the Channel Access (CA) library of the EPICS Control System to the Python Programming language</article-title>
        <year iso-8601-date="2014">2014</year>
        <uri>https://cars9.uchicago.edu/software/python/pyepics3/</uri>
      </element-citation>
    </ref>
    <ref id="ref-pandasReference">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>McKinney</surname><given-names>W.</given-names></name>
        </person-group>
        <article-title>Pandas: A foundational python library for data analysis and statistics</article-title>
        <source>Python for High Performance and Scientific Computing</source>
        <year iso-8601-date="2011">2011</year>
        <volume>14</volume>
      </element-citation>
    </ref>
    <ref id="ref-numpy">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>van der Walt</surname><given-names>S.</given-names></name>
          <name><surname>Colbert</surname><given-names>S. C.</given-names></name>
          <name><surname>Varoquaux</surname><given-names>G.</given-names></name>
        </person-group>
        <article-title>The NumPy array: A structure for efficient numerical computation</article-title>
        <source>Computing in Science Engineering</source>
        <year iso-8601-date="2011">2011</year>
        <volume>13</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1109/MCSE.2011.37</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-matplotlib">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>J. D.</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D graphics environment</article-title>
        <source>Computing in Science &amp; Engineering</source>
        <publisher-name>IEEE COMPUTER SOC</publisher-name>
        <year iso-8601-date="2007">2007</year>
        <volume>9</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

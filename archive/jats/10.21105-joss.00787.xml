<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">787</article-id>
<article-id pub-id-type="doi">10.21105/joss.00787</article-id>
<title-group>
<article-title>rowan: A Python package for working with
quaternions</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5181-9532</contrib-id>
<string-name>Vyas Ramasubramani</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7197-0085</contrib-id>
<string-name>Sharon C. Glotzer</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Chemical Engineering, University of
Michigan</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Materials Science and Engineering, University
of Michigan</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Biointerfaces Institute, University of
Michigan</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2018-05-04">
<day>4</day>
<month>5</month>
<year>2018</year>
</pub-date>
<volume>3</volume>
<issue>27</issue>
<fpage>787</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>physics</kwd>
<kwd>graphics</kwd>
<kwd>rotation</kwd>
<kwd>orientation</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Numerous fields in science and engineering require methods for
  rotating objects. Quaternions are perhaps the most popular formalism
  for representing spatial rotations due to their natural
  parameterization of the space of rotations
  <inline-formula><alternatives>
  <tex-math><![CDATA[SO(3)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>S</mml:mi><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  and the relative efficiency of computing quaternion-based rotation
  operations. A simple, uniform, and efficient implementation of
  quaternion operations is therefore critical to developing code to
  solve domain-specific problems in areas such as particle simulation
  and attitude determination. Python implementations of quaternion
  operations do exist, but they suffer from various drawbacks. Some
  tools are performance limited due to, <italic>e.g.</italic>, having
  limited or no support for NumPy style array broadcasting Brett &amp;
  Gohlke
  (<xref alt="2009" rid="ref-transforms3d" ref-type="bibr">2009</xref>).
  Since NumPy is a <italic>de facto</italic> standard in scientific
  computing applications, such support is both a prerequisite for a
  package to be easily incorporated into existing code bases and a
  Pythonic way to achieve a performant solution. Other packages that do
  support NumPy may have complex dependencies for accessing their full
  features or require conversion into some internal format, making them
  cumbersome to incorporate into existing code bases that need to
  operate on raw arrays
  (<xref alt="Boyle, 2017" rid="ref-npquat" ref-type="bibr">Boyle,
  2017</xref>).</p>
  <p>The <monospace>rowan</monospace> package, named for William Rowan
  Hamilton, is a quaternion package that addresses these issues. By
  operating directly on NumPy arrays and offering first-class support
  for broadcasting for all modules and functions in the package,
  <monospace>rowan</monospace> ensures high efficiency for operating on
  the large arrays common in computer graphics or scientific
  applications. We quantify performance in Figure 1 by comparison to
  <monospace>pyquaternion</monospace>
  (<xref alt="Wynn, 2015" rid="ref-pyquat" ref-type="bibr">Wynn,
  2015</xref>) and <monospace>numpy-quaternion</monospace>
  (<xref alt="Boyle, 2017" rid="ref-npquat" ref-type="bibr">Boyle,
  2017</xref>), two well-known alternatives to
  <monospace>rowan</monospace>. For small arrays, the performance
  benefits of <monospace>numpy-quaternion</monospace> and
  <monospace>rowan</monospace> are somewhat muted since the Python
  function calls dominate the total run time. In fact, at this scale
  <monospace>rowan</monospace> performs quite similarly to
  <monospace>pyquaternion</monospace>, which is a pure Python solution,
  while <monospace>numpy-quaternion</monospace>, a hybrid Python-C
  solution, performs faster than both. For large arrays
  (<italic>e.g.</italic> <inline-formula><alternatives>
  <tex-math><![CDATA[N > 10000]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>N</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>10000</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>)
  where performance limitations become significant, however,
  <monospace>rowan</monospace> outstrips
  <monospace>pyquaternion</monospace> by roughly two orders of magnitude
  and approaches the performance of
  <monospace>numpy-quaternion</monospace>. Although a typical function
  call with <monospace>rowan</monospace> is, on average, roughly 4 times
  slower than <monospace>numpy-quaternion</monospace>, this performance
  difference is offset by <monospace>rowan</monospace>â€™s relative ease
  of installation and incorporation. The package avoids any hard
  dependencies other than NumPy itself and directly uses NumPy arrays,
  making <monospace>rowan</monospace> an unobtrusive dependency with
  essentially zero barrier for introduction into existing code
  bases.</p>
  <fig>
    <caption><p>Performance Comparison</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="Performance.pdf" xlink:title="" />
  </fig>
  <p>A full-featured quaternion library, <monospace>rowan</monospace>
  has extensive capabilities in addition to basic quaternion arithmetic
  operations. These functions include: methods for point set
  registration, including some that are specialized for solving the
  Procrustes problem of superimposing corresponding sets of points;
  functions for quaternion calculus and interpolation; the ability to
  sample random rotation quaternions from <inline-formula><alternatives>
  <tex-math><![CDATA[SO(3)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>S</mml:mi><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>;
  and functions to compute various distance metrics on the quaternion
  manifold. For applications focused on rotations,
  <monospace>rowan</monospace> provides the ability to convert between
  numerous common rotation formalisms, including full support for all
  Euler angle conventions, which is not found in other Python quaternion
  packages.</p>
  <p>This package arose due to the need to represent anisotropic
  particle orientations in Monte Carlo simulations in the Glotzer Group
  at the University of Michigan. Unlike configurations of spherical
  particles, which are entirely described by their positions alone,
  configurations of anisotropic particles also contain information on
  particle orientations that change over the course of the simulation.
  Our simulation software HOOMD-blue Glaser et al.
  (<xref alt="2015" rid="ref-Glaser2015f" ref-type="bibr">2015</xref>)
  uses quaternions to represent particle orientations, as do many of the
  packages we write for analyzing these simulations. Although some
  packages require C++ implementations, a large number are pure Python
  code bases that each originally contained their own independent
  implementation of quaternion operations with slightly different
  features and levels of generality. The resulting code fragmentation
  made code maintenance much more challenging and failed to provide a
  standard implementation of quaternion operations for more ad hoc
  analysis tasks. <monospace>rowan</monospace> addressed these needs by
  providing a unified, high-performance, and easily utilized solution.
  The package was incorporated into the open-source plato
  (<xref alt="Spellings, 2018" rid="ref-plato" ref-type="bibr">Spellings,
  2018</xref>) simulation visualization tool as well as some internal
  packages that have not yet been open-sourced. Going forward,
  <monospace>rowan</monospace> will not only simplify the maintenance of
  our existing code bases, it will also facilitate future code
  development involving quaternion operations both within and outside
  our group.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>This work was partially supported by a Simons Investigator award
  from the Simons Foundation to Sharon Glotzer. We would like to
  acknowledge Bradley D. Dice, Carl S. Adorf, and Matthew P. Spellings
  for helpful suggestions and discussions during the development of this
  package.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-pyquat">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Wynn</surname><given-names>Kieran</given-names></name>
        </person-group>
        <article-title>Pyquaternion</article-title>
        <year iso-8601-date="2015">2015</year>
        <uri>https://github.com/KieranWynn/pyquaternion</uri>
      </element-citation>
    </ref>
    <ref id="ref-transforms3d">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Brett</surname><given-names>Matthew</given-names></name>
          <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
        </person-group>
        <article-title>transforms3d</article-title>
        <year iso-8601-date="2009">2009</year>
        <uri>https://github.com/matthew-brett/transforms3d</uri>
      </element-citation>
    </ref>
    <ref id="ref-npquat">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Boyle</surname><given-names>Michael</given-names></name>
        </person-group>
        <article-title>Numpy-quaternion</article-title>
        <year iso-8601-date="2017">2017</year>
        <uri>https://github.com/moble/quaternion</uri>
      </element-citation>
    </ref>
    <ref id="ref-plato">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Spellings</surname><given-names>Matthew</given-names></name>
        </person-group>
        <article-title>Plato</article-title>
        <year iso-8601-date="2018">2018</year>
        <uri>https://bitbucket.org/glotzer/plato</uri>
      </element-citation>
    </ref>
    <ref id="ref-Anderson2008c">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Anderson</surname><given-names>Joshua A.</given-names></name>
          <name><surname>Lorenz</surname><given-names>Chris D.</given-names></name>
          <name><surname>Travesset</surname><given-names>A.</given-names></name>
        </person-group>
        <article-title>General purpose molecular dynamics simulations fully implemented on graphics processing units</article-title>
        <source>Journal of Computational Physics</source>
        <publisher-name>Academic Press</publisher-name>
        <year iso-8601-date="2008-05">2008</year><month>05</month>
        <volume>227</volume>
        <issue>10</issue>
        <isbn>0021-9991</isbn>
        <issn>00219991</issn>
        <uri>https://www.sciencedirect.com/science/article/pii/S0021999108000818?via{\%}3Dihub</uri>
        <pub-id pub-id-type="doi">10.1016/j.jcp.2008.01.047</pub-id>
        <pub-id pub-id-type="pmid">255447000027</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Glaser2015f">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Glaser</surname><given-names>Jens</given-names></name>
          <name><surname>Nguyen</surname><given-names>Trung Dac</given-names></name>
          <name><surname>Anderson</surname><given-names>Joshua A.</given-names></name>
          <name><surname>Lui</surname><given-names>Pak</given-names></name>
          <name><surname>Spiga</surname><given-names>Filippo</given-names></name>
          <name><surname>Millan</surname><given-names>Jaime A.</given-names></name>
          <name><surname>Morse</surname><given-names>David C.</given-names></name>
          <name><surname>Glotzer</surname><given-names>Sharon C.</given-names></name>
        </person-group>
        <article-title>Strong scaling of general-purpose molecular dynamics simulations on GPUs</article-title>
        <source>Computer Physics Communications</source>
        <publisher-name>North-Holland</publisher-name>
        <year iso-8601-date="2015-07">2015</year><month>07</month>
        <volume>192</volume>
        <issn>00104655</issn>
        <uri>https://www.sciencedirect.com/science/article/pii/S0010465515000867?via{\%}3Dihub</uri>
        <pub-id pub-id-type="doi">10.1016/j.cpc.2015.02.028</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

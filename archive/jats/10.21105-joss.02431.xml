<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2431</article-id>
<article-id pub-id-type="doi">10.21105/joss.02431</article-id>
<title-group>
<article-title>pyomeca: An Open-Source Framework for Biomechanical
Analysis</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9681-9448</contrib-id>
<string-name>Romain Martinez</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5031-1048</contrib-id>
<string-name>Benjamin Michaud</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4107-9160</contrib-id>
<string-name>Mickael Begon</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>School of Kinesiology and Exercise Science, Faculty of
Medicine, University of Montreal, Canada</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-06-02">
<day>2</day>
<month>6</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>53</issue>
<fpage>2431</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>python</kwd>
<kwd>biomechanics</kwd>
<kwd>electromyography</kwd>
<kwd>kinematics</kwd>
<kwd>dynamics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>Biomechanics is defined as the study of the structure and function
  of biological systems by means of the methods of mechanics
  (<xref alt="Hatze, 1974" rid="ref-Hatze1974-zc" ref-type="bibr">Hatze,
  1974</xref>). While musculoskeletal biomechanics branches into several
  subfields, the data used are remarkably similar. The processing,
  analysis and visualization of these data could therefore be unified in
  a software package. Most biomechanical data characterizing human and
  animal movement appear as temporal waveforms representing specific
  measures such as muscle activity or joint angles. These data are
  typically multidimensional arrays structured around labels with
  arbitrary metadata
  (<xref alt="Figure 1" rid="figU003Abiomech-data">Figure 1</xref>).
  Existing software solutions share some limitations. Some of them are
  proprietary
  (<xref alt="Damsgaard et al., 2006" rid="ref-Damsgaard2006-gq" ref-type="bibr">Damsgaard
  et al., 2006</xref>) or based on closed-source programming language
  (<xref alt="Dixon et al., 2017" rid="ref-Dixon2017-co" ref-type="bibr">Dixon
  et al., 2017</xref>;
  <xref alt="Muller et al., 2019" rid="ref-Muller2019-cx" ref-type="bibr">Muller
  et al., 2019</xref>). Others do not leverage labels and metadata
  (<xref alt="Hachaj &amp; Ogiela, 2019" rid="ref-Hachaj2019-tk" ref-type="bibr">Hachaj
  &amp; Ogiela, 2019</xref>;
  <xref alt="Virtanen et al., 2020" rid="ref-Virtanen2020-zv" ref-type="bibr">Virtanen
  et al., 2020</xref>;
  <xref alt="Walt et al., 2011" rid="ref-Walt2011-em" ref-type="bibr">Walt
  et al., 2011</xref>). <monospace>pyomeca</monospace> is a Python
  package designed to address these limitations. It provides basic
  operations useful in the daily workflow of a biomechanical researcher
  such as reading, writing, filtering and plotting, but also more
  advanced biomechanical routines geared towards rigid body mechanics
  and signal processing. By offering a single, efficient and flexible
  implementation, <monospace>pyomeca</monospace> standardizes these
  procedures, freeing up valuable research time, thereby allowing
  researchers to focus on the scientific research questions at hand.</p>
  <fig>
    <caption><p>An example of musculoskeletal biomechanical data with
    skin marker positions. These data are inherently multidimensional
    and structured around labels. Metadata are also needed to inform
    about important features of the
    experiment.<styled-content id="figU003Abiomech-data"></styled-content></p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig/biomech-data.pdf" xlink:title="" />
  </fig>
</sec>
<sec id="summary">
  <title>Summary</title>
  <p>As a Python library, <monospace>pyomeca</monospace> enables
  extraction, processing and visualization of biomechanical data for use
  in research and education. It is motivated by the need for simpler
  tools and more reproducible workflows allowing practitioners to focus
  on their specific interests and leaving <monospace>pyomeca</monospace>
  to handle the computational details for them.
  <monospace>pyomeca</monospace> builds on the core scientific Python
  packages, in particular <monospace>numpy</monospace>
  (<xref alt="Walt et al., 2011" rid="ref-Walt2011-em" ref-type="bibr">Walt
  et al., 2011</xref>), <monospace>scipy</monospace>
  (<xref alt="Virtanen et al., 2020" rid="ref-Virtanen2020-zv" ref-type="bibr">Virtanen
  et al., 2020</xref>), <monospace>matplotlib</monospace>
  (<xref alt="Hunter, 2007" rid="ref-Hunter2007-fv" ref-type="bibr">Hunter,
  2007</xref>) and <monospace>xarray</monospace>
  (<xref alt="Hoyer &amp; Hamman, 2017" rid="ref-Hoyer2017-sf" ref-type="bibr">Hoyer
  &amp; Hamman, 2017</xref>). By providing labeled querying and
  computation, efficient algorithms and persistent metadata, the
  integration of <monospace>xarray</monospace> facilitates usability,
  which seems to be relevant in a context where scientists do not always
  receive extensive training in programming.
  <monospace>xarray</monospace> is designed as a general-purpose library
  and tries to avoid including domain specific functionalities — but
  inevitably, the need for more domain specific logic arises.
  <monospace>pyomeca</monospace> provides a biomechanics layer that
  supports specialized file formats (<monospace>c3d</monospace>,
  <monospace>mat</monospace>, <monospace>trc</monospace>,
  <monospace>sto</monospace>, <monospace>mot</monospace>,
  <monospace>csv</monospace> and <monospace>xlsx</monospace>) and
  implements signal processing and matrix manipulation routines commonly
  used in musculoskeletal biomechanics. We believe
  <monospace>pyomeca</monospace> is a solid foundation for more advanced
  research implementations and could, in the future, provide functions
  for processing and extracting meaningful clinical outputs from the raw
  data. <monospace>pyomeca</monospace> was written with the Unix
  philosophy in mind, that is to design each program to do one thing
  well and expect the output of every program to become the input to
  another, as yet unknown, program. As such, it is written in a modular,
  object-oriented way — which makes it extensible and easy to develop —
  and it interacts well with other projects under the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pyomeca"><monospace>pyomeca umbrella</monospace></ext-link>,
  namely
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pyomeca/ezc3d"><monospace>ezc3d</monospace></ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pyomeca/pyosim"><monospace>pyosim</monospace></ext-link>
  or
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pyomeca/biorbd-viz"><monospace>biorbd-viz</monospace></ext-link>.
  <monospace>pyomeca</monospace> follows software best practices by
  being fully tested, linted and type annotated — ensuring that the
  package is easily distributable and modifiable. In addition to the
  <ext-link ext-link-type="uri" xlink:href="https://pyomeca.github.io/">static
  documentation and API reference</ext-link>,
  <monospace>pyomeca</monospace> includes a set of Jupyter Notebooks
  with examples. These notebooks can be read and executed by anyone with
  only a web browser through
  <ext-link ext-link-type="uri" xlink:href="https://mybinder.org/">binder</ext-link>.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <p><monospace>pyomeca</monospace> inherits from the
  <monospace>xarray</monospace> feature set, which includes label-based
  indexing, arithmetic, aggregation and alignment, resampling and
  rolling window operations, plotting, missing data handling and
  out-of-core computation. In addition, <monospace>pyomeca</monospace>
  has four data structures built upon <monospace>xarray</monospace>.
  Each structure is associated with a specific biomechanical data
  type:</p>
  <list list-type="bullet">
    <list-item>
      <p><monospace>Angles</monospace>: joint angles,</p>
    </list-item>
    <list-item>
      <p><monospace>Rototrans</monospace>: rototranslation matrix,</p>
    </list-item>
    <list-item>
      <p><monospace>Analogs</monospace>: generic signals such as
      electromyographic (EMG) and force signals or any other analog
      signals,</p>
    </list-item>
    <list-item>
      <p><monospace>Markers</monospace>: skin markers positions.</p>
    </list-item>
  </list>
  <p>While there are technically dozens of functions implemented in
  <monospace>pyomeca</monospace>, one can generally group them into two
  distinct categories: object creation and data processing.</p>
  <sec id="object-creation">
    <title>Object Creation</title>
    <p>The starting point for working with
    <monospace>pyomeca</monospace> is to create an object with one of
    the specific methods associated with the different classes
    available. <monospace>pyomeca</monospace> offers several ways to
    create these objects: by directly specifying the data, by sampling
    random data from distributions, by converting other data structures
    or by reading files
    (<xref alt="Figure 2" rid="figU003Aobject-creation">Figure 2</xref>).</p>
    <fig>
      <caption><p><monospace>pyomeca</monospace> offers several ways to
      create specialized data structures: from scratch (orange), from
      random data (red), from other data structures (blue) or from files
      (green).<styled-content id="figU003Aobject-creation"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig/object-creation.pdf" xlink:title="" />
    </fig>
  </sec>
  <sec id="data-processing">
    <title>Data Processing</title>
    <p><monospace>pyomeca</monospace>’s main functionality is to offer
    dedicated biomechanical routines. These features can be broadly
    grouped into different categories: filtering, signal processing,
    normalization, matrix manipulation and file output functions
    (<xref alt="Figure 3" rid="figU003Adata-processing">Figure 3</xref>).</p>
    <fig>
      <caption><p><monospace>pyomeca</monospace> data processing
      capabilities are available through the <monospace>meca</monospace>
      <monospace>DataArrayAccessor</monospace>
      (e.g. <monospace>array.meca</monospace>) that allow implementing
      domain specific methods on <monospace>xarray</monospace> data
      objects. These methods can be categorized into filters (orange),
      signal processing (red), normalization (blue), matrix manipulation
      (green) and file output (purple)
      routines.<styled-content id="figU003Adata-processing"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig/data-processing.pdf" xlink:title="" />
    </fig>
  </sec>
  <sec id="a-biomechanical-example-electromyographic-pipeline">
    <title>A Biomechanical Example: Electromyographic Pipeline</title>
    <p><monospace>pyomeca</monospace> has documented examples for
    different biomechanical tasks such as getting Euler angles from a
    rototranslation matrix, creating a system of axes from skin markers
    positions or setting a rotation or a translation. Another typical
    task concerns EMG data processing. Using
    <monospace>pyomeca</monospace>, one can easily extract
    (<xref alt="Figure 4" rid="figU003Aex-1-raw">Figure 4</xref>),
    process
    (<xref alt="Figure 5" rid="figU003Aex-2-processed">Figure 5</xref>)
    and visualize
    (<xref alt="Figure 6" rid="figU003Aex-3-aggr">Figure 6</xref>,
    <xref alt="Figure 7" rid="figU003Aex-4-box">Figure 7</xref> and
    <xref alt="Figure 8" rid="figU003Aex-5-corr">Figure 8</xref>) such
    data.</p>
    <code language="python">from pyomeca import Analogs

emg = Analogs.from_c3d(&quot;data.c3d&quot;)
emg.plot(x=&quot;time&quot;, hue=&quot;channel&quot;)</code>
    <fig>
      <caption><p>Biomechanical data are often stored in the
      <monospace>c3d</monospace> binary file format. Thanks to the
      <monospace>ezc3d</monospace> library
      (<xref alt="Michaud &amp; Begon, 2020" rid="ref-ezc3d" ref-type="bibr">Michaud
      &amp; Begon, 2020</xref>), <monospace>pyomeca</monospace> can
      easily read these files and visualize them with the
      <monospace>matplotlib</monospace> interface provided by
      <monospace>xarray</monospace>.
      <styled-content id="figU003Aex-1-raw"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig/ex-1-raw.pdf" xlink:title="" />
    </fig>
    <code language="python">emg_processed = (
    emg.meca.band_pass(order=2, cutoff=[10, 425])
    .meca.center()
    .meca.abs()
    .meca.low_pass(order=4, cutoff=5)
    .meca.normalize()
)
emg_processed.plot(x=&quot;time&quot;, col=&quot;channel&quot;, col_wrap=3)</code>
    <fig>
      <caption><p>EMG data analysis consists of a series of signal
      processing steps that can be carried out by
      <monospace>pyomeca</monospace> in a clear and modular
      way.<styled-content id="figU003Aex-2-processed"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig/ex-2-processed.pdf" xlink:title="" />
    </fig>
    <code language="python">import matplotlib.pyplot as plt

_, axes = plt.subplots(ncols=2)

emg_processed.mean(&quot;channel&quot;).plot(ax=axes[0])
emg_processed.plot.hist(ax=axes[1], bins=50)</code>
    <fig>
      <caption><p>It is straightforward to represent the average profile
      of the EMG signal (left) or the distribution of EMG activations
      (right) thanks to
      <monospace>xarray</monospace>.<styled-content id="figU003Aex-3-aggr"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig/ex-3-aggr.pdf" xlink:title="" />
    </fig>
    <code language="python">emg_dataframe = emg_processed.meca.to_wide_dataframe()
emg_dataframe.plot.box(showfliers=False)</code>
    <fig>
      <caption><p><monospace>pyomeca</monospace> offers a method to
      convert the data structure into a <monospace>pandas</monospace>
      dataframe
      (<xref alt="McKinney, 2010" rid="ref-McKinney2010-lm" ref-type="bibr">McKinney,
      2010</xref>). This allows users to further extend the plot
      possibilities using the visualization built into
      <monospace>pandas</monospace> itself, such as
      boxplot.<styled-content id="figU003Aex-4-box"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig/ex-4-box.pdf" xlink:title="" />
    </fig>
    <code language="python">emg_dataframe.corr().style.background_gradient().set_precision(2)</code>
    <fig>
      <caption><p>By using a <monospace>pandas</monospace> dataframe,
      users also benefit from its broad range of IO tools and
      statistical methods, such as computing the correlation matrix
      between the different
      muscles.<styled-content id="figU003Aex-5-corr"></styled-content></p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="fig/ex-5-corr.pdf" xlink:title="" />
    </fig>
  </sec>
</sec>
<sec id="research-projects-using-pyomeca">
  <title>Research Projects Using <monospace>pyomeca</monospace></title>
  <p>You can find an
  <ext-link ext-link-type="uri" xlink:href="https://pyomeca.github.io/about/#papers-citing-pyomeca">up-to-date
  list of research projects using
  <monospace>pyomeca</monospace></ext-link> on the static
  documentation.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p><monospace>pyomeca</monospace> is an open-source project created
  and supported by the Simulation and Movement Modeling (S2M) lab
  located in Montreal. We thank the contributors that helped build
  <monospace>pyomeca</monospace>. You can find an
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pyomeca/pyomeca/graphs/contributors">up-to-date
  list of contributors</ext-link> on GitHub. We also would like to
  extend thanks to the contributors of the libraries used to build
  <monospace>pyomeca</monospace> — particularly
  <monospace>numpy</monospace>
  (<xref alt="Walt et al., 2011" rid="ref-Walt2011-em" ref-type="bibr">Walt
  et al., 2011</xref>), <monospace>scipy</monospace>
  (<xref alt="Virtanen et al., 2020" rid="ref-Virtanen2020-zv" ref-type="bibr">Virtanen
  et al., 2020</xref>), <monospace>matplotlib</monospace>
  (<xref alt="Hunter, 2007" rid="ref-Hunter2007-fv" ref-type="bibr">Hunter,
  2007</xref>) and <monospace>xarray</monospace>
  (<xref alt="Hoyer &amp; Hamman, 2017" rid="ref-Hoyer2017-sf" ref-type="bibr">Hoyer
  &amp; Hamman, 2017</xref>).</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Hoyer2017-sf">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
          <name><surname>Hamman</surname><given-names>Joseph J</given-names></name>
        </person-group>
        <article-title>xarray: N-D labeled arrays and datasets in Python</article-title>
        <source>Journal of Open Research Software</source>
        <year iso-8601-date="2017-04">2017</year><month>04</month>
        <volume>5</volume>
        <issn>2049-9647</issn>
        <pub-id pub-id-type="doi">10.5334/jors.148</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Virtanen2020-zv">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
          <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis E</given-names></name>
          <name><surname>Haberland</surname><given-names>Matt</given-names></name>
          <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
          <name><surname>Cournapeau</surname><given-names>David</given-names></name>
          <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
          <name><surname>Bright</surname><given-names>Jonathan</given-names></name>
          <name><surname>Walt</surname><given-names>Stéfan J van der</given-names></name>
          <name><surname>Brett</surname><given-names>Matthew</given-names></name>
          <name><surname>Wilson</surname><given-names>Joshua</given-names></name>
          <name><surname>Millman</surname><given-names>K Jarrod</given-names></name>
          <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
          <name><surname>Nelson</surname><given-names>Andrew R J</given-names></name>
          <name><surname>Jones</surname><given-names>Eric</given-names></name>
          <name><surname>Kern</surname><given-names>Robert</given-names></name>
          <name><surname>Larson</surname><given-names>Eric</given-names></name>
          <name><surname>Carey</surname><given-names>C J</given-names></name>
          <name><surname>Polat</surname><given-names>İlhan</given-names></name>
          <name><surname>Feng</surname><given-names>Yu</given-names></name>
          <name><surname>Moore</surname><given-names>Eric W</given-names></name>
          <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
          <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
          <name><surname>Perktold</surname><given-names>Josef</given-names></name>
          <name><surname>Cimrman</surname><given-names>Robert</given-names></name>
          <name><surname>Henriksen</surname><given-names>Ian</given-names></name>
          <name><surname>Quintero</surname><given-names>E A</given-names></name>
          <name><surname>Harris</surname><given-names>Charles R</given-names></name>
          <name><surname>Archibald</surname><given-names>Anne M</given-names></name>
          <name><surname>Ribeiro</surname><given-names>Antônio H</given-names></name>
          <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
          <name><surname>Mulbregt</surname><given-names>Paul van</given-names></name>
          <string-name>SciPy 1.0 Contributors</string-name>
        </person-group>
        <article-title>SciPy 1.0: Fundamental algorithms for scientific computing in Python</article-title>
        <source>Nat. Methods</source>
        <year iso-8601-date="2020-03">2020</year><month>03</month>
        <volume>17</volume>
        <issue>3</issue>
        <issn>1548-7091, 1548-7105</issn>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
        <pub-id pub-id-type="pmid">32015543</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-McKinney2010-lm">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>McKinney</surname><given-names>Wes</given-names></name>
        </person-group>
        <article-title>Data Structures for Statistical Computing in Python</article-title>
        <source>Proceedings of the 9th Python in Science Conference</source>
        <publisher-name>SciPy</publisher-name>
        <publisher-loc>Austin, Texas</publisher-loc>
        <year iso-8601-date="2010">2010</year>
        <issn>2575-9752</issn>
        <pub-id pub-id-type="doi">10.25080/Majora-92bf1922-00a</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Hunter2007-fv">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>J D</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D graphics environment</article-title>
        <source>Computing in Science Engineering</source>
        <year iso-8601-date="2007-05">2007</year><month>05</month>
        <volume>9</volume>
        <issue>3</issue>
        <issn>1558-366X</issn>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Walt2011-em">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Walt</surname><given-names>Stéfan van der</given-names></name>
          <name><surname>Colbert</surname><given-names>S Chris</given-names></name>
          <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        </person-group>
        <article-title>The NumPy array: A structure for efficient numerical computation</article-title>
        <source>Comput. Sci. Eng.</source>
        <publisher-name>IEEE Computer Society</publisher-name>
        <year iso-8601-date="2011-03">2011</year><month>03</month>
        <volume>13</volume>
        <issue>2</issue>
        <issn>1521-9615</issn>
        <pub-id pub-id-type="doi">10.1109/MCSE.2011.37</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Dixon2017-co">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Dixon</surname><given-names>Philippe C</given-names></name>
          <name><surname>Loh</surname><given-names>Jonathan J</given-names></name>
          <name><surname>Michaud-Paquette</surname><given-names>Yannick</given-names></name>
          <name><surname>Pearsall</surname><given-names>David J</given-names></name>
        </person-group>
        <article-title>biomechZoo: An open-source toolbox for the processing, analysis, and visualization of biomechanical movement data</article-title>
        <source>Comput. Methods Programs Biomed.</source>
        <year iso-8601-date="2017-03">2017</year><month>03</month>
        <volume>140</volume>
        <issn>0169-2607</issn>
        <pub-id pub-id-type="doi">10.1016/j.cmpb.2016.11.007</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Muller2019-cx">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Muller</surname><given-names>Antoine</given-names></name>
          <name><surname>Pontonnier</surname><given-names>Charles</given-names></name>
          <name><surname>Puchaud</surname><given-names>Pierre</given-names></name>
          <name><surname>Dumont</surname><given-names>Georges</given-names></name>
        </person-group>
        <article-title>CusToM: A Matlab toolbox for musculoskeletal simulation</article-title>
        <source>JOSS</source>
        <year iso-8601-date="2019-01">2019</year><month>01</month>
        <volume>4</volume>
        <issue>33</issue>
        <issn>2475-9066</issn>
        <pub-id pub-id-type="doi">10.21105/joss.00927</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Hachaj2019-tk">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hachaj</surname><given-names>Tomasz</given-names></name>
          <name><surname>Ogiela</surname><given-names>Marek R</given-names></name>
        </person-group>
        <article-title>RMoCap: An R language package for processing and kinematic analyzing motion capture data</article-title>
        <source>Multimedia Systems</source>
        <year iso-8601-date="2019-08">2019</year><month>08</month>
        <issn>1432-1882</issn>
        <pub-id pub-id-type="doi">10.1007/s00530-019-00633-9</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Hatze1974-zc">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hatze</surname><given-names>H</given-names></name>
        </person-group>
        <article-title>Letter: The meaning of the term biomechanics</article-title>
        <source>J. Biomech.</source>
        <year iso-8601-date="1974-03">1974</year><month>03</month>
        <volume>7</volume>
        <issue>2</issue>
        <issn>0021-9290</issn>
        <pub-id pub-id-type="doi">10.1016/0021-9290(74)90060-8</pub-id>
        <pub-id pub-id-type="pmid">4837555</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Damsgaard2006-gq">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Damsgaard</surname><given-names>Michael</given-names></name>
          <name><surname>Rasmussen</surname><given-names>John</given-names></name>
          <name><surname>Christensen</surname><given-names>Søren Tørholm</given-names></name>
          <name><surname>Surma</surname><given-names>Egidijus</given-names></name>
          <name><surname>Zee</surname><given-names>Mark de</given-names></name>
        </person-group>
        <article-title>Analysis of musculoskeletal systems in the AnyBody modeling system</article-title>
        <source>Simulation Modelling Practice and Theory</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2006-11">2006</year><month>11</month>
        <volume>14</volume>
        <issue>8</issue>
        <issn>1569-190X</issn>
        <pub-id pub-id-type="doi">10.1016/j.simpat.2006.09.001</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ezc3d">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Michaud</surname><given-names>Benjamin</given-names></name>
          <name><surname>Begon</surname><given-names>Mickael</given-names></name>
        </person-group>
        <article-title>EZC3D: Easy to use C3D reader/writer in C++, Python and Matlab</article-title>
        <source>GitHub repository</source>
        <publisher-name>GitHub</publisher-name>
        <year iso-8601-date="2020">2020</year>
        <uri>https://github.com/pyomeca/ezc3d</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

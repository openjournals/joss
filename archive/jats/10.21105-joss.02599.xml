<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2599</article-id>
<article-id pub-id-type="doi">10.21105/joss.02599</article-id>
<title-group>
<article-title>A Short Introduction to PF: A C++ Library for Particle
Filtering</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4972-6251</contrib-id>
<string-name>Taylor R. Brown</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Statistics, University of Virginia, PO Box
400135, Charlottesville, VA 22904, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-07-14">
<day>14</day>
<month>7</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>54</issue>
<fpage>2599</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>particle filter</kwd>
<kwd>c++</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The <monospace>PF</monospace> library provides <bold>class and
  function templates</bold> that offer fast implementations for a
  variety of particle filtering algorithms. Each of these algorithms is
  useful for a wide range of time series models.</p>
  <p>In this library, each available particle filtering algorithm is
  provided as an abstract base class template. Once the data analyst has
  a specific state-space or hidden Markov model in mind, she will pick
  which type(s) of particle filtering algorithm(s) to associate with
  that model by including the appropriate header file. For each
  model-particle filter pair, she will write a class template for her
  model that inherits from the particle filter’s base class
  template.</p>
  <p>The details of each algorithm are abstracted away, and each
  algorithm’s class template’s required functions are pure virtual
  methods, meaning that the data analyst will not be able to omit any
  function that is required by the algorithm.</p>
  <p>This is by no means the first <monospace>C++</monospace> library to
  be offered that provides particle filter implementations. Other
  options include <monospace>LibBi</monospace>
  (<xref alt="Murray, 2013" rid="ref-libbi" ref-type="bibr">Murray,
  2013</xref>), <monospace>Biips</monospace>
  (<xref alt="Todeschini et al., 2014" rid="ref-todeschini2014biips" ref-type="bibr">Todeschini
  et al., 2014</xref>), <monospace>Nimble</monospace>
  (<xref alt="Valpine et al., 2017" rid="ref-doiU003A10.1080U002F10618600.2016.1172487" ref-type="bibr">Valpine
  et al., 2017</xref>) and <monospace>SMCTC</monospace>
  (<xref alt="Johansen, 2009" rid="ref-JohansenU003A2009U003AJSSOBKU003Av30i06" ref-type="bibr">Johansen,
  2009</xref>). The goals of most of these software packages are
  different, though–users of these libraries typically write their
  models in a scripting language, and that model file gets parsed into
  <monospace>C++</monospace> code. This library, on the other hand, is
  designed for users that prefer to work in <monospace>C++</monospace>
  directly.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of Need</title>
  <p>State-space models describe a partially-observed Markov chain
  <inline-formula><alternatives>
  <tex-math><![CDATA[\{(x_t,y_t)\}_{t \ge 1}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>y</mml:mi><mml:mi>t</mml:mi></mml:msub><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:msub><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>≥</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:math></alternatives></inline-formula>
  that possesses a hidden/latent variable at each time point (denoted by
  <inline-formula><alternatives>
  <tex-math><![CDATA[x_t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:msub></mml:math></alternatives></inline-formula>),
  as well as an observed variable (denoted by
  <inline-formula><alternatives>
  <tex-math><![CDATA[y_t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>y</mml:mi><mml:mi>t</mml:mi></mml:msub></mml:math></alternatives></inline-formula>).
  “Filtering” is defined as obtaining the distribution of each
  unobserved state/code random variable, conditioning on all of the
  observed information up to that point in time. In other words, it is
  the task of finding ``Particle filters” are a class of algorithms that
  approximate this sequence of distributions with weighted samples
  (termed particles). Filtering is a useful tool for a variety of
  applications in a variety of fields, and it should also be mentioned
  that they can be used for real-time forecasting, and they are critical
  component of more advanced parameter estimation algorithms.</p>
  <p>Unfortunately, it takes time and effort to implement different
  particle filters well, and this is true for two reasons. First, the
  mathematical notation used to describe them can be complex. The second
  reason is that, even if they are correctly implemented, they can be
  quite slow, limiting the number of tasks that they would be feasible
  for. This library attempts to provide speed and abstraction to
  mitigate these two difficulties.</p>
  <p>Additionally, this software is designed in an object-oriented
  manner. This allows for individual particle filters to be used in
  isolation, and it also facilitates the implementation of more
  complicated algorithms that update many particle filters through many
  iterations in a stateful way, possibly in parallel. For this second
  class of algorithms, there are usually two necessary loops: the
  “outer” loop that loops over time, and the “inner” loop that iterates
  over each distinct particle filter. Without an object-oriented design,
  there would be a third loop, which loops over all particle samples in
  each particle filter. Some examples of algorithms that run many
  particle filters within the overall algorithm are particle filters
  with parallelized resampling schemes
  (<xref alt="Bolic et al., 2005, p. 1309.2918" rid="ref-1453776" ref-type="bibr">Bolic
  et al., 2005, p. 1309.2918</xref>), particle Markov chain Monte Carlo
  algorithms
  (<xref alt="Andrieu et al., 2010" rid="ref-pmcmc" ref-type="bibr">Andrieu
  et al., 2010</xref>), importance sampling “squared”
  (<xref alt="Tran et al., 2013" rid="ref-issquared" ref-type="bibr">Tran
  et al., 2013</xref>), and the particle swarm algorithm
  (<xref alt="Brown, 2020" rid="ref-pswarm" ref-type="bibr">Brown,
  2020</xref>).</p>
  <p>Finally, this library is “header-only.” This will allow some users
  to build their own <monospace>C++</monospace> project by
  <monospace>#include</monospace>-ing relevant headers from this library
  and pointing the compiler at the <monospace>include/pf/</monospace>
  directory (this is “Option 2” described in the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/tbrown122387/pf/blob/master/README.md"><monospace>README.md</monospace></ext-link>
  file). On the other hand, other uses will prefer to use the
  <monospace>CMake</monospace> build procedure (this is “Option 1” in
  the <monospace>README.md</monospace> file), as this will help build
  the included unit tests and more closely follows the style of the
  provided example code projects.</p>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>A fully-worked example is provided with this software and is made
  available in the <monospace>examples/</monospace> directory in the
  Github repository. This example considers modeling a financial time
  series with a simple stochastic volatility model
  (<xref alt="Taylor, 2018" rid="ref-taylor82" ref-type="bibr">Taylor,
  2018</xref>) with three parameters: <inline-formula><alternatives>
  <tex-math><![CDATA[\beta, \phi]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>β</mml:mi><mml:mo>,</mml:mo><mml:mi>ϕ</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[\sigma]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>σ</mml:mi></mml:math></alternatives></inline-formula>.
  For this model, the observable rate of return
  <inline-formula><alternatives>
  <tex-math><![CDATA[y_t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>y</mml:mi><mml:mi>t</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  is normally distributed after conditioning on the contemporaneous
  state random variable <inline-formula><alternatives>
  <tex-math><![CDATA[x_t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:msub></mml:math></alternatives></inline-formula>.
  The mean parameter of this normal distribution will remain fixed at
  <inline-formula><alternatives>
  <tex-math><![CDATA[0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>0</mml:mn></mml:math></alternatives></inline-formula>.
  However, the scale of this distribution will vary with the evolving
  <inline-formula><alternatives>
  <tex-math><![CDATA[x_t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:msub></mml:math></alternatives></inline-formula>.
  When <inline-formula><alternatives>
  <tex-math><![CDATA[x_t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  is relatively high, the returns will have a high conditional variance
  and be “volatile.” When <inline-formula><alternatives>
  <tex-math><![CDATA[x_t]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>x</mml:mi><mml:mi>t</mml:mi></mml:msub></mml:math></alternatives></inline-formula>
  is low, the returns will be much less volatile.</p>
  <p>The observation equation is where <inline-formula><alternatives>
  <tex-math><![CDATA[\{z_t\}_{t=1}^T]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:msub><mml:mi>z</mml:mi><mml:mi>t</mml:mi></mml:msub><mml:msubsup><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>T</mml:mi></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula>
  are independent and identically distributed (iid) normal random
  variates.</p>
  <p>The state evolves randomly through time as an autoregressive
  process of order one: The collection <inline-formula><alternatives>
  <tex-math><![CDATA[\{z'_t\}_{t=1}^T]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="false" form="prefix">{</mml:mo><mml:mi>z</mml:mi><mml:msub><mml:mi>′</mml:mi><mml:mi>t</mml:mi></mml:msub><mml:msubsup><mml:mo stretchy="false" form="postfix">}</mml:mo><mml:mrow><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>T</mml:mi></mml:msubsup></mml:mrow></mml:math></alternatives></inline-formula>
  are also assumed to be iid normal random variates. At time
  <inline-formula><alternatives>
  <tex-math><![CDATA[1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>1</mml:mn></mml:math></alternatives></inline-formula>,
  we assume the first state follows a mean zero normal distribution:
  <inline-formula><alternatives>
  <tex-math><![CDATA[x_1 = sigma/\sqrt{1-\phi^2}z_1']]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>=</mml:mo><mml:mi>s</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>m</mml:mi><mml:mi>a</mml:mi><mml:mi>/</mml:mi><mml:msqrt><mml:mrow><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:msup><mml:mi>ϕ</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:mrow></mml:msqrt><mml:msub><mml:mi>z</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mi>′</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>.
  For simplicity, all of our proposal distributions are chosen to be the
  same as the state transitions.</p>
  <p>The file
  <ext-link ext-link-type="uri" xlink:href="https://github.com/tbrown122387/pf/blob/master/examples/svol_sisr.h"><monospace>examples/svol_sisr.h</monospace></ext-link>
  provides an example of writing a class template called
  <monospace>svol_sisr</monospace> for this model-algorithm pair. Any
  model-algorithm pair will make use of a resampler type (found in
  <monospace>include/pf/resamplers.h</monospace>), sampler functions
  (found in <monospace>include/pf/rv_samp.h</monospace>), and density
  evaluator functions (found in
  <monospace>include/pf/rv_eval.h</monospace>). Because you are writing
  a class template instead of a class, the decision of what to pass in
  as template parameters will be pushed back to the instantiation site.
  These template parameters are often changed quite frequently, so this
  design allows them to be changed only in one location of the project.
  Instantiating an object after the class template has been written is
  much easier than writing the class template itself. Just provide the
  template parameters and the constructor parameters in the correct
  order. For example,</p>
  <code language="c++">using Mod = svol_sisr&lt;5000,1,1,mn_resampler&lt;5000,1,double&gt;,double&gt;;
Mod sisrsvol(.91,.5,1.0);</code>
  <p>instantiates the object called <monospace>sisrsvol</monospace>,
  which performs the SISR algorithm for the stochastic volatility model
  using multinomial sampling on <inline-formula><alternatives>
  <tex-math><![CDATA[5,000]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>5</mml:mn><mml:mo>,</mml:mo><mml:mn>000</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  particles. It sets <inline-formula><alternatives>
  <tex-math><![CDATA[\phi = .91]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>ϕ</mml:mi><mml:mo>=</mml:mo><mml:mn>.91</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>,
  <inline-formula><alternatives>
  <tex-math><![CDATA[\beta = .5]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>β</mml:mi><mml:mo>=</mml:mo><mml:mn>.5</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  and <inline-formula><alternatives>
  <tex-math><![CDATA[\sigma = 1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>σ</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>.</p>
  <p>As (possibly real-time, streaming) data becomes available, updating
  the model is accomplished with the <monospace>filter</monospace>
  method. The call at each time point would look something like</p>
  <code language="c++">sisrsvol.filter(yt);</code>
  <p>The repository also provides an implementation of the “almost
  constant velocity model” that is comparable to the one described in
  section 5.1 of
  (<xref alt="Johansen, 2009" rid="ref-JohansenU003A2009U003AJSSOBKU003Av30i06" ref-type="bibr">Johansen,
  2009</xref>). This can be found in the
  <monospace>smctc_comparison_example/</monospace> directory. Comparing
  the two implementations, ours makes use of more modern and
  higher-level <monospace>C++</monospace> types and features and is
  slightly faster at first glance. Our implementation is written to
  match as many aspects of the one provided in SMCTC sample code as
  possible: both use a bootstrap filter proposal distribution, both only
  retain the most recent particles instead of the entire particle
  trajectory, both use the same parameters, both iterate across the same
  data set, and both use <inline-formula><alternatives>
  <tex-math><![CDATA[100,000]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>100</mml:mn><mml:mo>,</mml:mo><mml:mn>000</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  particles. Both programs were run on Ubuntu 18.04 with an Intel(R)
  Xeon(R) CPU E3-1241 v3 @ 3.50GHz chip. Ours ran in 2.883 seconds,
  while the SMCTC-provided implementation ran in 5.605 seconds. However,
  this test is far from conclusive: these packages make use of different
  random number generators, different data-reading functions, and
  different build procedures.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The author acknowledges Research Computing at The University of
  Virginia (https://rc.virginia.edu) for providing computational
  resources and technical support that have contributed to the results
  reported within this publication.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-libbi">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Murray</surname><given-names>Lawrence M.</given-names></name>
        </person-group>
        <article-title>Bayesian State-Space Modelling on High-Performance Hardware Using </article-title>
        <source>arXiv preprint arXiv:1306.3277</source>
        <year iso-8601-date="2013">2013</year>
      </element-citation>
    </ref>
    <ref id="ref-todeschini2014biips">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Todeschini</surname><given-names>Adrien</given-names></name>
          <name><surname>Caron</surname><given-names>François</given-names></name>
          <name><surname>Fuentes</surname><given-names>Marc</given-names></name>
          <name><surname>Legrand</surname><given-names>Pierrick</given-names></name>
          <name><surname>Del Moral</surname><given-names>Pierre</given-names></name>
        </person-group>
        <article-title>: Software for Bayesian Inference with Interacting Particle Systems</article-title>
        <source>arXiv preprint arXiv:1412.3779</source>
        <year iso-8601-date="2014">2014</year>
      </element-citation>
    </ref>
    <ref id="ref-JohansenU003A2009U003AJSSOBKU003Av30i06">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Johansen</surname><given-names>Adam M.</given-names></name>
        </person-group>
        <article-title>SMCTC: Sequential Monte Carlo in </article-title>
        <source>Journal of Statistical Software</source>
        <year iso-8601-date="2009-04">2009</year><month>04</month>
        <volume>30</volume>
        <issue>6</issue>
        <issn>1548-7660</issn>
        <uri>http://www.jstatsoft.org/v30/i06</uri>
      </element-citation>
    </ref>
    <ref id="ref-doiU003A10.1080U002F10618600.2016.1172487">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Valpine</surname><given-names>Perry de</given-names></name>
          <name><surname>Turek</surname><given-names>Daniel</given-names></name>
          <name><surname>Paciorek</surname><given-names>Christopher J.</given-names></name>
          <name><surname>Anderson-Bergman</surname><given-names>Clifford</given-names></name>
          <name><surname>Lang</surname><given-names>Duncan Temple</given-names></name>
          <name><surname>Bodik</surname><given-names>Rastislav</given-names></name>
        </person-group>
        <article-title>Programming With Models: Writing Statistical Algorithms for General Model Structures With </article-title>
        <source>Journal of Computational and Graphical Statistics</source>
        <publisher-name>Taylor &amp; Francis</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>26</volume>
        <issue>2</issue>
        <uri> 
                https://doi.org/10.1080/10618600.2016.1172487
            
        </uri>
        <pub-id pub-id-type="doi">10.1080/10618600.2016.1172487</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-pmcmc">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Andrieu</surname><given-names>Christophe</given-names></name>
          <name><surname>Doucet</surname><given-names>Arnaud</given-names></name>
          <name><surname>Holenstein</surname><given-names>Roman</given-names></name>
        </person-group>
        <article-title>Particle Markov chain Monte Carlo methods</article-title>
        <source>Journal of the Royal Statistical Society: Series B (Statistical Methodology)</source>
        <publisher-name>Blackwell Publishing Ltd</publisher-name>
        <year iso-8601-date="2010">2010</year>
        <volume>72</volume>
        <issue>3</issue>
        <issn>1467-9868</issn>
        <uri>http://dx.doi.org/10.1111/j.1467-9868.2009.00736.x</uri>
        <pub-id pub-id-type="doi">10.1111/j.1467-9868.2009.00736.x</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-taylor82">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Taylor</surname><given-names>Stephen John</given-names></name>
        </person-group>
        <article-title>Financial Returns Modelled by the Product of Two Stochastic Processes, A Study of Daily Sugar Prices</article-title>
        <source>Volatility</source>
        <person-group person-group-type="editor">
          <name><surname>Andersen</surname><given-names>Torben</given-names></name>
          <name><surname>Bollerslev</surname><given-names>Tim</given-names></name>
        </person-group>
        <publisher-name>Edward Elgar</publisher-name>
        <year iso-8601-date="2018">2018</year>
        <isbn>9781788110617</isbn>
      </element-citation>
    </ref>
    <ref id="ref-1453776">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bolic</surname><given-names>M.</given-names></name>
          <name><surname>Djuric</surname><given-names>P. M.</given-names></name>
          <string-name>Sangjin Hong</string-name>
        </person-group>
        <article-title>Resampling algorithms and architectures for distributed particle filters</article-title>
        <source>IEEE Transactions on Signal Processing</source>
        <year iso-8601-date="2005">2005</year>
        <volume>53</volume>
        <issue>7</issue>
        <issn>1941-0476</issn>
        <pub-id pub-id-type="doi">10.1109/TSP.2005.849185</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-issquared">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Tran</surname><given-names>Minh-Ngoc</given-names></name>
          <name><surname>Scharth</surname><given-names>Marcel</given-names></name>
          <name><surname>Pitt</surname><given-names>Michael</given-names></name>
          <name><surname>Kohn</surname><given-names>Robert</given-names></name>
        </person-group>
        <article-title>Importance Sampling Squared for Bayesian Inference in Latent Variable Models</article-title>
        <source>SSRN Electronic Journal</source>
        <year iso-8601-date="2013-09">2013</year><month>09</month>
        <pub-id pub-id-type="doi">10.2139/ssrn.2386371</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-pswarm">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Brown</surname><given-names>Taylor R.</given-names></name>
        </person-group>
        <article-title>Approximating Posterior Predictive Distributions by Averaging Output From Many Particle Filters</article-title>
        <source>arXiv preprint arXiv:2006.15396</source>
        <year iso-8601-date="2020">2020</year>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1292</article-id>
<article-id pub-id-type="doi">10.21105/joss.01292</article-id>
<title-group>
<article-title>dolfin-adjoint 2018.1: automated adjoints for FEniCS and
Firedrake</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8888-6568</contrib-id>
<string-name>Sebastian K. Mitusch</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4709-8415</contrib-id>
<string-name>Simon W. Funke</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6489-8858</contrib-id>
<string-name>Jørgen S. Dokken</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Simula Research Laboratory</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2018-12-31">
<day>31</day>
<month>12</month>
<year>2018</year>
</pub-date>
<volume>4</volume>
<issue>38</issue>
<fpage>1292</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>finite element method</kwd>
<kwd>optimization</kwd>
<kwd>adjoint</kwd>
<kwd>gradients</kwd>
<kwd>partial differential equations</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Adjoint models play an important role in scientific computing. For
  example, they enable sensitivity and stability analysis, goal-oriented
  mesh adaptivity and optimisation. However, the derivation and
  implementation of adjoint models is challenging, especially for models
  governed by non-linear or time-dependent partial differential
  equations (PDEs). Farrell et al. proposed to automatically derive
  adjoint models through high-level algorithmic differentiation, where
  the forward model is considered as a sequence of variational problems
  (<xref alt="Farrell et al., 2013" rid="ref-FarrellEtAl2013" ref-type="bibr">Farrell
  et al., 2013</xref>). The implementation, named dolfin-adjoint,
  automatically and robustly derives adjoint models for models written
  in the finite element software FEniCS
  (<xref alt="Logg et al., 2012" rid="ref-LoggEtAl2012" ref-type="bibr">Logg
  et al., 2012</xref>). However, the assumption that the model consists
  of a sequence of variational problems can be limiting, for instance,
  when considering Dirichlet boundary conditions that are not explicitly
  stated in the variational formulation, when considering complex
  functionals that cannot be represented as an integral, or when
  coupling FEniCS to other non-PDE models.</p>
  <p>We present a new implementation of dolfin-adjoint that overcomes
  these limitations. The core of our implementation is a generic,
  operator-overloading based, algorithmic differentiation tool for
  Python called pyadjoint. To apply pyadjoint to a Python module, one
  implements a <italic>pyadjoint.Block</italic> subclass for each module
  function that can recompute the function with new inputs and compute
  the function’s derivatives. During runtime, pyadjoint builds a graph
  of Block instances, and applies the chain rule to automatically
  compute gradients and Hessian actions. Further, pyadjoint includes
  gradient verification tools and an optimisation framework that
  interfaces external packages such as scipy, ipopt, moola and ROL.</p>
  <p>To support automated adjoints for FEniCS and Firedrake
  (<xref alt="Rathgeber et al., 2017" rid="ref-RathgeberEtAl2017" ref-type="bibr">Rathgeber
  et al., 2017</xref>) models, we overloaded their user-interface
  functions. In FEniCS and Firedrake, variational problems are
  represented in the domain-specific language UFL
  (<xref alt="Alnæs et al., 2014" rid="ref-AlnaesEtAl2014" ref-type="bibr">Alnæs
  et al., 2014</xref>). UFL allows the definition and manipulation of
  discrete variational formulations, which we leverage to automatically
  obtain the desired equations in a format that can be solved by
  FEniCS/Firedrake. This allows us to efficiently derive the adjoint and
  tangent-linear equations and solve them using the existing solver
  methods in FEniCS/Firedrake, as described by Farrell et al.
  (<xref alt="Farrell et al., 2013" rid="ref-FarrellEtAl2013" ref-type="bibr">Farrell
  et al., 2013</xref>) In addition, we have implemented support for
  computing the adjoint solution at the boundary, which enables the
  automatic differentiation of PDE solutions with respect to strongly
  imposed Dirichlet boundary conditions.</p>
  <p>The dolfin-adjoint repository contains a wide range of tests and
  demos. The demos are documented and available at
  <ext-link ext-link-type="uri" xlink:href="www.dolfin-adjoint.org">www.dolfin-adjoint.org</ext-link>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to thank Imperial College London and the Firedrake
  team for their contributions to pyadjoint and dolfin-adjoint. A
  special thanks to Lawrence Mitchell for his work on the Firedrake
  specific implementations, and David Ham for his input on strong
  Dirichlet boundary condition controls. Sebastian Mitusch was supported
  by the Norwegian Ministry of Education and Research. Simon Funke and
  Jørgen Dokken were supported by the Research Council of Norway through
  a FRIPRO grant, project 251237. Finally, thanks to everyone who has
  contributed to the pyadjoint repository.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-FarrellEtAl2013">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Farrell</surname><given-names>P. E.</given-names></name>
          <name><surname>Ham</surname><given-names>D. A.</given-names></name>
          <name><surname>Funke</surname><given-names>S. W.</given-names></name>
          <name><surname>Rognes</surname><given-names>M. E.</given-names></name>
        </person-group>
        <article-title>Automated derivation of the adjoint of high-level transient finite element programs</article-title>
        <source>SIAM Journal on Scientific Computing</source>
        <year iso-8601-date="2013">2013</year>
        <volume>35</volume>
        <issue>4</issue>
        <pub-id pub-id-type="doi">10.1137/120873558</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-LoggEtAl2012">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Logg</surname><given-names>Anders</given-names></name>
          <name><surname>Mardal</surname><given-names>Kent-Andre</given-names></name>
          <name><surname>Wells</surname><given-names>Garth N.</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <source>Automated solution of differential equations by the finite element method</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2012">2012</year>
        <isbn>978-3-642-23098-1</isbn>
        <pub-id pub-id-type="doi">10.1007/978-3-642-23099-8</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-RathgeberEtAl2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Rathgeber</surname><given-names>Florian</given-names></name>
          <name><surname>Ham</surname><given-names>David A</given-names></name>
          <name><surname>Mitchell</surname><given-names>Lawrence</given-names></name>
          <name><surname>Lange</surname><given-names>Michael</given-names></name>
          <name><surname>Luporini</surname><given-names>Fabio</given-names></name>
          <name><surname>McRae</surname><given-names>Andrew TT</given-names></name>
          <name><surname>Bercea</surname><given-names>Gheorghe-Teodor</given-names></name>
          <name><surname>Markall</surname><given-names>Graham R</given-names></name>
          <name><surname>Kelly</surname><given-names>Paul HJ</given-names></name>
        </person-group>
        <article-title>Firedrake: Automating the finite element method by composing abstractions</article-title>
        <source>ACM Transactions on Mathematical Software (TOMS)</source>
        <publisher-name>ACM</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>43</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1145/2998441</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-AlnaesEtAl2014">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Alnæs</surname><given-names>Martin S</given-names></name>
          <name><surname>Logg</surname><given-names>Anders</given-names></name>
          <name><surname>Ølgaard</surname><given-names>Kristian B</given-names></name>
          <name><surname>Rognes</surname><given-names>Marie E</given-names></name>
          <name><surname>Wells</surname><given-names>Garth N</given-names></name>
        </person-group>
        <article-title>Unified form language: A domain-specific language for weak formulations of partial differential equations</article-title>
        <source>ACM Transactions on Mathematical Software (TOMS)</source>
        <publisher-name>ACM</publisher-name>
        <year iso-8601-date="2014">2014</year>
        <volume>40</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1145/2566630</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2272</article-id>
<article-id pub-id-type="doi">10.21105/joss.02272</article-id>
<title-group>
<article-title>rgee: An R package for interacting with Google Earth
Engine</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-2745-9535</contrib-id>
<string-name>Cesar Aybar</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5437-4073</contrib-id>
<string-name>Qiusheng Wu</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-3523-8687</contrib-id>
<string-name>Lesly Bautista</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0003-4542-3755</contrib-id>
<string-name>Roy Yali</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5921-2858</contrib-id>
<string-name>Antony Barja</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Geoinformatics – Z_GIS, University of
Salzburg, Austria</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Geography, University of Tennessee,
Knoxville, TN 37996, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Universidad Nacional Mayor de San Marcos, Lima, Lima 15081,
Peru</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>5</volume>
<issue>51</issue>
<fpage>2272</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Earth Engine</kwd>
<kwd>Earth Observation</kwd>
<kwd>spatial analysis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Google Earth Engine
  (<xref alt="Gorelick et al., 2017" rid="ref-gorelick2017google" ref-type="bibr">Gorelick
  et al., 2017</xref>) is a cloud computing platform designed for
  planetary-scale environmental data analysis. Its multi-petabyte data
  catalog and computation services are accessed via an
  Internet-accessible API. The API is exposed through JavaScript and
  Python client libraries. Google provides a browser-based IDE for the
  JavaScript API, and while convenient and useful for rapid data
  exploration and script development, it does not allow third-party
  package integration, relying solely on Google Maps and Google Charts
  for data visualization, and proprietary systems for metadata viewing
  and asset management. In contrast, the Python and Node.js
  distributions offer much flexibility for developers to integrate with
  third-party libraries. However, without the structure of a dedicated
  IDE, casual users can be left directionless and daunted. A significant
  gap exists between these two offerings (Google-supported JavaScript
  IDE and base client libraries) where convenience and flexibility meet.
  We propose to fill this gap with an R package that wraps the Earth
  Engine Python API to provide R users with a familiar interface, rapid
  development features, and flexibility to analyze data using
  open-source, third-party packages.</p>
  <p>rgee is an Earth Engine (EE) client library for R that allows users
  to leverage the strengths of the R spatial ecosystem and Google Earth
  Engine in the same workflow. All of the Earth Engine Python API
  classes, modules, and functions are made available through the
  reticulate package
  (<xref alt="Ushey et al., 2020" rid="ref-reticulate" ref-type="bibr">Ushey
  et al., 2020</xref>), which embeds a Python session within an R
  session, enabling seamless interoperability. Additionally, rgee adds
  several new features such as (i) new I/O design, (ii) interactive map
  display, (iii) easy extraction of time series, (iv) asset management
  interface, and (v) metadata display. In addition, rgee also makes it
  possible to execute Earth Engine Python code from within R, making the
  translation of large Python projects unnecessary.</p>
</sec>
<sec id="features">
  <title>Features</title>
  <sec id="enhanced-io">
    <title>Enhanced I/O</title>
    <p>rgee implements several functions to support download/upload of
    spatial objects (Table <xref alt="1" rid="tableU003A1">1</xref> and
    Table <xref alt="2" rid="tableU003A2">2</xref>). For instance, to
    download vector (image) files one can use
    <monospace>ee_as_sf</monospace> (<monospace>ee_as_raster</monospace>
    or <monospace>ee_as_stars</monospace>). In rgee, all the functions
    from server to local side have the option to fetch data using an
    intermediate container (Google Drive or Google Cloud Storage) or
    through a REST call (“$getInfo”). Although the latter option
    performs a quick download, there is a request limit of 262144 pixels
    for <monospace>ee$Image</monospace> and 5000 elements for
    <monospace>ee$FeatureCollection</monospace> which makes it
    unsuitable for large objects. Other download functions, from
    server-side to others (see Table
    <xref alt="1" rid="tableU003A1">1</xref>), are implemented to enable
    more customized download workflows. For example, using
    <monospace>ee_image_to_drive</monospace> and
    <monospace>ee_drive_to_local</monospace> users could create scripts
    which save results in the <monospace>.TFRecord</monospace> rather
    than the <monospace>.GeoTIFF</monospace> format. The upload process
    follows the same logic (Table
    <xref alt="2" rid="tableU003A2">2</xref>). rgee includes
    <monospace>raster_as_ee</monospace> and
    <monospace>stars_as_ee</monospace> for uploading images and
    <monospace>sf_as_ee</monospace> for uploading vector data. Large
    uploads are only possible with an active Google Cloud Storage
    account.</p>
    <table-wrap>
      <caption>
        <p>Download functions provided by the rgee package.
        <styled-content id="tableU003A1"></styled-content></p>
      </caption>
      <table>
        <thead>
          <tr>
            <th></th>
            <th></th>
            <th align="center">FROM</th>
            <th align="center">TO</th>
            <th align="center">RETURN</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Image</td>
            <td>ee_image_to_drive</td>
            <td align="center">EE server</td>
            <td align="center">Drive</td>
            <td align="center">Unstarted task</td>
          </tr>
          <tr>
            <td></td>
            <td>ee_image_to_gcs</td>
            <td align="center">EE server</td>
            <td align="center">Cloud Storage</td>
            <td align="center">Unstarted task</td>
          </tr>
          <tr>
            <td></td>
            <td>ee_image_to_asset</td>
            <td align="center">EE server</td>
            <td align="center">EE asset</td>
            <td align="center">Unstarted task</td>
          </tr>
          <tr>
            <td></td>
            <td>ee_as_raster</td>
            <td align="center">EE server</td>
            <td align="center">Local</td>
            <td align="center">RasterStack object</td>
          </tr>
          <tr>
            <td></td>
            <td>ee_as_stars</td>
            <td align="center">EE server</td>
            <td align="center">Local</td>
            <td align="center">Proxy-stars object</td>
          </tr>
          <tr>
            <td>Table</td>
            <td>ee_table_to_drive</td>
            <td align="center">EE server</td>
            <td align="center">Drive</td>
            <td align="center">Unstarted task</td>
          </tr>
          <tr>
            <td></td>
            <td>ee_table_to_gcs</td>
            <td align="center">EE server</td>
            <td align="center">Cloud Storage</td>
            <td align="center">Unstarted task</td>
          </tr>
          <tr>
            <td></td>
            <td>ee_table_to_asset</td>
            <td align="center">EE server</td>
            <td align="center">EE asset</td>
            <td align="center">Unstarted task</td>
          </tr>
          <tr>
            <td></td>
            <td>ee_as_sf</td>
            <td align="center">EE server</td>
            <td align="center">Local</td>
            <td align="center">sf object</td>
          </tr>
          <tr>
            <td>Generic</td>
            <td>ee_drive_to_local</td>
            <td align="center">Drive</td>
            <td align="center">Local</td>
            <td align="center">object filename</td>
          </tr>
          <tr>
            <td></td>
            <td>ee_gcs_to_local</td>
            <td align="center">Cloud Storage</td>
            <td align="center">Local</td>
            <td align="center">GCS filename</td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <table-wrap>
      <caption>
        <p>Upload functions provided by the rgee package.
        <styled-content id="tableU003A2"></styled-content></p>
      </caption>
      <table>
        <thead>
          <tr>
            <th></th>
            <th></th>
            <th align="center">FROM</th>
            <th align="center">TO</th>
            <th align="center">RETURN</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Image</td>
            <td>gcs_to_ee_image</td>
            <td align="center">Cloud Storage</td>
            <td align="center">EE asset</td>
            <td align="center">EE Asset ID</td>
          </tr>
          <tr>
            <td></td>
            <td>raster_as_ee</td>
            <td align="center">Local</td>
            <td align="center">EE asset</td>
            <td align="center">EE Asset ID</td>
          </tr>
          <tr>
            <td></td>
            <td>stars_as_ee</td>
            <td align="center">Local</td>
            <td align="center">EE asset</td>
            <td align="center">EE Asset ID</td>
          </tr>
          <tr>
            <td>Table</td>
            <td>gcs_to_ee_table</td>
            <td align="center">Cloud Storage</td>
            <td align="center">EE asset</td>
            <td align="center">EE Asset ID</td>
          </tr>
          <tr>
            <td></td>
            <td>sf_as_ee</td>
            <td align="center">Local</td>
            <td align="center">EE asset</td>
            <td align="center">EE Asset ID</td>
          </tr>
          <tr>
            <td>Generic</td>
            <td>local_to_gcs</td>
            <td align="center">Local</td>
            <td align="center">Cloud Storage</td>
            <td align="center">GCS filename</td>
          </tr>
        </tbody>
      </table>
    </table-wrap>
    <p>The following example illustrates how to integrate the rgee I/O
    module and ggplot2
    (<xref alt="Wickham, 2011" rid="ref-wickham2011ggplot2" ref-type="bibr">Wickham,
    2011</xref>) to download and visualize metadata for the
    <ext-link ext-link-type="uri" xlink:href="https://developers.google.com/earth-engine/datasets/catalog/BLM_AIM_v1_TerrADat_TerrestrialAIM#description/">BLM
    AIM TerrestrialAIM</ext-link> dataset.</p>
    <code language="r script">library(tidyverse)
library(rgee)
library(sf)

ee_Initialize()

# Define a Region of interest
roi &lt;- ee$Geometry$Point(-120.06227, 40.64189)$buffer(25000)

# Load TerrADat TerrestrialAIM Dataset
blocks &lt;- ee$FeatureCollection(&quot;BLM/AIM/v1/TerrADat/TerrestrialAIM&quot;)
subset &lt;- blocks$filterBounds(roi)

# Move an Earth Engine FeatureCollection to their local env
sf_subset &lt;- ee_as_sf(x = subset)

# Create a boxplot with ggplot2
gapPct &lt;- c(&quot;_25_50&quot; = &quot;GapPct_25_50&quot;,&quot;_51_100&quot;=&quot;GapPct_51_100&quot;,
            &quot;101_200&quot; = &quot;GapPct_101_200&quot;,&quot;200_&gt;&quot; = &quot;GapPct_200_plus&quot;)

sf_subset[gapPct] %&gt;% 
  st_set_geometry(NULL) %&gt;% 
  as_tibble() %&gt;% 
  rename(!!gapPct) %&gt;% 
  pivot_longer(seq_along(gapPct), names_to = &quot;Range&quot;) %&gt;% 
  ggplot(aes(x = Range, y = value, fill = Range)) +
  geom_boxplot() +
  xlab(&quot;&quot;) + ylab(&quot;% of the plot's soil surface&quot;) +
  theme_minimal()</code>
    <fig>
      <caption><p>Gaps percentage between plant canopies of different
      sizes in a place near to Carson City, Nevada, USA.
      <styled-content id="figU003AAIM"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="rgee_paper_00.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="interactive-map-display">
    <title>Interactive Map Display</title>
    <p>rgee offers interactive map display through
    <monospace>Map$addLayer</monospace>, an R function mimicking the
    mapping module of the Earth Engine JavaScript Code Editor.
    <monospace>Map$addLayer</monospace> takes advantage of the
    <monospace>getMapId</monospace> EE method to fetch and return an ID
    dictionary being used to create layers in a mapview
    (<xref alt="Appelhans et al., 2020" rid="ref-mapview" ref-type="bibr">Appelhans
    et al., 2020</xref>) object. Users can specify visualization
    parameters to <monospace>Map$addLayer</monospace> by using the
    visParams argument, as demostrated below:</p>
    <code language="r script">library(rgee)
ee_Initialize()

# Load an ee$Image
image &lt;- ee$Image(&quot;LANDSAT/LC08/C01/T1/LC08_044034_20140318&quot;)

# Centers the map view
Map$centerObject(image)

# Display the ee$Image
Map$addLayer(
  eeObject = image, 
  visParams = list(bands = c(&quot;B4&quot;, &quot;B3&quot;, &quot;B2&quot;), max = 10000), 
  name = &quot;SF&quot;
)</code>
    <fig>
      <caption><p>Landsat 8 false color composite of San Francisco bay
      area, California, USA.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="rgee_paper_mapview.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="extraction-of-time-series">
    <title>Extraction of time series</title>
    <p>rgee can extract values from <monospace>ee$Image</monospace> and
    <monospace>ee$ImageCollection</monospace> objects at a certain
    location based on <monospace>ee$Geometry</monospace>,
    <monospace>ee$Feature</monospace>,
    <monospace>ee$FeatureCollection</monospace> and
    <monospace>sf</monospace> objects. If the geometry is a polygon,
    users can summarize the values using built-in Earth Engine reducer
    functions. The code below explains how to extract the average areal
    rainfall from North Carolina counties using the
    <ext-link ext-link-type="uri" xlink:href="https://developers.google.com/earth-engine/datasets/catalog/IDAHO_EPSCOR_TERRACLIMATE/">TerraClimate</ext-link>
    dataset.</p>
    <code language="r script">library(ggplot2)
library(tidyr)
library(dplyr)
library(rgee)
library(sf)

ee_Initialize()

# Filter the terraclimate dataset by dates, reproject
# and select only the band &quot;pr&quot;.
terraclimate &lt;- ee$ImageCollection(&quot;IDAHO_EPSCOR/TERRACLIMATE&quot;)$
  filterDate(&quot;2001-01-01&quot;, &quot;2002-01-01&quot;)$
  map(function(x) x$reproject(&quot;EPSG:4326&quot;)$select(&quot;pr&quot;))

# Define a geometry
nc &lt;- st_read(system.file(&quot;shape/nc.shp&quot;, package = &quot;sf&quot;))

# Extract the average areal rainfall
ee_nc_rain &lt;- ee_extract(terraclimate, nc, sf = FALSE)
colnames(ee_nc_rain) &lt;- sprintf(&quot;%02d&quot;, 1:12)
ee_nc_rain$name &lt;- nc$NAME

# Create a data frame in a tidy format and display rainfall values
ee_nc_rain %&gt;%
  pivot_longer(-name, names_to = &quot;month&quot;, values_to = &quot;pr&quot;) %&gt;%
  ggplot(aes(x = month, y = pr, group = name, color = pr)) +
  geom_line(alpha = 0.4) +
  xlab(&quot;Month&quot;) +
  ylab(&quot;Precipitation (mm)&quot;) +
  theme_minimal()</code>
    <fig>
      <caption><p>Average areal rainfall in counties of North Carolina
      for the year 2001 according to the TerraClimate
      dataset.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="rgee_paper_01.png" xlink:title="" />
    </fig>
  </sec>
  <sec id="asset-management-interface">
    <title>Asset Management Interface</title>
    <p>rgee implements an interface to batch actions on assets extending
    capabilities of the existing EE data module
    (<monospace>ee$data$*</monospace>). The interface allows users to
    create and eliminate folders, move and copy assets, set and delete
    properties, handle access control lists, and manage or cancel tasks.
    For example, users can copy a Landsat 8 image to their personal EE
    assets as follows:</p>
    <code language="r script">library(rgee)
ee_Initialize()

server_path &lt;- &quot;LANDSAT/LC08/C01/T1/&quot;
user_asset_path &lt;- ee_get_assethome()

ee_manage_copy(
  path_asset = paste0(server_path,&quot;/LC08_044034_20140318&quot;),
  final_path = paste0(user_asset_path,&quot;/LC08_044034_20140318&quot;)
)</code>
  </sec>
  <sec id="metadata-display">
    <title>Metadata display</title>
    <p>The <monospace>ee_print</monospace> function can save and display
    all metadata related to EE spatial objects. With
    <monospace>ee_print</monospace>, users can retrieve information
    about the number of images or features, number of bands or
    geometries, number of pixels, geotransform, datatype, properties and
    approximate object size. <monospace>ee_print</monospace> can be used
    inside debugging pipelines (e.g. linking with
    <monospace>ee$Image$aside</monospace>).</p>
    <code language="r script">library(rgee)

ee_Initialize()
l8 &lt;- ee$Image(&quot;LANDSAT/LC08/C01/T1/LC08_044034_20140318&quot;)
ee_print(l8)</code>
    <fig>
      <caption><p>Metadata for a Landsat 8 Image.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="rgee_paper_02.png" xlink:title="" />
    </fig>
  </sec>
</sec>
<sec id="availability">
  <title>Availability</title>
  <p>rgee is an open-source software package made available under the
  Apache 2.0 license. It can be installed through GitHub repository
  using the remotes package: remotes::install_github(“r-spatial/rgee”).
  A series of examples for using rgee are available at
  <ext-link ext-link-type="uri" xlink:href="https://r-spatial.github.io/rgee/">https://r-spatial.github.io/rgee/</ext-link>.</p>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>The authors would like to thank Justin Braaten for his reviewing
  and helpful comments during the preparation of this manuscript and
  development of rgee.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-gorelick2017google">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gorelick</surname><given-names>Noel</given-names></name>
          <name><surname>Hancher</surname><given-names>Matt</given-names></name>
          <name><surname>Dixon</surname><given-names>Mike</given-names></name>
          <name><surname>Ilyushchenko</surname><given-names>Simon</given-names></name>
          <name><surname>Thau</surname><given-names>David</given-names></name>
          <name><surname>Moore</surname><given-names>Rebecca</given-names></name>
        </person-group>
        <article-title>Google earth engine: Planetary-scale geospatial analysis for everyone</article-title>
        <source>Remote sensing of Environment</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>202</volume>
        <pub-id pub-id-type="doi">10.1016/j.rse.2017.06.031</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-wickham2011ggplot2">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        </person-group>
        <article-title>ggplot2</article-title>
        <source>Wiley Interdisciplinary Reviews: Computational Statistics</source>
        <publisher-name>Wiley Online Library</publisher-name>
        <year iso-8601-date="2011">2011</year>
        <volume>3</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1002/wics.147</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-reticulate">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Ushey</surname><given-names>Kevin</given-names></name>
          <name><surname>Allaire</surname><given-names>JJ</given-names></name>
          <name><surname>Tang</surname><given-names>Yuan</given-names></name>
        </person-group>
        <source>reticulate: Interface to ’python’</source>
        <year iso-8601-date="2020">2020</year>
        <uri>https://CRAN.R-project.org/package=reticulate</uri>
      </element-citation>
    </ref>
    <ref id="ref-mapview">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Appelhans</surname><given-names>Tim</given-names></name>
          <name><surname>Detsch</surname><given-names>Florian</given-names></name>
          <name><surname>Reudenbach</surname><given-names>Christoph</given-names></name>
          <name><surname>Woellauer</surname><given-names>Stefan</given-names></name>
        </person-group>
        <source>mapview: Interactive viewing of spatial data in r</source>
        <year iso-8601-date="2020">2020</year>
        <uri>https://github.com/r-spatial/mapview</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

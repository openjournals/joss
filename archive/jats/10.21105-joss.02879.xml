<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2879</article-id>
<article-id pub-id-type="doi">10.21105/joss.02879</article-id>
<title-group>
<article-title>Bempp-cl: A fast Python based just-in-time compiling
boundary element library.</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3323-2110</contrib-id>
<string-name>Timo Betcke</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4658-2443</contrib-id>
<string-name>Matthew W. Scroggs</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Mathematics, University College
London</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Engineering, University of
Cambridge</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-01-15">
<day>15</day>
<month>1</month>
<year>2020</year>
</pub-date>
<volume>6</volume>
<issue>59</issue>
<fpage>2879</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>OpenCL</kwd>
<kwd>boundary element method</kwd>
<kwd>partial differential equations</kwd>
<kwd>numerical analysis</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>The boundary element method (BEM) is a numerical method for
  approximating the solution of certain types of partial differential
  equations (PDEs) in homogeneous bounded or unbounded domains. The
  method finds an approximation by discretising a boundary integral
  equation that can be derived from the PDE. The mathematical background
  of BEM is covered in, for example, Steinbach
  (<xref alt="2008" rid="ref-Stein07" ref-type="bibr">2008</xref>) or
  McLean
  (<xref alt="2000" rid="ref-McLean" ref-type="bibr">2000</xref>).
  Typical applications of BEM include electrostatic problems, and
  acoustic and electromagnetic scattering.</p>
  <p>Bempp-cl is an open-source boundary element method library that can
  be used to assemble all the standard integral kernels for Laplace,
  Helmholtz, modified Helmholtz, and Maxwell problems. The library has a
  user-friendly Python interface that allows the user to use BEM to
  solve a variety of problems, including problems in electrostatics,
  acoustics and electromagnetics.</p>
  <p>Bempp-cl began life as BEM++, and was a Python library with a C++
  computational core. The ++ slowly changed into pp as functionality
  gradually moved from C++ to Python with only a few core routines
  remaining in C++. Bempp-cl is the culmination of efforts to fully move
  to Python, and is an almost complete rewrite of Bempp.</p>
  <p>For each of the applications mentioned above, the boundary element
  method involves approximating the solution of a partial differential
  equation (Laplace‚Äôs equation, the Helmholtz equation, and Maxwell‚Äôs
  equations respectively) by writing the problem in boundary integral
  form, then discretising. For example, we could calculate the scattered
  field due to an electromagnetic wave colliding with a series of
  screens by solving where <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{E}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="bold"><mml:mi>ùêÑ</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>
  is the sum of a scattered field <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{E}^\text{s}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mstyle mathvariant="bold"><mml:mi>ùêÑ</mml:mi></mml:mstyle><mml:mtext mathvariant="normal">s</mml:mtext></mml:msup></mml:math></alternatives></inline-formula>
  and an incident field <inline-formula><alternatives>
  <tex-math><![CDATA[\mathbf{E}^\text{inc}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msup><mml:mstyle mathvariant="bold"><mml:mi>ùêÑ</mml:mi></mml:mstyle><mml:mtext mathvariant="normal">inc</mml:mtext></mml:msup></mml:math></alternatives></inline-formula>,
  and <inline-formula><alternatives>
  <tex-math><![CDATA[\boldsymbol{\nu}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="bold"><mml:mi>ùõé</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>
  is the direction normal to the screen. (Additionally, we must impose
  the Silver‚ÄìM√ºller radiation condition to ensure that the problem has a
  unique solution.) This problem is solved, and the full method is
  derived, in one of the tutorials available on the Bempp website
  (<xref alt="Betcke &amp; Scroggs, 2020a" rid="ref-Bempp-maxwell-example" ref-type="bibr">Betcke
  &amp; Scroggs, 2020a</xref>). The solution to this problem is shown
  below.</p>
  <fig>
    <caption><p>An electromagnetic wave scattering off three
    screens.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="maxwell_sol.png" xlink:title="" />
  </fig>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Bempp-cl provides a comprehensive collection of routines for the
  assembly of boundary integral operators to solve a wide range of
  relevant application problems. It contains an operator algebra that
  allows a straight-forward implementation of complex operator
  preconditioned systems of boundary integral equations
  (<xref alt="Betcke et al., 2020" rid="ref-operatoralg" ref-type="bibr">Betcke
  et al., 2020</xref>) and in particular implements everything that is
  required for Calder√≥n preconditioned Maxwell
  (<xref alt="Scroggs et al., 2017" rid="ref-maxwellbempp" ref-type="bibr">Scroggs
  et al., 2017</xref>) problems. Bempp-cl uses PyOpenCL
  (<xref alt="Kl√∂ckner et al., 2012" rid="ref-pyopencl" ref-type="bibr">Kl√∂ckner
  et al., 2012</xref>) to just-in-time compile its computational kernels
  on a wide range of CPU and GPU devices and modern architectures.
  Alternatively, a fallback Numba implementation is provided.</p>
  <p>OpenCL is used as it is able to compile C-based kernels to run on a
  wide range of CPU and GPU devices, without the need to write device
  specific code. Numba is offered as an alternative as it is easily
  available on all platforms and provides a version of the library that
  is significantly faster than using pure Python.</p>
  <p>Bempp-cl is aimed at those interested in using boundary element
  method to solve problems, particularly those from a mathematical
  background. The syntax of the library is designed to closely resemble
  the boundary integral representation of the problem being solved,
  making the implementation of a problem simple once this representation
  is known.</p>
  <p>There are only a small number of alternative boundary element
  method softwares available. The most popular is BETL
  (<xref alt="Hiptmair &amp; Kielhorn, n.d." rid="ref-BETL" ref-type="bibr">Hiptmair
  &amp; Kielhorn, n.d.</xref>), a C++ template library that is available
  for free for academic use only. As a Python library, Bempp-cl is
  easier to interface with other popular libraries with Python
  interfaces‚Äîfor example, is can be used alongside the finite element
  method library FEniCS
  (<xref alt="Logg et al., 2012" rid="ref-fenicsbook" ref-type="bibr">Logg
  et al., 2012</xref>) to solve coupled finite and boundary element
  problems
  (<xref alt="Betcke &amp; Scroggs, {2021 (accessed 18 February 2021)}" rid="ref-fembemexample" ref-type="bibr">Betcke
  &amp; Scroggs, {2021 (accessed 18 February 2021)}</xref>). Bempp-cl
  also benefits from being fully open source library and available under
  an MIT license. A number of other libraries exist designed for
  specific applications, such as PyGBe for biomolecular electrostatics
  (<xref alt="Cooper et al., 2016" rid="ref-PyGBe" ref-type="bibr">Cooper
  et al., 2016</xref>) and abem for acoustics
  (<xref alt="Jargstorff, n.d." rid="ref-abem" ref-type="bibr">Jargstorff,
  n.d.</xref>). Bempp-cl can be used for a much wider range of problems
  than these specialised libraries.</p>
</sec>
<sec id="an-overview-of-bempp-features">
  <title>An overview of Bempp features</title>
  <p>Bempp-cl is divided into two parts:
  <monospace>bempp.api</monospace> and
  <monospace>bempp.core</monospace>. The user interface of the library
  is contained in <monospace>bempp.api</monospace>. The core assembly
  routines of the library are contained in
  <monospace>bempp.core</monospace>. The majority of users of Bempp-cl
  are unlikely to need to directly interact with the functionality in
  <monospace>bempp.core</monospace>.</p>
  <p>There are five main steps that are commonly taken when solving a
  problem with BEM:</p>
  <list list-type="order">
    <list-item>
      <p>First a surface grid (or mesh) must be created on which to
      solve the problem.</p>
    </list-item>
    <list-item>
      <p>Finite dimensional function spaces are defined on this
      grid.</p>
    </list-item>
    <list-item>
      <p>Boundary integral operators acting on the function spaces are
      defined.</p>
    </list-item>
    <list-item>
      <p>The operators are discretised and the resulting linear systems
      solved.</p>
    </list-item>
    <list-item>
      <p>Domain potentials and far field operators can be used to
      evaluate the solution away from the boundary.</p>
    </list-item>
  </list>
  <p>Bempp-cl provides routines that implement each of these steps.</p>
  <sec id="grid-interface">
    <title>Grid Interface</title>
    <p>The submodule <monospace>bempp.api.shapes</monospace> contains
    the definitions of a number of shapes. From these, grids with
    various element sizes can be created internally using Gmsh
    (<xref alt="Geuzaine &amp; Remacle, 2009" rid="ref-gmsh" ref-type="bibr">Geuzaine
    &amp; Remacle, 2009</xref>). Alternatively, meshes can be imported
    from many formats using the meshio library
    (<xref alt="Schl√∂mer &amp; contributors, n.d." rid="ref-meshio" ref-type="bibr">Schl√∂mer
    &amp; contributors, n.d.</xref>). Bempp-cl currently only supports
    flat triangle based surface meshes. Higher-order triangular meshes
    may be supported in the future.</p>
  </sec>
  <sec id="function-spaces">
    <title>Function Spaces</title>
    <p>Bempp-cl provides piecewise constant and piecewise linear
    (continuous and discontinuous) function spaces for solving scalar
    problems. For Maxwell problems, Bempp-cl can create
    Rao‚ÄìWilton‚ÄìGlisson
    (<xref alt="Rao et al., 1982" rid="ref-rwg" ref-type="bibr">Rao et
    al., 1982</xref>) div-conforming spaces and N√©d√©lec
    (<xref alt="N√©d√©lec, 1980" rid="ref-nedelec" ref-type="bibr">N√©d√©lec,
    1980</xref>) curl-conforming spaces. In addition to these, Bempp-cl
    can also generate constant and linear spaces on the barycentric dual
    grid as well as Buffa‚ÄìChristiansen div-conforming spaces, as
    described in Buffa &amp; Christiansen
    (<xref alt="2007" rid="ref-bc" ref-type="bibr">2007</xref>). These
    spaces can all be created using the
    <monospace>bempp.api.function_space</monospace> command.</p>
  </sec>
  <sec id="boundary-operators">
    <title>Boundary operators</title>
    <p>Boundary operators for Laplace, Helmholtz, modified Helmholtz and
    Maxwell problems can be found in the
    <monospace>bempp.api.operators.boundary</monospace> submodule, as
    well as sparse identity operators. For Laplace and Helmholtz
    problems, Bempp-cl can create single layer, double layer, adjoint
    double layer and hypersingular operators. For Maxwell problems, both
    electric field and magnetic field operators can be used.</p>
  </sec>
  <sec id="discretisation-and-solvers">
    <title>Discretisation and solvers</title>
    <p>Operators are assembled using OpenCL or Numba based dense
    assembly, or via interface to fast multipole methods. Internally,
    Bempp-cl uses PyOpenCL
    (<xref alt="Kl√∂ckner et al., 2012" rid="ref-pyopencl" ref-type="bibr">Kl√∂ckner
    et al., 2012</xref>) to just-in-time compile its operator assembly
    routines on a wide range of CPU and GPU compute devices. On systems
    without OpenCL support, Numba
    (<xref alt="Lam et al., 2015" rid="ref-numba" ref-type="bibr">Lam et
    al., 2015</xref>) is used to just-in-time compile Python-based
    assembly kernels, giving a slower but still viable alternative to
    OpenCL.</p>
    <p>Bempp-cl provides an interface to the Exafmm-t library
    (<xref alt="Wang et al., 2020" rid="ref-exafmm" ref-type="bibr">Wang
    et al., 2020</xref>) for faster assembly of larger problems with
    lower memory requirements using the fast multipole method (FMM). The
    interface to Exafmm-t is written in a generic way so that other FMM
    libraries or alternative matrix compression techniques could be used
    in future.</p>
    <p>The submodule <monospace>bempp.api.linalg</monospace> contains
    wrapped versions of SciPy‚Äôs
    (<xref alt="Jones et al., 2001" rid="ref-scipy" ref-type="bibr">Jones
    et al., 2001</xref>) LU, CG, and GMRes solvers. By using SciPy‚Äôs
    <monospace>LinearOperator</monospace> interface, Bempp-cl‚Äôs boundary
    operators can easily be used with other iterative solvers.</p>
  </sec>
  <sec id="potential-and-far-field-operators">
    <title>Potential and far field operators</title>
    <p>Potential and far field operators for the evaluation at points in
    the domain or the asymptotic behavior at infinity are included in
    the <monospace>bempp.api.operators.potential</monospace> and
    <monospace>bempp.api.operators.far_field</monospace> submodules.</p>
  </sec>
  <sec id="further-information">
    <title>Further information</title>
    <p>Full documentation of the library, including a number of example
    Jupyter notebooks, can be found online at
    <monospace>bempp.com</monospace> and in the in-development Bempp
    Handbook
    (<xref alt="Betcke &amp; Scroggs, 2020b" rid="ref-bempphandbook" ref-type="bibr">Betcke
    &amp; Scroggs, 2020b</xref>).</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to thank the Exafmm team
  (<xref alt="Wang et al., 2020" rid="ref-exafmm" ref-type="bibr">Wang
  et al., 2020</xref>), and here in particular Lorena Barba and Tingyu
  Wang for their efforts to integrate Exafmm-t into Bempp-cl. We further
  thank the HyENA team
  (<xref alt="Messner et al., 2020" rid="ref-hyena" ref-type="bibr">Messner
  et al., 2020</xref>) at Graz University of Technology who provided C++
  definitions of core numerical quadrature rules, which were translated
  to Python as part of the development effort for Bempp-cl.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-pyopencl">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kl√∂ckner</surname><given-names>Andreas</given-names></name>
          <name><surname>Pinto</surname><given-names>Nicolas</given-names></name>
          <name><surname>Lee</surname><given-names>Yunsup</given-names></name>
          <name><surname>Catanzaro</surname><given-names>B.</given-names></name>
          <name><surname>Ivanov</surname><given-names>Paul</given-names></name>
          <name><surname>Fasih</surname><given-names>Ahmed</given-names></name>
        </person-group>
        <article-title>PyCUDA and PyOpenCL: A scripting-based approach to GPU run-time code generation</article-title>
        <source>Parallel Computing</source>
        <year iso-8601-date="2012">2012</year>
        <volume>38</volume>
        <issue>3</issue>
        <issn>0167-8191</issn>
        <pub-id pub-id-type="doi">10.1016/j.parco.2011.09.001</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-gmsh">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Geuzaine</surname><given-names>C.</given-names></name>
          <name><surname>Remacle</surname><given-names>J.-F.</given-names></name>
        </person-group>
        <article-title>Gmsh: A three-dimensional finite element mesh generator with built-in pre- and post-processing facilities</article-title>
        <source>International Journal for Numerical Methods in Engineering</source>
        <year iso-8601-date="2009">2009</year>
        <volume>79</volume>
        <issue>11)</issue>
        <pub-id pub-id-type="doi">10.1002/nme.2579</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-meshio">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Schl√∂mer</surname><given-names>Nico</given-names></name>
          <name><surname>contributors</surname></name>
        </person-group>
        <article-title>Meshio: I/O for mesh files</article-title>
        <uri>https://github.com/nschloe/meshio</uri>
      </element-citation>
    </ref>
    <ref id="ref-rwg">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Rao</surname><given-names>S. M.</given-names></name>
          <name><surname>Wilton</surname><given-names>D. R.</given-names></name>
          <name><surname>Glisson</surname><given-names>A. W.</given-names></name>
        </person-group>
        <article-title>Electromagnetic scattering by surfaces of arbitrary shape</article-title>
        <source>IEEE Transactions on antennas and propagation</source>
        <year iso-8601-date="1982">1982</year>
        <volume>30</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1109/TAP.1982.1142818</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-nedelec">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>N√©d√©lec</surname><given-names>Jean-Claude</given-names></name>
        </person-group>
        <article-title>Mixed finite elements in \mathbb{R}^3</article-title>
        <source>Numerische Mathematik</source>
        <year iso-8601-date="1980">1980</year>
        <volume>35</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1007/BF01396415</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-bc">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Buffa</surname><given-names>Annalisa</given-names></name>
          <name><surname>Christiansen</surname><given-names>Snorre H.</given-names></name>
        </person-group>
        <article-title>A dual finite element complex on the barycentric refinement</article-title>
        <source>Mathematics of Computation</source>
        <year iso-8601-date="2007">2007</year>
        <volume>76</volume>
        <issue>260</issue>
        <pub-id pub-id-type="doi">10.1016/j.crma.2004.12.022</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-maxwellbempp">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Scroggs</surname><given-names>M. W.</given-names></name>
          <name><surname>Betcke</surname><given-names>T.</given-names></name>
          <name><surname>Burman</surname><given-names>E.</given-names></name>
          <name><surname>≈ömigaj</surname><given-names>W.</given-names></name>
          <name><surname>Wout</surname><given-names>E. van ‚Äôt</given-names></name>
        </person-group>
        <article-title>Software frameworks for integral equations in electromagnetic scattering based on calder√≥n identities</article-title>
        <source>Computers &amp; Mathematics with Applications</source>
        <year iso-8601-date="2017">2017</year>
        <volume>74</volume>
        <issue>11</issue>
        <pub-id pub-id-type="doi">10.1016/j.camwa.2017.07.049</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-numba">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Lam</surname><given-names>Siu Kwan</given-names></name>
          <name><surname>Pitrou</surname><given-names>Antoine</given-names></name>
          <name><surname>Seibert</surname><given-names>Stanley</given-names></name>
        </person-group>
        <article-title>Numba: A LLVM-based Python JIT compiler</article-title>
        <source>Proceedings of the second workshop on the LLVM compiler infrastructure in HPC</source>
        <publisher-loc>Austin, Texas</publisher-loc>
        <year iso-8601-date="2015">2015</year>
        <pub-id pub-id-type="doi">10.1145/2833157.2833162</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-exafmm">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wang</surname><given-names>Tingyu</given-names></name>
          <name><surname>Yokota</surname><given-names>Rio</given-names></name>
          <name><surname>Barba</surname><given-names>Lorena A.</given-names></name>
        </person-group>
        <article-title>Exafmm-t</article-title>
        <source>Submitted to Journal of Open Source Software</source>
        <publisher-name>The Open Journal</publisher-name>
        <year iso-8601-date="2020">2020</year>
      </element-citation>
    </ref>
    <ref id="ref-hyena">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Messner</surname><given-names>M.</given-names></name>
          <name><surname>Urthaler</surname><given-names>P.</given-names></name>
          <name><surname>Rammerstorfer</surname><given-names>F.</given-names></name>
        </person-group>
        <article-title>HyENA: Hyperbolic and elliptic numerical analysis</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://www.tugraz.at/en/institutes/am-bm/research/software/</uri>
      </element-citation>
    </ref>
    <ref id="ref-scipy">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Jones</surname><given-names>Eric</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>SciPy: Open source scientific tools for Python</article-title>
        <year iso-8601-date="2001">2001</year>
        <uri>http://www.scipy.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-bempphandbook">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Betcke</surname><given-names>Timo</given-names></name>
          <name><surname>Scroggs</surname><given-names>Matthew W.</given-names></name>
        </person-group>
        <article-title>The Bempp handbook</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://bempp.com/handbook/</uri>
      </element-citation>
    </ref>
    <ref id="ref-Bempp-maxwell-example">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Betcke</surname><given-names>Timo</given-names></name>
          <name><surname>Scroggs</surname><given-names>Matthew W.</given-names></name>
        </person-group>
        <article-title>Bempp tutorial: Electromagnetic scattering from flat screens</article-title>
        <year iso-8601-date="2020">2020</year>
        <uri>https://nbviewer.jupyter.org/github/bempp/bempp-cl/blob/master/notebooks/maxwell/maxwell_screen.ipynb</uri>
      </element-citation>
    </ref>
    <ref id="ref-Stein07">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Steinbach</surname><given-names>Olaf</given-names></name>
        </person-group>
        <source>Numerical approximation methods for elliptic boundary value problems</source>
        <publisher-name>Springer-Verlag</publisher-name>
        <year iso-8601-date="2008">2008</year>
        <pub-id pub-id-type="doi">10.1007/978-0-387-68805-3</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-McLean">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>McLean</surname><given-names>William</given-names></name>
        </person-group>
        <source>Strongly elliptic systems and boundary integral equations</source>
        <publisher-name>Cambridge University Press</publisher-name>
        <year iso-8601-date="2000">2000</year>
      </element-citation>
    </ref>
    <ref id="ref-operatoralg">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Betcke</surname><given-names>Timo</given-names></name>
          <name><surname>Scroggs</surname><given-names>Matthew W.</given-names></name>
          <name><surname>≈ömigaj</surname><given-names>Wojciech</given-names></name>
        </person-group>
        <article-title>Product algebras for Galerkin discretisations of boundary integral operators and their applications</article-title>
        <source>ACM Transactions on Mathematical Software</source>
        <year iso-8601-date="2020">2020</year>
        <volume>46</volume>
        <issue>1, 46</issue>
        <pub-id pub-id-type="doi">10.1145/3368618</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-PyGBe">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Cooper</surname><given-names>Christopher D.</given-names></name>
          <name><surname>Clementi</surname><given-names>Natalia C.</given-names></name>
          <name><surname>Forsyth</surname><given-names>Gilbert</given-names></name>
          <name><surname>Barba</surname><given-names>Lorena A.</given-names></name>
        </person-group>
        <article-title>PyGBe: Python, GPUs and boundary elements for biomolecular electrostatics</article-title>
        <source>Journal of Open Source Software</source>
        <publisher-name>The Open Journal</publisher-name>
        <year iso-8601-date="2016">2016</year>
        <volume>1</volume>
        <issue>4</issue>
        <uri>https://doi.org/10.21105/joss.00043</uri>
        <pub-id pub-id-type="doi">10.21105/joss.00043</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-BETL">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <name><surname>Hiptmair</surname><given-names>R.</given-names></name>
          <name><surname>Kielhorn</surname><given-names>L.</given-names></name>
        </person-group>
        <article-title>BETL ‚Äì a generic boundary element template library</article-title>
        <publisher-name>Seminar for Applied Mathematics, ETH Z√ºrich</publisher-name>
        <uri>ftp://ftp.sam.math.ethz.ch/pub/sam-reports/reports/reports2012/2012-36.pdf</uri>
      </element-citation>
    </ref>
    <ref id="ref-abem">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Jargstorff</surname><given-names>Frank</given-names></name>
        </person-group>
        <article-title>Acoustic boundary element method (abem)</article-title>
        <uri>https://github.com/fjargsto/abem</uri>
      </element-citation>
    </ref>
    <ref id="ref-fembemexample">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Betcke</surname><given-names>Timo</given-names></name>
          <name><surname>Scroggs</surname><given-names>Matthew W.</given-names></name>
        </person-group>
        <article-title>Simple FEM-BEM coupling for the Helmholtz equation with FEniCSx</article-title>
      </element-citation>
    </ref>
    <ref id="ref-fenicsbook">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Logg</surname><given-names>Anders</given-names></name>
          <name><surname>Mardal</surname><given-names>Kent-Andre</given-names></name>
          <name><surname>Wells</surname><given-names>Garth N.</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <source>Automated solution of differential equations by the finite element method</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2012">2012</year>
        <isbn>978-3-642-23098-1</isbn>
        <pub-id pub-id-type="doi">10.1007/978-3-642-23099-8</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1486</article-id>
<article-id pub-id-type="doi">10.21105/joss.01486</article-id>
<title-group>
<article-title>FRIDGe: Fast Reactor Input Deck Generator</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Ryan H. Stewart</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Oregon State University, 1500 SW Jefferson St. Corvallis,
OR 97331</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-05-08">
<day>8</day>
<month>5</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>40</issue>
<fpage>1486</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>nuclear engineering</kwd>
<kwd>reactor design</kwd>
<kwd>fast reactor</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Nuclear power currently produces the largest amount of carbon-free
  energy in the world. Despite this, there is often hesitation to
  utilizing nuclear energy due to significant accidents such as Three
  Mile Island and Fukushima. During the early 2000’s the concept of
  Generation IV (Gen IV) reactors arose to tackle many of the
  systemically negative perceptions surrounding nuclear power. Gen IV
  reactors are designs which epitomize safety, proliferation resistance,
  and sustainable fuel usage
  (<xref alt="Behar, 2014" rid="ref-GenIV" ref-type="bibr">Behar,
  2014</xref>). There are currently six different Gen IV reactors
  selected for research and development; two of these designs are are
  liquid metal fast reactors (LMFR). LMFRs utilize liquid metal as the
  primary coolant (typically sodium, lead, or lead-bismuth) and rely on
  fast neutrons to drive the chain reaction. Often times this is
  advantageous for reactors to breed fuel for a closed fuel cycle, or
  burn spent fuel from light water reactors. LMFRs have been built in
  reduced scales in the past to determine operating characteristics and
  provide experimental data for reactor safety in accident scenarios. In
  the past, reactor designers relied on hand calculations and
  experimental facilities to build full scale reactor cores. Due to the
  cost of building new experimental facilities and an increase in
  computational power, simulations are heavily relied on to support the
  reactor design process.</p>
  <p>Reactor core design for nuclear engineers is an extremely complex
  topic which requires skills in multiple areas of study such as
  neutronics, thermal hydraulics, and materials performance. The first
  step in core design typically starts with examining the neutronic
  viability. This process involves finding appropriate materials,
  geometries, and core configurations which will achieve a critical
  configuration. Software models are used to test the various
  configurations to determine their applicability to the design problem.
  The software to perform such complex calculations is often
  sophisticated and requires detailed user knowledge to create accurate
  models. Utilizing software alleviates solving the fundamental physics
  associated with core design, but comes at the cost of learning the
  nuances of software suites.</p>
  <p>MCNP is a commonly used neutron transport code for radiation
  shielding, criticality measurements, benchmark measurements, and
  reactor core design
  (<xref alt="Goorley, 2012" rid="ref-Goo2012" ref-type="bibr">Goorley,
  2012</xref>). The code suite is extremely versatile and allows the
  user to incorporate multiple physical phenomena, given the user’s
  ability to navigate it. MCNP builds models in a traditional text-based
  input file, which includes building surfaces, materials, and defining
  what materials are present inside each surface. Building simple
  geometries is a relatively straight forward process, whereas more
  complex configurations, such as a LMFR assembly or core, requires
  additional finesse. This requires the designer to shift their focus
  from design to input file management, which takes away from their
  ability to critically think about the core. Building input files for
  MCNP for large systems by hand is both time consuming and error prone.
  This is exemplified when trying to model a heterogeneous core where
  the input deck can grow exceedingly large (over 10,000 lines). At this
  size, it is unrealistic to perform any type of design iteration by
  manually adjusting design parameters and expecting a functioning model
  free of errors.</p>
  <p>While others have contriubted to reducing the learning curve of
  MCNP, most of them focus on pre/post-processing tasks associated with
  MCNP. For example, PyNE
  (<xref alt="Scopatz et al., 2012" rid="ref-Scopatz2012b" ref-type="bibr">Scopatz
  et al., 2012</xref>) and the MCNPTools Package
  (<xref alt="Solomon et al., 2017" rid="ref-Solomon2017" ref-type="bibr">Solomon
  et al., 2017</xref>) help users streamline common tasks like scraping
  MCNP output files. While these help users manage data associated with
  MCNP, a code suite which focuses on reactor design provides a resource
  for initial model creation. FRIDGe was created to help alleviate the
  process of learning additional code nomenclature when designing,
  modeling, and testing fast reactor concepts. The only inputs the user
  focuses on are directly related to the core design process and create
  a level of abstraction from the input deck generation. This allows the
  user to focus on what aspects of the design affect the reactor, rather
  than input file creation and management.</p>
  <p>FRIDGe currently houses the capability to create input files, for a
  single assembly or full core, for the MCNP. This process is done by
  creating a series of YAML data files for elements, materials,
  assemblies, and cores
  (<xref alt="Ben-Kiki et al., 2009" rid="ref-YAML" ref-type="bibr">Ben-Kiki
  et al., 2009</xref>). The element file allows the user to create
  elements from the Chart of the Nuclides for use in materials. The
  material file allows the user to create custom materials (fuel,
  cladding, coolant, poisons, etc.) that the model will require. The
  assembly file is used for individual assemblies, where the user can
  specify the assembly type, geometry, and materials used. Currently a
  user can build fuel or smear assemblies. Fuel assemblies encompass two
  reflector regions, a plenum region, and a spatially heterogeneous fuel
  region which can describe driver or blanket fuel assemblies. Blank
  assemblies are a single region, where the user can specify a smear
  material to describe an assembly type (i.e. reflectors, coolant
  assemblies). The core file is used to determine the assemblies
  present, their position within the core, and general core data such as
  the coolant type, and vessel material. The culmination of these data
  files allows the user to create a single FRIDGe input file. The input
  file has general setting for the reactor model and any additional
  features to be applied to the model. For example, the user can define
  the temperature and cross-section set used, which can quantify the
  impact of Doppler Broadening or cross-section set sensitivity. Along
  with this, the coolant in the core can be voided to simulate a loss of
  coolant accident to determine the void coefficient. Once the model has
  been created, the user can take the input file and run MCNP to gather
  the appropriate reactor physics.</p>
</sec>
<sec id="full-assembly-example">
  <title>Full Assembly Example</title>
  <p>To illustrate the versatility of FRIDGe, it was used to create a
  simplified driver assembly from the Experimental Breeder Reactor II
  (EBR-II). All of the dimensions were taken from the International
  Handbook of Evaluated Reactor Physics benchmark evaluation of EBR-II
  (<xref alt="Lum et al., 2018" rid="ref-Lum2018" ref-type="bibr">Lum et
  al., 2018</xref>). The two figures below show an axial and plane view
  of the assembly, which describes each region of the assembly.</p>
  <p>The assembly built by FRIDGe closely resembles the typical driver
  assembly built in the benchmark evaluation. There are slight
  differences in design preference, for example, the benchmark
  explicitly models the wire wrap and plenum, whereas FRIDGe homogenizes
  these regions. FRIDGe was built as a tool for LMFR core designers who
  need the ability to model an assembly or full core with relative ease.
  Where this tool will allow a core designer to rapidly build, run, and
  iterate on a reactor design without being bogged down by input deck
  generation.</p>
  <p><inline-graphic mimetype="image" mime-subtype="jpeg" xlink:href="EBRII_Assembly.jpg" />
  <inline-graphic mimetype="image" mime-subtype="jpeg" xlink:href="EBRII_Fuel.jpg" /></p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Goo2012">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Goorley</surname><given-names>T.</given-names></name>
        </person-group>
        <article-title>Initial MCNP6 release overview</article-title>
        <source>Nuclear Technology</source>
        <publisher-name>Taylor &amp; Francis</publisher-name>
        <year iso-8601-date="2012">2012</year>
        <volume>180</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.13182/NT11-135</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Lum2018">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Lum</surname><given-names>E.</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <source>Evaluation of Run 138B at Experimental Reactor II, A Prototypic Liquid Metal Fast Breeder Reactor</source>
        <publisher-name>International Reactor Physics Experiments Evaluation Project</publisher-name>
        <year iso-8601-date="2018">2018</year>
      </element-citation>
    </ref>
    <ref id="ref-GenIV">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <name><surname>Behar</surname><given-names>Christophe</given-names></name>
        </person-group>
        <article-title>Technology Roadmap Update for Generation IV Nuclear Energy Systems</article-title>
        <publisher-name>OECD Nuclear Energy Agency</publisher-name>
        <year iso-8601-date="2014-01">2014</year><month>01</month>
        <uri>https://www.gen-4.org/gif/upload/docs/application/pdf/2014-03/gif-tru2014.pdf</uri>
      </element-citation>
    </ref>
    <ref id="ref-YAML">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <name><surname>Ben-Kiki</surname><given-names>Orsen</given-names></name>
          <name><surname>Evans</surname><given-names>Clark</given-names></name>
          <name><surname>Net</surname><given-names>Ingy dot</given-names></name>
        </person-group>
        <article-title>YAML: YAML Ain’t Markup Language Version 1.2</article-title>
        <year iso-8601-date="2009-10">2009</year><month>10</month>
        <uri>https://yaml.org/spec/cvs/spec.pdf</uri>
      </element-citation>
    </ref>
    <ref id="ref-Solomon2017">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <name><surname>Solomon</surname><given-names>Clell J. (CJ)</given-names></name>
          <name><surname>Bates</surname><given-names>Cameron</given-names></name>
          <name><surname>Kulesza</surname><given-names>Joel</given-names></name>
        </person-group>
        <article-title>The MCNPTools Package: Installation and Use</article-title>
        <publisher-name>Los Alamos National Laboratory</publisher-name>
        <year iso-8601-date="2017-03">2017</year><month>03</month>
      </element-citation>
    </ref>
    <ref id="ref-Scopatz2012b">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Scopatz</surname><given-names>Anthony</given-names></name>
          <name><surname>Romano</surname><given-names>Paul K.</given-names></name>
          <name><surname>Wilson</surname><given-names>Paul P. H.</given-names></name>
          <name><surname>Huff</surname><given-names>Kathryn D.</given-names></name>
        </person-group>
        <article-title>PyNE: Python for Nuclear Engineering</article-title>
        <source>Am. Nuc. Soc. Winter meeting 2012</source>
        <publisher-loc>San Diego, CA, USA</publisher-loc>
        <year iso-8601-date="2012-11">2012</year><month>11</month>
        <volume>107</volume>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

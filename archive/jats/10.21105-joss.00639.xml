<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">639</article-id>
<article-id pub-id-type="doi">10.21105/joss.00639</article-id>
<title-group>
<article-title>LearnSAT: A SAT Solver for Education</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-2091-5107</contrib-id>
<string-name>Mordechai (Moti) Ben-Ari</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Weizmann Institute of Science</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2018-02-25">
<day>25</day>
<month>2</month>
<year>2018</year>
</pub-date>
<volume>3</volume>
<issue>24</issue>
<fpage>639</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>SAT solving</kwd>
<kwd>computer science education</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Many problems can be solved by encoding them as formulas in
  propositional logic which are checked for satisfiability by a program
  called a SAT solver. If found, a satisfying assignment provides the
  answer to the problem. Donald Knuth
  (<xref alt="Knuth, 2015" rid="ref-knuth-sat" ref-type="bibr">Knuth,
  2015</xref>) calls SAT solvers a <italic>killer app</italic> because
  diverse practical problems can be solved by a single,
  highly-optimized, program. Despite their importance, SAT solvers are
  described only in research papers. LearnSAT is designed for teaching
  and learning SAT solving by providing a concise, well-documented,
  implementation, fine-grained tracing (both textual and graphical) of
  the algorithms and a detailed tutorial.</p>
  <p>LearnSAT implements the core algorithms of modern SAT solvers
  (<xref alt="Biere et al., 2009" rid="ref-SAT" ref-type="bibr">Biere et
  al., 2009</xref>): the Davis-Putnam-Logemann-Loveland (DPLL) algorithm
  with conflict-driven clause learning (CDCL) and non-chronological
  backtracking (NCB). CDCL is implemented by backwards resolution from a
  conflict clause to a unique implication point (UIP)
  (<xref alt="Marques-Silva et al., 2009" rid="ref-mlm" ref-type="bibr">Marques-Silva
  et al., 2009</xref>). It is also possible to compute dominators in the
  implication graph. In addition, two heuristics for lookahead are
  implemented.</p>
  <p>The user of LearnSAT can choose any subset of 24 display options in
  order to tailor the output to a specific learning context. The display
  options include elementary steps like decision assignments, unit
  propagations and identifying conflict clauses, as well as the advanced
  steps of CDCL: the resolution steps used to obtain a learned clause
  and the search for UIPs.</p>
  <p>LearnSAT can generate two types of graphs that are rendered using
  the <monospace>dot</monospace> tool: trees showing the search through
  the assignments and implication graphs that display the process for
  learning clauses from conflicts.</p>
  <p>LearnSAT is implemented in Prolog and was developed using
  <monospace>SWI-Prolog</monospace> which available for Windows, MacOSX
  and Linux, although almost all the source code is compatible with the
  standard.</p>
  <p>Three documents are included in the project: *
  <monospace>learnsat-overview</monospace> An overview of LearnSAT. *
  <monospace>learnsat-ug</monospace> Userâ€™s guide and software
  documentation. * <monospace>learnsat-tutorial</monospace> Tutorial on
  SAT solving using LearnSAT.</p>
  <p>About 20 examples are included of encodings of problems that can be
  solved by LearnSAT.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-knuth-sat">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Knuth</surname><given-names>D. E.</given-names></name>
        </person-group>
        <source>The art of computer programming, volume 4, fascicle 6: satisfiability</source>
        <publisher-name>Pearson</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <isbn>978-0-1343-9760-3</isbn>
      </element-citation>
    </ref>
    <ref id="ref-SAT">
      <element-citation publication-type="book">
        <source>Handbook of satisfiability</source>
        <person-group person-group-type="editor">
          <name><surname>Biere</surname><given-names>A.</given-names></name>
          <name><surname>Heule</surname><given-names>M.</given-names></name>
          <name><surname>Maaren</surname><given-names>H. Van</given-names></name>
          <name><surname>Walsh</surname><given-names>T.</given-names></name>
        </person-group>
        <publisher-name>IOS Press</publisher-name>
        <year iso-8601-date="2009">2009</year>
        <isbn>978-1-60750-376-7</isbn>
      </element-citation>
    </ref>
    <ref id="ref-mlm">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Marques-Silva</surname><given-names>J. P.</given-names></name>
          <name><surname>Lynce</surname><given-names>I.</given-names></name>
          <name><surname>Malik</surname><given-names>S.</given-names></name>
        </person-group>
        <article-title>Conflict-driven clause learning SAT solvers</article-title>
        <source>Handbook of satisfiability</source>
        <person-group person-group-type="editor">
          <name><surname>Biere</surname><given-names>A.</given-names></name>
          <name><surname>Heule</surname><given-names>M.</given-names></name>
          <name><surname>Maaren</surname><given-names>H. Van</given-names></name>
          <name><surname>Walsh</surname><given-names>T.</given-names></name>
        </person-group>
        <publisher-name>IOS Press</publisher-name>
        <year iso-8601-date="2009">2009</year>
        <isbn>978-1-60750-376-7</isbn>
        <pub-id pub-id-type="doi">10.3233/978-1-58603-929-5-131</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

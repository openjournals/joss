<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1912</article-id>
<article-id pub-id-type="doi">10.21105/joss.01912</article-id>
<title-group>
<article-title>ScenTrees.jl: A Julia Package for Generating Scenario
Trees and Scenario Lattices for Multistage Stochastic
Programming</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3679-4442</contrib-id>
<string-name>Kipngeno Benard Kirui</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-8876-2429</contrib-id>
<string-name>Alois Pichler</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<string-name>Georg Ch. Pflug</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>University of Technology, Chemnitz, Germany</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>University of Vienna</institution>
</institution-wrap>
</aff>
</contrib-group>
<volume>5</volume>
<issue>46</issue>
<fpage>1912</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Multistage stochastic programming</kwd>
<kwd>Scenario trees</kwd>
<kwd>Scenario lattices</kwd>
<kwd>Stochastic processes</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Stochastic processes have random and uncertain outcomes. Decisions
  for stochastic problems involving such processes must be made at the
  different stages of the problem. Mathematical problems with such
  uncertain parameters, described by an underlying probability
  distribution, are sometimes intractable to solve. For algorithmic
  treatment, such programs should be approximated by simpler ones, in
  the same manner as functions are represented as vectors on finite
  grids on digital computers. In most applications, these underlying
  distributions are approximated by discrete distributions with a finite
  number of scenarios, or possible realizations, for the random
  variables. This approximation procedure is often called
  <monospace>scenario generation.</monospace></p>
  <p>There is a vast literature describing different methods of scenario
  generation. Many authors including Høyland &amp; Wallace
  (<xref alt="2001" rid="ref-Hoyland2001" ref-type="bibr">2001</xref>),
  G. Ch. Pflug
  (<xref alt="2001" rid="ref-Pflug2001" ref-type="bibr">2001</xref>),
  Kovacevic &amp; Pichler
  (<xref alt="2015" rid="ref-KovacevicPichler" ref-type="bibr">2015</xref>),
  G. Ch. Pflug &amp; Pichler
  (<xref alt="2015" rid="ref-PflugPichlerDynScenarioGen" ref-type="bibr">2015</xref>)
  and G. Ch. Pflug &amp; Pichler
  (<xref alt="2016" rid="ref-PflugPichler2016" ref-type="bibr">2016</xref>)
  have addressed different approximation techniques for stochastic
  processes. But still there is no open-source implementation of the
  various algorithms in the public domain.</p>
  <p>We therefore present <monospace>ScenTrees.jl</monospace>, a
  open-source Julia
  (<xref alt="Bezanson et al., 2017" rid="ref-julia" ref-type="bibr">Bezanson
  et al., 2017</xref>) package for generating scenario trees and
  scenario lattices which can be used, for example, for multistage
  stochastic optimization problems. It allows users to represent
  possible sequences of stochastic processes in form of a
  <monospace>scenario tree</monospace> in the case of a discrete time
  stochastic process and a <monospace>scenario lattice</monospace> for
  Markovian data processes. In extension, it also provides users with a
  platform for generating new and additional trajectories in case of a
  limited data using conditional density estimation. The theory and
  design of the <monospace>ScenTrees.jl</monospace> package follows the
  concept in G. Ch. Pflug &amp; Pichler
  (<xref alt="2015" rid="ref-PflugPichlerDynScenarioGen" ref-type="bibr">2015</xref>)
  directly. It starts with an initial tree, which is a qualified guess
  by expert opinion, and uses the stochastic approximation procedure to
  improve the values on the nodes of the tree with samples form the
  stochastic process to be approximated. The transition probabilities
  from one node to another are also addressed.</p>
  <p>To assess the quality of this approximation, a distance between the
  initial distribution and its approximation is defined. Typically, we
  want an approximating tree that has a minimal distance to the original
  process. We therefore employ the
  <monospace>process distance</monospace> (also called
  <monospace>multistage distance</monospace>)
  (<xref alt="G. Ch. Pflug, 2009" rid="ref-Pflug2009" ref-type="bibr">G.
  Ch. Pflug, 2009</xref>) to quantify the quality of approximation of
  the scenario tree. The process distance extends and generalizes the
  Wasserstein distance to stochastic processes. It was analyzed by G.
  Ch. Pflug &amp; Pichler
  (<xref alt="2012" rid="ref-PflugPichler2011" ref-type="bibr">2012</xref>)
  and used by Kovacevic &amp; Pichler
  (<xref alt="2015" rid="ref-KovacevicPichler" ref-type="bibr">2015</xref>)
  directly to generate scenario trees.</p>
</sec>
<sec id="main-features-of-the-package">
  <title>Main features of the package</title>
  <p><monospace>ScenTrees.jl</monospace> is generally applicable to any
  type of stochastic process. The key features of the packages are:</p>
  <list list-type="order">
    <list-item>
      <p>Generation of scenario trees and scenario lattices from
      stochastic processes using the stochastic approximation procedure.
      Here, the branching structure of the scenario tree or the scenario
      lattice is fixed and then stochastic approximation procedure is
      used to improve/update the values of the nodes considering all the
      data available for every iteration. This improvement goes on until
      the specified number of iterations have been performed and then
      the process distance is
      calculated.<xref ref-type="fn" rid="fn1">1</xref></p>
    </list-item>
    <list-item>
      <p>Generation of scenarios based on limited data using conditional
      density estimation. In the case of a limited data with an unknown
      distribution, we employ conditional density estimation to generate
      new and different samples based on the these available
      trajectories. The newly generated samples are able to capture the
      necessary and important characteristics in the original data as
      well as patterns in the original data. These samples can thus be
      used in the stochastic approximation procedure to generate
      scenario trees or scenario
      lattices.<xref ref-type="fn" rid="fn2">2</xref></p>
    </list-item>
  </list>
  <p>Implementation details and various examples to demonstrate
  different methods can be found in the package’s
  documentation.<xref ref-type="fn" rid="fn3">3</xref></p>
  <p>The following section provides a typical example on how to use
  <monospace>ScenTrees.jl</monospace> to generate scenario trees and
  scenario lattices by combining stochastic approximation procedure and
  conditional density estimation procedure.</p>
</sec>
<sec id="example-scenario-generation-from-observed-trajectories">
  <title>Example: Scenario generation from observed trajectories</title>
  <p>Consider the following comma-separated limited data. The data has
  <inline-formula><alternatives>
  <tex-math><![CDATA[1000]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>1000</mml:mn></mml:math></alternatives></inline-formula>
  trajectories in <inline-formula><alternatives>
  <tex-math><![CDATA[5]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>5</mml:mn></mml:math></alternatives></inline-formula>
  stages. To use <monospace>ScenTrees.jl</monospace>, the first step is
  to load the package as well as the data into Julia as follows.</p>
  <code language="julia"># Load the package
julia&gt; using ScenTrees, CSV  
# Load the data from a directory                 
julia&gt; df = CSV.read(&quot;../RData.csv&quot;);
# Convert the DataFrame into a Matrix    
julia&gt; data = Matrix(df);               </code>
  <p>The following shows an example of a non-Markovian trajectory
  generated from the data using conditional density estimation by
  employing the Logistic distribution for the kernels.</p>
  <code language="julia">julia&gt; Example = kernel_scenarios(data, Logistic; Markovian = false)()
[1.5595,0.8150,1.5058,2.6475,4.6137]</code>
  <p>The generated data has a length equal to the number of columns of
  the original data. These generated trajectories are the ones we will
  use to approximate a scenario tree and a scenario lattice in the
  following sections.</p>
  <sec id="approximation-with-a-scenario-tree">
    <title>Approximation with a scenario tree</title>
    <p>We want to approximate the above data using a scenario tree with
    a branching vector <monospace>(1,3,3,3,2)</monospace> and
    <monospace>1,000,000</monospace> iterations as follows.</p>
    <code language="julia">julia&gt; kernTree = tree_approximation!(Tree([1,3,3,3,2],1),
                  kernel_scenarios(data, Logistic; Markovian = false),
                  100000,2,2);
julia&gt; tree_plot(kernTree)
julia&gt; savefig(&quot;rwdataTree.pdf&quot;)</code>
    <fig>
      <caption><p>Tree Approximation from Kernel Density
      Samples</p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="images/rwdataTree.pdf" xlink:title="" />
    </fig>
    <p>The number of possible trajectories in the scenario tree equals
    the number of leaves in that scenario tree. In the above scenario
    tree, there are <inline-formula><alternatives>
    <tex-math><![CDATA[54]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>54</mml:mn></mml:math></alternatives></inline-formula>
    possible trajectories since the number of leaves is
    <inline-formula><alternatives>
    <tex-math><![CDATA[(1\times3\times3\times3\times2) = 54]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>1</mml:mn><mml:mo>×</mml:mo><mml:mn>3</mml:mn><mml:mo>×</mml:mo><mml:mn>3</mml:mn><mml:mo>×</mml:mo><mml:mn>3</mml:mn><mml:mo>×</mml:mo><mml:mn>2</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>54</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>.
    The algorithm returns the multistage distance between the above
    scenario tree and the original stochastic process as
    <inline-formula><alternatives>
    <tex-math><![CDATA[d=0.23092]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>0.23092</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>.</p>
  </sec>
  <sec id="approximation-with-a-scenario-lattice">
    <title>Approximation with a scenario lattice</title>
    <p>Consider a scenario lattice with a branching vector
    <inline-formula><alternatives>
    <tex-math><![CDATA[(1,3,4,5,6)]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>4</mml:mn><mml:mo>,</mml:mo><mml:mn>5</mml:mn><mml:mo>,</mml:mo><mml:mn>6</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>.
    Clearly, this scenario lattice has <inline-formula><alternatives>
    <tex-math><![CDATA[5]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>5</mml:mn></mml:math></alternatives></inline-formula>
    stages as shown by the number of elements in the branching vector,
    which is equal to number of columns in the data. We consider
    <inline-formula><alternatives>
    <tex-math><![CDATA[1,000,000]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>000</mml:mn><mml:mo>,</mml:mo><mml:mn>000</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
    iterations for the stochastic approximation algorithm and
    <monospace>r=2</monospace> parameter for the multistage distance. To
    generate this scenario lattice, we need Markovian trajectories and
    therefore we set <monospace>Markovian = true</monospace> to specify
    that the trajectories to be generated are Markovian, which is
    different for scenario trees.</p>
    <code language="julia">julia&gt; rwdataLattice = lattice_approximation([1,3,4,5,6],
                       kernel_scenarios(data, Logistic; Markovian=true),
                      1000000, 2);
julia&gt; plot_lattice(rwdataLattice)
julia&gt; savefig(&quot;rwdataLattice.pdf&quot;)</code>
    <fig>
      <caption><p>Lattice Approximation from Kernel Density
      Samples</p></caption>
      <graphic mimetype="application" mime-subtype="pdf" xlink:href="images/rwdataLattice.pdf" xlink:title="" />
    </fig>
    <p>One should note that the number of nodes in the scenario lattice
    is equal to the sum of elements in the branching structure, i.e.,
    <inline-formula><alternatives>
    <tex-math><![CDATA[1+3+4+5+6 = 19]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mo>+</mml:mo><mml:mn>4</mml:mn><mml:mo>+</mml:mo><mml:mn>5</mml:mn><mml:mo>+</mml:mo><mml:mn>6</mml:mn><mml:mo>=</mml:mo><mml:mn>19</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
    nodes. The scenario tree considered above has
    <inline-formula><alternatives>
    <tex-math><![CDATA[94]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>94</mml:mn></mml:math></alternatives></inline-formula>
    nodes and <inline-formula><alternatives>
    <tex-math><![CDATA[54]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>54</mml:mn></mml:math></alternatives></inline-formula>
    possible scenarios while the scenario lattice above has
    <inline-formula><alternatives>
    <tex-math><![CDATA[19]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mn>19</mml:mn></mml:math></alternatives></inline-formula>
    nodes and <inline-formula><alternatives>
    <tex-math><![CDATA[(1\times2\times3\times4\times5) = 360]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>1</mml:mn><mml:mo>×</mml:mo><mml:mn>2</mml:mn><mml:mo>×</mml:mo><mml:mn>3</mml:mn><mml:mo>×</mml:mo><mml:mn>4</mml:mn><mml:mo>×</mml:mo><mml:mn>5</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mn>360</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
    scenarios. This shows generally with fewer number of nodes can have
    many possible trajectories than a scenario tree with more number of
    nodes. The algorithm returns the multistage distance between the
    scenario lattice and the original process as
    <inline-formula><alternatives>
    <tex-math><![CDATA[d=1.1718]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>d</mml:mi><mml:mo>=</mml:mo><mml:mn>1.1718</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>.</p>
  </sec>
</sec>
<sec id="acknowledgments">
  <title>Acknowledgments</title>
  <p>This work was supported by the German Academic Exchange Service
  (DAAD).</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Hoyland2001">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Høyland</surname><given-names>Kjetil</given-names></name>
          <name><surname>Wallace</surname><given-names>Stein William</given-names></name>
        </person-group>
        <article-title>Generating scenario trees for multistage decision problems</article-title>
        <source>Management Science</source>
        <year iso-8601-date="2001">2001</year>
        <volume>47</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1287/mnsc.47.2.295.9834</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-KovacevicPichler">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kovacevic</surname><given-names>Raimund M.</given-names></name>
          <name><surname>Pichler</surname><given-names>Alois</given-names></name>
        </person-group>
        <article-title>Tree approximation for discrete time stochastic processes: A process distance approach</article-title>
        <source>Annals of Operations Research</source>
        <publisher-name>Springer US</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <volume>235</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1007/s10479-015-1994-2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Pflug2001">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Pflug</surname><given-names>Georg Ch.</given-names></name>
        </person-group>
        <article-title>Scenario tree generation for multiperiod financial optimization by optimal discretization</article-title>
        <source>Mathematical Programming</source>
        <year iso-8601-date="2001">2001</year>
        <volume>89</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1007/s101070000202</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Pflug2009">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Pflug</surname><given-names>Georg Ch.</given-names></name>
        </person-group>
        <article-title>Version-independence and nested distributions in multistage stochastic optimization</article-title>
        <source>SIAM Journal on Optimization</source>
        <year iso-8601-date="2009">2009</year>
        <volume>20</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1137/080718401</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-PflugPichler2011">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Pflug</surname><given-names>Georg Ch.</given-names></name>
          <name><surname>Pichler</surname><given-names>Alois</given-names></name>
        </person-group>
        <article-title>A distance for multistage stochastic optimization models</article-title>
        <source>SIAM Journal on Optimization</source>
        <year iso-8601-date="2012">2012</year>
        <volume>22</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1137/110825054</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-PflugPichlerDynScenarioGen">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Pflug</surname><given-names>Georg Ch.</given-names></name>
          <name><surname>Pichler</surname><given-names>Alois</given-names></name>
        </person-group>
        <article-title>Dynamic generation of scenario trees</article-title>
        <source>Computational Optimization and Applications</source>
        <year iso-8601-date="2015">2015</year>
        <volume>62</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1007/s10589-015-9758-0</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-PflugPichler2016">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Pflug</surname><given-names>Georg Ch.</given-names></name>
          <name><surname>Pichler</surname><given-names>Alois</given-names></name>
        </person-group>
        <article-title>From empirical observations to tree models for stochastic optimization: Convergence properties</article-title>
        <source>SIAM Journal on Optimization</source>
        <year iso-8601-date="2016">2016</year>
        <volume>26</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1137/15M1043376</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-julia">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bezanson</surname><given-names>Jeff</given-names></name>
          <name><surname>Edelman</surname><given-names>Alan</given-names></name>
          <name><surname>Karpinski</surname><given-names>Stefan</given-names></name>
          <name><surname>Shah</surname><given-names>Viral B</given-names></name>
        </person-group>
        <article-title>Julia: A fresh approach to numerical computing</article-title>
        <source>SIAM Review</source>
        <publisher-name>SIAM</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>59</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1137/141000671</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p>Tutorial4:
    https://kirui93.github.io/ScenTrees.jl/latest/tutorial/tutorial4/</p>
  </fn>
  <fn id="fn2">
    <label>2</label><p>Tutorial41:
    https://kirui93.github.io/ScenTrees.jl/latest/tutorial/tutorial41/</p>
  </fn>
  <fn id="fn3">
    <label>3</label><p>Documentation:
    https://kirui93.github.io/ScenTrees.jl/stable/</p>
  </fn>
</fn-group>
</back>
</article>

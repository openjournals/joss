<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1943</article-id>
<article-id pub-id-type="doi">10.21105/joss.01943</article-id>
<title-group>
<article-title>Pooch: A friend to fetch your data files</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6123-9515</contrib-id>
<string-name>Leonardo Uieda</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9202-5317</contrib-id>
<string-name>Santiago Rubén Soler</string-name>
<xref ref-type="aff" rid="aff-2"/>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-0524-2282</contrib-id>
<string-name>Rémi Rampin</string-name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-5715-8632</contrib-id>
<string-name>Hugo van Kemenade</string-name>
<xref ref-type="aff" rid="aff-5"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-5294-0198</contrib-id>
<string-name>Matthew Turk</string-name>
<xref ref-type="aff" rid="aff-6"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3651-0649</contrib-id>
<string-name>Daniel Shapero</string-name>
<xref ref-type="aff" rid="aff-7"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-6583-571X</contrib-id>
<string-name>Anderson Banihirwe</string-name>
<xref ref-type="aff" rid="aff-8"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-3624-1821</contrib-id>
<string-name>John Leeman</string-name>
<xref ref-type="aff" rid="aff-9"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Earth, Ocean and Ecological Sciences, School
of Environmental Sciences, University of Liverpool, UK</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Instituto Geofísico Sismológico Volponi, Universidad
Nacional de San Juan, Argentina</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>CONICET, Argentina</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>New York University, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-5">
<institution-wrap>
<institution>Independent (Non-affiliated)</institution>
</institution-wrap>
</aff>
<aff id="aff-6">
<institution-wrap>
<institution>University of Illinois at Urbana-Champaign,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-7">
<institution-wrap>
<institution>Polar Science Center, University of Washington Applied
Physics Lab, USA</institution>
</institution-wrap>
</aff>
<aff id="aff-8">
<institution-wrap>
<institution>The US National Center for Atmospheric Research,
USA</institution>
</institution-wrap>
</aff>
<aff id="aff-9">
<institution-wrap>
<institution>Leeman Geophysical, USA</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-12-02">
<day>2</day>
<month>12</month>
<year>2019</year>
</pub-date>
<volume>5</volume>
<issue>45</issue>
<fpage>1943</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>python</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Scientific software is usually created to acquire, analyze, model,
  and visualize data. As such, many software libraries include sample
  datasets in their distributions for use in documentation, tests,
  benchmarks, and workshops. A common approach is to include smaller
  datasets in the GitHub repository directly and package them with the
  source and binary distributions (e.g., scikit-learn
  (<xref alt="Pedregosa et al., 2011" rid="ref-scikit-learn" ref-type="bibr">Pedregosa
  et al., 2011</xref>) and scikit-image
  (<xref alt="Van der Walt et al., 2014" rid="ref-scikit-image" ref-type="bibr">Van
  der Walt et al., 2014</xref>) do this). As data files increase in
  size, it becomes unfeasible to store them in GitHub repositories.
  Thus, larger datasets require writing code to download the files from
  a remote server to the user’s computer. The same problem is faced by
  scientists using version control to manage their research projects.
  While downloading a data file over HTTPS can be done easily with
  modern Python libraries, it is not trivial to manage a set of files,
  keep them updated, and check for corruption. For example, scikit-learn
  (<xref alt="Pedregosa et al., 2011" rid="ref-scikit-learn" ref-type="bibr">Pedregosa
  et al., 2011</xref>), Cartopy
  (<xref alt="Met Office, 2010 - 2015" rid="ref-cartopy" ref-type="bibr">Met
  Office, 2010 - 2015</xref>), and PyVista
  (<xref alt="Sullivan &amp; Kaszynski, 2019" rid="ref-pyvista" ref-type="bibr">Sullivan
  &amp; Kaszynski, 2019</xref>) all include code dedicated to this
  particular task. Instead of scientists and library authors recreating
  the same code, it would be best to have a minimalistic and easy to set
  up tool for fetching and maintaining data files.</p>
  <p>Pooch is a Python library that fills this gap. It manages a data
  <italic>registry</italic> (containing file names, SHA-256
  cryptographic hashes, and download URLs) by downloading files from one
  or more remote servers and storing them in a local data cache. Pooch
  is written in pure Python and has minimal dependencies. It can be
  easily installed from the Python Package Index (PyPI) and conda-forge
  on a wide range of Python versions: 2.7 (up to Pooch 0.6.0) and from
  3.5 to 3.8. The integrity of downloads is verified by comparing the
  file’s SHA-256 hash with the one stored in the data registry. This is
  also the mechanism used to detect if a file needs to be re-downloaded
  due to an update in the registry. Pooch is meant to be a drop-in
  replacement for the custom download code that users have already
  written (or are planning to write). In the ideal scenario, the
  end-user of a software package should not need to know that Pooch is
  being used. Setup is as easy as calling a single function
  (<monospace>pooch.create</monospace>), including setting up an
  environment variable for overwriting the data cache path and
  versioning the downloads so that multiple versions of the same package
  can coexist in the same machine. For example, this is the code
  required to set up a module <monospace>datasets.py</monospace> that
  uses Pooch to manage data downloads:</p>
  <code language="python">import pooch

# Get the version string from the project
from . import version

# Create a new instance of pooch.Pooch
GOODBOY = pooch.create(
    # Cache path using the default for the operating system
    path=pooch.os_cache(&quot;myproject&quot;),
    # Base URL of the remote data server (for example, on GitHub)
    base_url=&quot;https://github.com/me/myproject/raw/{version}/data/&quot;,
    # PEP 440 compliant version number (added to path and base_url)
    version=version,
    # An environment variable that overwrites the path
    env=&quot;MYPROJECT_DATA_DIR&quot;,
)
# Load the registry from a simple text file.
# Each line has: file_name sha256 [url]
GOODBOY.load_registry(&quot;registry.txt&quot;)

def fetch_some_data():
    # Get the path to the data file in the local cache
    # If it's not there or needs updating, download it
    fname = GOODBOY.fetch(&quot;some-data.csv&quot;)
    # Load it with NumPy/pandas/xarray/etc.
    data = pandas.read_csv(fname)
    return data</code>
  <p>Pooch is designed to be extended: users can plug in custom download
  functions and post-download processing functions. For example, a
  custom download function could fetch files from a password-protected
  FTP server (the default is HTTP/HTTPS or anonymous FTP) and a
  processing function could decrypt a file using a user-defined password
  once the download is completed. We include ready-made download
  functions for HTTP and FTP (including basic authentication) as well as
  processing functions for unpacking archives (zip or tar) and
  decompressing files (gzip, lzma, and bzip2).</p>
  <p>To the best of the authors’ awareness, the only other Python
  software with some overlapping functionality are
  <ext-link ext-link-type="uri" xlink:href="https://github.com/intake/intake">Intake</ext-link>
  and
  <ext-link ext-link-type="uri" xlink:href="https://github.com/intake/filesystem_spec">fsspec</ext-link>
  (which is used by Intake). The fsspec library provides a unified
  interface for defining file systems and opening files, regardless of
  where the files are located (local system, HTTPS/FTP servers, Amazon
  S3, Google Cloud Storage, etc). fsspec implements similar download and
  caching functionality to the one in Pooch, but has a wider range of
  download methods available. In the future, fsspec could be used as a
  backend to expand Pooch’s download capabilities beyond HTTPS and FTP.
  Intake manages data catalogues (with download locations and extensive
  metadata), data download and caching, data loading, visualization, and
  browsing. It has built-in capabilities for loading data into standard
  containers, including NumPy, pandas, and xarray. While Intake and
  fsspec are powerful and highly configurable tools, we argue that
  Pooch’s strong points are its simplicity, straight-forward
  documentation, and focus on solving a single problem.</p>
  <p>The Pooch API is stable and has been field-tested by other
  projects: MetPy
  (<xref alt="May et al., 2008 - 2019" rid="ref-metpy" ref-type="bibr">May
  et al., 2008 - 2019</xref>), Verde
  (<xref alt="Uieda, 2018" rid="ref-verde" ref-type="bibr">Uieda,
  2018</xref>), RockHound
  (<xref alt="Uieda &amp; Soler, 2019" rid="ref-rockhound" ref-type="bibr">Uieda
  &amp; Soler, 2019</xref>), predictatops
  (<xref alt="Gosses, 2019" rid="ref-predictatops" ref-type="bibr">Gosses,
  2019</xref>), and icepack
  (<xref alt="Shapero et al., 2019" rid="ref-icepack" ref-type="bibr">Shapero
  et al., 2019</xref>). Pooch is also being implemented as the download
  manager for scikit-image
  (<ext-link ext-link-type="uri" xlink:href="https://github.com/scikit-image/scikit-image/pull/3945">GitHub
  pull request number 3945</ext-link>), which will allow the project to
  use larger sample data while simultaneously reducing the download size
  of source and binary distributions.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to thank all of the volunteers who have dedicated
  their time and energy to build the open-source ecosystem on which our
  work relies. The order of authors is based on number of commits to the
  GitHub repository. A full list of all contributors to the project can
  be found on the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/fatiando/pooch/graphs/contributors">GitHub
  repository</ext-link>.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-scikit-learn">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Pedregosa</surname><given-names>F.</given-names></name>
          <name><surname>Varoquaux</surname><given-names>G.</given-names></name>
          <name><surname>Gramfort</surname><given-names>A.</given-names></name>
          <name><surname>Michel</surname><given-names>V.</given-names></name>
          <name><surname>Thirion</surname><given-names>B.</given-names></name>
          <name><surname>Grisel</surname><given-names>O.</given-names></name>
          <name><surname>Blondel</surname><given-names>M.</given-names></name>
          <name><surname>Prettenhofer</surname><given-names>P.</given-names></name>
          <name><surname>Weiss</surname><given-names>R.</given-names></name>
          <name><surname>Dubourg</surname><given-names>V.</given-names></name>
          <name><surname>Vanderplas</surname><given-names>J.</given-names></name>
          <name><surname>Passos</surname><given-names>A.</given-names></name>
          <name><surname>Cournapeau</surname><given-names>D.</given-names></name>
          <name><surname>Brucher</surname><given-names>M.</given-names></name>
          <name><surname>Perrot</surname><given-names>M.</given-names></name>
          <name><surname>Duchesnay</surname><given-names>E.</given-names></name>
        </person-group>
        <article-title>Scikit-learn: Machine learning in Python</article-title>
        <source>Journal of Machine Learning Research</source>
        <year iso-8601-date="2011">2011</year>
        <volume>12</volume>
      </element-citation>
    </ref>
    <ref id="ref-scikit-image">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Van der Walt</surname><given-names>Stefan</given-names></name>
          <name><surname>Schönberger</surname><given-names>Johannes L</given-names></name>
          <name><surname>Nunez-Iglesias</surname><given-names>Juan</given-names></name>
          <name><surname>Boulogne</surname><given-names>François</given-names></name>
          <name><surname>Warner</surname><given-names>Joshua D</given-names></name>
          <name><surname>Yager</surname><given-names>Neil</given-names></name>
          <name><surname>Gouillart</surname><given-names>Emmanuelle</given-names></name>
          <name><surname>Yu</surname><given-names>Tony</given-names></name>
        </person-group>
        <article-title>scikit-image: image processing in Python</article-title>
        <source>PeerJ</source>
        <publisher-name>PeerJ Inc.</publisher-name>
        <year iso-8601-date="2014">2014</year>
        <volume>2</volume>
        <pub-id pub-id-type="doi">10.7717/peerj.453</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-metpy">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>May</surname><given-names>Ryan M.</given-names></name>
          <name><surname>Arms</surname><given-names>Sean C.</given-names></name>
          <name><surname>Marsh</surname><given-names>Patrick</given-names></name>
          <name><surname>Bruning</surname><given-names>Eric</given-names></name>
          <name><surname>Leeman</surname><given-names>John R.</given-names></name>
          <name><surname>Goebbert</surname><given-names>Kevin</given-names></name>
          <name><surname>Thielen</surname><given-names>Jonathan E.</given-names></name>
          <name><surname>Bruck</surname><given-names>Zachary</given-names></name>
        </person-group>
        <source>MetPy: A Python package for meteorological data</source>
        <publisher-name>Unidata</publisher-name>
        <publisher-loc>Boulder, Colorado</publisher-loc>
        <uri>https://github.com/Unidata/MetPy</uri>
        <pub-id pub-id-type="doi">10.5065/D6WW7G29</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-verde">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Uieda</surname><given-names>Leonardo</given-names></name>
        </person-group>
        <article-title>Verde: Processing and gridding spatial data using Green’s functions</article-title>
        <source>Journal of Open Source Software</source>
        <publisher-name>The Open Journal</publisher-name>
        <year iso-8601-date="2018-10">2018</year><month>10</month>
        <volume>3</volume>
        <issue>30</issue>
        <uri>https://doi.org/10.21105/joss.00957</uri>
        <pub-id pub-id-type="doi">10.21105/joss.00957</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-rockhound">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Uieda</surname><given-names>Leonardo</given-names></name>
          <name><surname>Soler</surname><given-names>Santiago R.</given-names></name>
        </person-group>
        <article-title>Rockhound: Download geophysical models/datasets and load them in Python</article-title>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <uri>https://zenodo.org/record/3086002</uri>
        <pub-id pub-id-type="doi">10.5281/ZENODO.3086002</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-icepack">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Shapero</surname><given-names>Daniel</given-names></name>
          <name><surname>Lilien</surname><given-names>David</given-names></name>
          <name><surname>Ham</surname><given-names>David A.</given-names></name>
          <name><surname>Hoffman</surname><given-names>Andrew</given-names></name>
        </person-group>
        <article-title>Icepack/icepack: Icepack: Glacier flow modeling with the finite element method in Python</article-title>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <uri>https://zenodo.org/record/3542092</uri>
        <pub-id pub-id-type="doi">10.5281/ZENODO.3542092</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-predictatops">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Gosses</surname><given-names>Justin</given-names></name>
        </person-group>
        <article-title>JustinGOSSES/predictatops: v0.0.4</article-title>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2019">2019</year>
        <uri>https://zenodo.org/record/1450596</uri>
        <pub-id pub-id-type="doi">10.5281/ZENODO.1450596</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-cartopy">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>Met Office</string-name>
        </person-group>
        <source>Cartopy: A cartographic Python library with a Matplotlib interface</source>
        <publisher-loc>Exeter, Devon</publisher-loc>
        <uri>https://scitools.org.uk/cartopy</uri>
      </element-citation>
    </ref>
    <ref id="ref-pyvista">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Sullivan</surname><given-names>C. Bane</given-names></name>
          <name><surname>Kaszynski</surname><given-names>Alexander</given-names></name>
        </person-group>
        <article-title>PyVista: 3D plotting and mesh analysis through a streamlined interface for the Visualization Toolkit (VTK)</article-title>
        <source>Journal of Open Source Software</source>
        <publisher-name>The Open Journal</publisher-name>
        <year iso-8601-date="2019-05">2019</year><month>05</month>
        <volume>4</volume>
        <issue>37</issue>
        <uri>https://doi.org/10.21105/joss.01450</uri>
        <pub-id pub-id-type="doi">10.21105/joss.01450</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

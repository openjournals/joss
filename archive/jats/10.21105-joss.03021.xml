<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3021</article-id>
<article-id pub-id-type="doi">10.21105/joss.03021</article-id>
<title-group>
<article-title>seaborn: statistical data visualization</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<string-name>Michael L. Waskom</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Center for Neural Science, New York
University</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-02-01">
<day>1</day>
<month>2</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>60</issue>
<fpage>3021</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>data science</kwd>
<kwd>data visualization</kwd>
<kwd>statistical graphics</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>seaborn</monospace> is a library for making statistical
  graphics in Python. It provides a high-level interface to
  <monospace>matplotlib</monospace> and integrates closely with
  <monospace>pandas</monospace> data structures. Functions in the
  <monospace>seaborn</monospace> library expose a declarative,
  dataset-oriented API that makes it easy to translate questions about
  data into graphics that can answer them. When given a dataset and a
  specification of the plot to make, <monospace>seaborn</monospace>
  automatically maps the data values to visual attributes such as color,
  size, or style, internally computes statistical transformations, and
  decorates the plot with informative axis labels and a legend. Many
  <monospace>seaborn</monospace> functions can generate figures with
  multiple panels that elicit comparisons between conditional subsets of
  data or across different pairings of variables in a dataset.
  <monospace>seaborn</monospace> is designed to be useful throughout the
  lifecycle of a scientific project. By producing complete graphics from
  a single function call with minimal arguments,
  <monospace>seaborn</monospace> facilitates rapid prototyping and
  exploratory data analysis. And by offering extensive options for
  customization, along with exposing the underlying
  <monospace>matplotlib</monospace> objects, it can be used to create
  polished, publication-quality figures.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Data visualization is an indispensable part of the scientific
  process. Effective visualizations will allow a scientist both to
  understand their own data and to communicate their insights to others
  (<xref alt="Tukey, 1977" rid="ref-TukeyU003A1977" ref-type="bibr">Tukey,
  1977</xref>). These goals can be furthered by tools for specifying a
  graph that provide a good balance between efficiency and flexibility.
  Within the scientific Python ecosystem, the
  <monospace>matplotlib</monospace>
  (<xref alt="Hunter, 2007" rid="ref-HunterU003A2007" ref-type="bibr">Hunter,
  2007</xref>) project is very well established, having been under
  continuous development for nearly two decades. It is highly flexible,
  offering fine-grained control over the placement and visual appearance
  of objects in a plot. It can be used interactively through GUI
  applications, and it can output graphics to a wide range of static
  formats. Yet its relatively low-level API can make some common tasks
  cumbersome to perform. For example, creating a scatter plot where the
  marker size represents a numeric variable and the marker shape
  represents a categorical variable requires one to transform the size
  values to graphical units and to loop over the categorical levels,
  separately invoking a plotting function for each marker type.</p>
  <p>The <monospace>seaborn</monospace> library offers an interface to
  <monospace>matplotlib</monospace> that permits rapid data exploration
  and prototyping of visualizations while retaining much of the
  flexibility and stability that are necessary to produce
  publication-quality graphics. It is domain-general and can be used to
  visualize a wide range of datasets that are well-represented within a
  tabular format.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <p>The following example demonstrates the creation of a figure with
  <monospace>seaborn</monospace>. The example makes use of one of the
  built-in datasets that are provided for documentation and generation
  of reproducible bug reports. It illustrates several of the features
  described in the Overview section, including the declarative API,
  semantic mappings, faceting across subplots, aggregation with error
  bars, and visual theme control.</p>
  <code language="python">import seaborn as sns 
sns.set_theme(context=&quot;paper&quot;)
fmri = sns.load_dataset(&quot;fmri&quot;)
g = sns.relplot(
    data=fmri, kind=&quot;line&quot;,
    x=&quot;timepoint&quot;, y=&quot;signal&quot;,
    hue=&quot;event&quot;, style=&quot;event&quot;, col=&quot;region&quot;,
    height=3.5, aspect=.8,
)
g.savefig(&quot;paper_demo.pdf&quot;)</code>
  <fig>
    <caption><p>An example <monospace>seaborn</monospace> figure
    demonstrating some of its key features. The image was generated
    using seaborn v0.11.1.</p></caption>
    <graphic mimetype="application" mime-subtype="pdf" xlink:href="paper_demo.pdf" xlink:title="" />
  </fig>
</sec>
<sec id="overview">
  <title>Overview</title>
  <p>Users interface with <monospace>seaborn</monospace> through a
  collection of plotting functions that share a common API for plot
  specification and offer many more specific options for customization.
  These functions range from basic plot types such as scatter and line
  plots to functions that apply various transformations and
  abstractions, such as histogram binning, kernel density estimation,
  and regression model fitting. Functions in
  <monospace>seaborn</monospace> are classified as either “axes-level”
  or “figure-level”. Axes-level functions behave like most plotting
  functions in the <monospace>matplotlib.pyplot</monospace> namespace.
  By default, they hook into the state machine that tracks a “current”
  figure and add a layer to it, but they can also accept a matplotlib
  axes object to control where the plot is drawn, similar to using the
  <monospace>matplotlib</monospace> “object-oriented” interface.
  Figure-level functions create their own figure when invoked, allowing
  them to “facet” the dataset by creating multiple conditional subplots,
  along with adding conveniences such as putting the legend outside the
  space of the plot by default. Each figure-level function corresponds
  to several axes-level functions that serve similar purposes, with a
  single parameter selecting the kind of plot to make. For example, the
  <monospace>displot</monospace> function can produce several different
  representations of a distribution, including a histogram, kernel
  density estimate, or empirical cumulative distribution function. The
  figure-level functions make use of a <monospace>seaborn</monospace>
  class that controls the layout of the figure, mediating between the
  axes-level functions and matplotlib. These classes are part of the
  public API and can be used directly for advanced applications.</p>
  <p>One of the key features in <monospace>seaborn</monospace> is that
  variables in a dataset can be automatically “mapped” to visual
  attributes of the graph. These transformations are referred to as
  “semantic” mappings because they endow the attributes with meaning
  <italic>vis a vis</italic> the dataset. By freeing the user from
  manually specifying the transformations – which often requires looping
  and multiple function invocations when using
  <monospace>matplotlib</monospace> directly –
  <monospace>seaborn</monospace> allows rapid exploration of
  multidimensional relationships. To further aid efficiency, the default
  parameters of the mappings are opinionated. For example, when mapping
  the color of the elements in a plot, <monospace>seaborn</monospace>
  infers whether to use a qualitative or quantitative mapping based on
  whether the input data are categorical or numeric. This behavior can
  be further configured or even overridden by setting additional
  parameters of each plotting function.</p>
  <p>Several <monospace>seaborn</monospace> functions also apply
  statistical transformations to the input data before plotting, ranging
  from estimating the mean or median to fitting a general linear model.
  When data are transformed in this way, <monospace>seaborn</monospace>
  automatically computes and shows error bars to provide a visual cue
  about the uncertainty of the estimate. Unlike many graphical
  libraries, <monospace>seaborn</monospace> shows 95% confidence
  interval error bars by default, rather than standard errors. The
  confidence intervals are computed with a bootstrap algorithm, allowing
  them to generalize over many different statistics, and the default
  level allows the user to perform “inference by eye”
  (<xref alt="Cumming &amp; Finch, 2005" rid="ref-CummingU003A2005" ref-type="bibr">Cumming
  &amp; Finch, 2005</xref>). Historically, error bar specification has
  been relatively limited, but a forthcoming release (v0.12) will
  introduce a new configuration system that makes it possible to show
  nonparametric percentile intervals and scaled analytic estimates of
  standard error or standard deviation statistics.</p>
  <p><monospace>seaborn</monospace> aims to be flexible about the format
  of its input data. The most convenient usage pattern provides a
  <monospace>pandas</monospace>
  (<xref alt="McKinney, 2010" rid="ref-McKinneyU003A2010" ref-type="bibr">McKinney,
  2010</xref>) dataframe with variables encoded in a long-form or “tidy”
  (<xref alt="Wickham, 2014" rid="ref-WickhamU003A2014" ref-type="bibr">Wickham,
  2014</xref>) format. With this format, columns in the dataframe can be
  explicitly assigned to roles in the plot, such as specifying the x and
  y positions of a scatterplot along with size and shape semantics.
  Long-form data supports efficient exploration and prototyping because
  variables can be assigned different roles in the plot without
  modifying anything about the original dataset. But most
  <monospace>seaborn</monospace> functions can also consume and
  visualize “wide-form” data, typically producing similar output to how
  the analogous <monospace>matplotlib</monospace> function would
  interpret a 2D array (e.g., producing a boxplot where each box
  represents a column in the dataframe) while making use of the index
  and column names to label the graph. Using the label information in a
  <monospace>pandas</monospace> object can help make plots that are
  interpretable without further tweaking – reducing the chance of
  interpretive errors – but <monospace>seaborn</monospace> also accepts
  data from a variety of more basic formats, including
  <monospace>numpy</monospace>
  (<xref alt="Harris et al., 2020" rid="ref-HarrisU003A2020" ref-type="bibr">Harris
  et al., 2020</xref>) arrays and simple Python collection types.</p>
  <p><monospace>seaborn</monospace> also offers multiple built-in themes
  that users can select to modify the visual appearance of their graphs.
  The themes make use of the <monospace>matplotlib</monospace>
  <monospace>rcParams</monospace> system, meaning that they will take
  effect for any figure created using <monospace>matplotlib</monospace>,
  not just those made by <monospace>seaborn</monospace>. The themes are
  defined by two disjoint sets of parameters that separately control the
  style of the figure and the scaling of its elements (such as line
  widths and font sizes). This separation makes it easy to generate
  multiple versions of a figure that are scaled for different contexts,
  such as written reports and slide presentations. The theming system
  can also be used to set a default color palette. As color is
  particularly important in data visualization and no single set of
  defaults is universally appropriate, every plotting function makes it
  easy to choose an alternate categorical palette or continuous gradient
  mapping that is well-suited for the particular dataset and plot type.
  The seaborn documentation contains a tutorial on the use of color in
  data visualization to help users make this important decision.</p>
  <p><monospace>seaborn</monospace> does not aim to completely
  encapsulate or replace <monospace>matplotlib</monospace>. Many useful
  graphs can be created through the <monospace>seaborn</monospace>
  interface, but more advanced applications – such as defining composite
  figures with multiple arbitrary plot types – will require importing
  and using <monospace>matplotlib</monospace> as well. Even when calling
  only <monospace>seaborn</monospace> functions, deeper customization of
  the plot appearance is achieved by specifying parameters that are
  passed-through to the underlying <monospace>matplotlib</monospace>
  functions, and tweaks to the default axis limits, ticks, and labels
  are made by calling methods on the <monospace>matplotlib</monospace>
  object that axes-level <monospace>seaborn</monospace> functions
  return. This approach is distinct from other statistical graphing
  systems, such as <monospace>ggplot2</monospace>
  (<xref alt="Wickham, 2016" rid="ref-WickhamU003A2016" ref-type="bibr">Wickham,
  2016</xref>). While <monospace>seaborn</monospace> offers some similar
  features and, in some cases, uses similar terminology to
  <monospace>ggplot2</monospace>, it does not implement the formal
  Grammar of Graphics and cannot be used to produce arbitrary
  visualizations. Rather, its aim is to facilitate rapid exploration and
  prototyping through named functions and opinionated defaults while
  allowing the user to leverage the considerable flexibility of
  <monospace>matplotlib</monospace> to create more domain-specific
  graphics and to polish figures for publication. An example of a
  successful use of this approach to produce reproducible figures can be
  found at https://github.com/WagnerLabPapers/Waskom_PNAS_2017
  (<xref alt="Waskom &amp; Wagner, 2017" rid="ref-WaskomU003A2017" ref-type="bibr">Waskom
  &amp; Wagner, 2017</xref>).</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>M.L.W. has been supported by the National Science Foundation IGERT
  program (0801700) and by the Simons Foundation as a Junior Fellow in
  the Simons Society of Fellows (527794). Many others have helped
  improve <monospace>seaborn</monospace> by asking questions, reporting
  bugs, and contributing code; thank you to this community.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-CummingU003A2005">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Cumming</surname><given-names>Geoff</given-names></name>
          <name><surname>Finch</surname><given-names>Sue</given-names></name>
        </person-group>
        <article-title>Inference by eye: confidence intervals and how to read pictures of data</article-title>
        <source>The American Psychologist</source>
        <year iso-8601-date="2005">2005</year>
        <volume>60</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1037/0003-066X.60.2.170</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-HarrisU003A2020">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
          <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
          <name><surname>Walt</surname><given-names>St’efan J. van der</given-names></name>
          <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
          <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
          <name><surname>Cournapeau</surname><given-names>David</given-names></name>
          <name><surname>Wieser</surname><given-names>Eric</given-names></name>
          <name><surname>Taylor</surname><given-names>Julian</given-names></name>
          <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
          <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
          <name><surname>Kern</surname><given-names>Robert</given-names></name>
          <name><surname>Picus</surname><given-names>Matti</given-names></name>
          <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
          <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
          <name><surname>Brett</surname><given-names>Matthew</given-names></name>
          <name><surname>Haldane</surname><given-names>Allan</given-names></name>
          <name><surname>R’ıo</surname><given-names>Jaime Fern’andez del</given-names></name>
          <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <name><surname>G’erard-Marchant</surname><given-names>Pierre</given-names></name>
          <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
          <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
          <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
          <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
          <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        </person-group>
        <article-title>Array programming with NumPy</article-title>
        <source>Nature</source>
        <publisher-name>Springer Science; Business Media LLC</publisher-name>
        <year iso-8601-date="2020-09">2020</year><month>09</month>
        <volume>585</volume>
        <issue>7825</issue>
        <uri>https://doi.org/10.1038/s41586-020-2649-2</uri>
        <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-HunterU003A2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>J. D.</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D graphics environment</article-title>
        <source>Computing in Science &amp; Engineering</source>
        <publisher-name>IEEE COMPUTER SOC</publisher-name>
        <year iso-8601-date="2007">2007</year>
        <volume>9</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-McKinneyU003A2010">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>McKinney</surname><given-names>Wes</given-names></name>
        </person-group>
        <article-title>Data structures for statistical computing in python</article-title>
        <source>Proceedings of the 9th Python in Science Conference</source>
        <person-group person-group-type="editor">
          <name><surname>Walt</surname><given-names>Stéfan van der</given-names></name>
          <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
        </person-group>
        <year iso-8601-date="2010">2010</year>
        <pub-id pub-id-type="doi">10.25080/Majora-92bf1922-00a</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-TukeyU003A1977">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Tukey</surname><given-names>John W.</given-names></name>
        </person-group>
        <source>Exploratory data analysis</source>
        <publisher-name>Addison-Wesley</publisher-name>
        <year iso-8601-date="1977">1977</year>
        <isbn>978-0201076165</isbn>
      </element-citation>
    </ref>
    <ref id="ref-WaskomU003A2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Waskom</surname><given-names>M L</given-names></name>
          <name><surname>Wagner</surname><given-names>Anthony D</given-names></name>
        </person-group>
        <article-title>Distributed representation of context by intrinsic subnetworks in prefrontal cortex</article-title>
        <source>Proceedings of the National Academy of Sciences</source>
        <year iso-8601-date="2017-02">2017</year><month>02</month>
        <pub-id pub-id-type="doi">10.1073/pnas.1615269114</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-WickhamU003A2014">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        </person-group>
        <article-title>Tidy data</article-title>
        <source>Journal of Statistical Software, Articles</source>
        <year iso-8601-date="2014">2014</year>
        <volume>59</volume>
        <issue>10</issue>
        <issn>1548-7660</issn>
        <uri>https://www.jstatsoft.org/v059/i10</uri>
        <pub-id pub-id-type="doi">10.18637/jss.v059.i10</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-WickhamU003A2016">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        </person-group>
        <source>ggplot2: Elegant graphics for data analysis</source>
        <publisher-name>Springer-Verlag</publisher-name>
        <year iso-8601-date="2016">2016</year>
        <isbn>978-3-319-24277-4</isbn>
        <uri>https://ggplot2.tidyverse.org</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

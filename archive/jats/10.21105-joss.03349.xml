<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3349</article-id>
<article-id pub-id-type="doi">10.21105/joss.03349</article-id>
<title-group>
<article-title>Makie.jl: Flexible high-performance data visualization
for Julia</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-8834-6644</contrib-id>
<string-name>Simon Danisch</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8409-5590</contrib-id>
<string-name>Julius Krumbiegel</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Beacon Biosignals</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Department of Systems Neuroscience, University Medical
Center Hamburg-Eppendorf</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-04-10">
<day>10</day>
<month>4</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>65</issue>
<fpage>3349</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>plotting</kwd>
<kwd>data visualization</kwd>
<kwd>GPU</kwd>
<kwd>OpenGL</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p><monospace>Makie.jl</monospace> is a cross-platform plotting
  ecosystem for the Julia programming language
  (<xref alt="Bezanson et al., 2012" rid="ref-BezansonU003A2012" ref-type="bibr">Bezanson
  et al., 2012</xref>), which enables researchers to create
  high-performance, GPU-powered, interactive visualizations, as well as
  publication-quality vector graphics with one unified interface. The
  infrastructure based on <monospace>Observables.jl</monospace> allows
  users to express how a visualization depends on multiple parameters
  and data sources, which can then be updated live, either
  programmatically, or through sliders, buttons and other GUI elements.
  A sophisticated layout system makes it easy to assemble complex
  figures. It is designed to avoid common difficulties when aligning
  nested subplots of different sizes, or placing colorbars or legends
  freely without spacing issues. <monospace>Makie.jl</monospace>
  leverages the Julia type system to automatically convert many kinds of
  input arguments which results in a very flexible API that reduces the
  need to manually prepare data. Finally, users can extend every step of
  this pipeline for their custom types through Julia’s powerful multiple
  dispatch mechanism, making Makie a highly productive and generic
  visualization system.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>Visualizations are crucial for all scientists around the world who
  want to effectively understand and communicate their data. Flexible
  and powerful plotting software is required to create
  publication-quality vector graphics, animated movies and interactive
  data exploration tools. Most options that are available today lack one
  or more of the following attributes: High performance for the
  responsive rendering of large datasets, interactive visualizations
  that can be updated live using dynamic languages, the ability to
  extend the plotting pipeline to handle user-defined data structures
  and types, implementations of both 2D and 3D rendering, and the power
  to construct complex figures without having to tweak subplot positions
  after the fact in image editing software. Therefore, researchers have
  to switch between tools which means they have to spend more time to
  learn unfamiliar syntax and redo work if one software turns out to
  lack critical abilities for the task at hand.</p>
  <p><monospace>Makie.jl</monospace> is a new plotting package which is
  built from the ground up to leverage the power of
  <monospace>Julia</monospace>, a relatively young programming language
  which excels at technical computing and has seen steady growth of its
  user base since reaching the 1.0 milestone in 2018. Julia users have
  historically often used plotting software from other ecosystems, such
  as <monospace>matplotlib</monospace>
  (<xref alt="Hunter, 2007" rid="ref-HunterU003A2007" ref-type="bibr">Hunter,
  2007</xref>) or <monospace>ggplot2</monospace>
  (<xref alt="Wickham, 2011" rid="ref-WickhamU003A2011" ref-type="bibr">Wickham,
  2011</xref>) through interface packages to Python and R like
  <monospace>PyCall.jl</monospace> and <monospace>RCall.jl</monospace>.
  But these wrapper packages cannot take full advantage of Julia’s type
  system and multiple dispatch paradigm, so they leave both performance
  and flexibility on the table.</p>
  <p>The widely used <monospace>Plots.jl</monospace> package
  (<xref alt="Breloff, 2021" rid="ref-BreloffU003A2021" ref-type="bibr">Breloff,
  2021</xref>) on the other hand offers a powerful and convenient
  abstraction on top of established plotting libraries from other
  languages. While its recipe system utilizes the strengths of Julia’s
  multiple dispatch, the multi-backend approach means that only a
  limited subset of each backend’s functionality is available.
  Interactivity is also not a priority, so for maximum control and
  performance, users have to look elsewhere.</p>
  <p><monospace>Makie.jl</monospace> aims to fill this gap in the Julia
  ecosystem.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <p>The following figure illustrates a few key features of
  <monospace>Makie.jl</monospace>: The map example augments a dataset of
  the world’s airports to 100 million points, a size that is too large
  to be rendered in reasonable time by many other plotting solutions.
  GLMakie can handle such amounts of data given a sufficiently powerful
  GPU.</p>
  <p>The mandelbrot fractal heatmap on the right is plotted by simply
  passing an x- and y-range, as well as the mandelbrot function, which
  is then automatically evaluated for all xy combinations. Julia’s
  multiple dispatch mechanism is, in very simple terms, a way to
  overload functions with different versions or methods, that are chosen
  depending on the set of input arguments. This allows Makie to offer
  very flexible input argument alternatives, which get the user to their
  visualization faster, by reducing common redundant data preprocessing
  steps.</p>
  <p>The volumetric contour and mesh plots in the bottom row showcase
  Makie’s 3D ability. Complex meshes can be visualized and interacted
  with effortlessly.</p>
  <p>The figure layout is iteratively built by simply specifying object
  positions like <monospace>f[1, 1]</monospace> for “first row, first
  column of the figure”, or even nested like
  <monospace>f[1:2, 2][2, 1:2]</monospace> for “first two rows, second
  column, and there in a nested layout second row, first two columns”.
  Users do not have to set up grid structures of the correct sizes a
  priori, but can simply add objects where they are required and the
  layouts grow automatically. The figure title is another example of
  this, it is placed at <monospace>f[0, :]</monospace> which means “one
  row above the current first row, across all columns”. Adding a zero-th
  row, simply shifts all other rows downwards, and is a very simple and
  intuitive way of adding elements to an existing structure. While other
  packages offer functions like <monospace>supertitle</monospace>, these
  are usually limited by their assumptions about the figure layout and
  can’t handle more unusual requirements. In Makie, text can be placed
  anywhere in a layout and it’s trivial to construct complex figures
  with multiple grids and subheaders this way.</p>
  <code language="julia">using GLMakie, GLMakie.FileIO
using LinearAlgebra: norm
using DelimitedFiles

f = Figure(resolution = (1400, 1000))

a = readdlm(assetpath(&quot;airportlocations.csv&quot;))
# reduce this number if your GPU is not powerful enough
n_points = 100_000_000 
a_rep = repeat(a, n_points ÷ size(a, 1), 1) .+ randn.()
scatter(f[1, 1], a_rep, color = (:black, 0.01), markersize = 1.0,
    strokewidth = 0, axis = (title = &quot;Airports (100 Million points)&quot;,
    limits = (-200, 200, -70, 80)))

r = LinRange(-5, 5, 100)
volume = [sin(x) + sin(y) + 0.1z^2 for x = r, y = r, z = r]
ax, c = contour(f[2, 1][1, 1], volume, levels = 8, colormap = :viridis,
    axis = (type = Axis3, viewmode = :stretch, title = &quot;3D contour&quot;))
Colorbar(f[2, 1][1, 2], c, label = &quot;intensity&quot;)

function mandelbrot(x, y)
    z = c = x + y*im
    for i in 1:30.0; abs(z) &gt; 2 &amp;&amp; return i; z = z^2 + c; end; 0
end
ax2, hm = heatmap(f[1:2, 2][1, 2], -2:0.005:1, -1.1:0.005:1.1, mandelbrot,
    colormap = Reverse(:deep), axis = (title = &quot;Mandelbrot set&quot;,))
hidedecorations!(ax2)
Colorbar(f[1:2, 2][1, 1], hm, flipaxis = false,
  label = &quot;Iterations&quot;, height = 300)

Axis3(f[1:2, 2][2, 1:2], aspect = :data, title = &quot;Brain mesh&quot;)
brain = load(assetpath(&quot;brain.stl&quot;))
color = [-norm(x[1] .- Point(-40, 10, 45)) for x in brain for i in 1:3]
mesh!(brain, color = color, colormap = :thermal)

Label(f[0, :], &quot;Makie.jl Example Figure&quot;)

save(&quot;paper_example.png&quot;, f)</code>
  <fig>
    <caption><p>GLMakie can visualize scatter plots with 100 million
    points (given a GPU with sufficient memory) and render
    three-dimensional volumes or meshes. Axes and colorbars can be
    placed freely in nested grids and aligned in a visually pleasing
    way. The mandelbrot fractal heatmap demonstrates one use of Julia’s
    multiple dispatch, as the mandelbrot function can be directly
    evaluated on a two-dimensional grid without manually preparing
    arrays. Note that some 3D plots such as the displayed contour are
    not available in CairoMakie due to the technical limitations of
    vector graphics.
    <styled-content id="figU003Aexample"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="paper_example.png" xlink:title="" />
  </fig>
</sec>
<sec id="overview">
  <title>Overview</title>
  <p><monospace>Makie.jl</monospace> is the core package, which contains
  the infrastructure that plots are built out of. It defines primitive
  plot types such as lines, scatters, heatmaps and text, which can be
  freely combined to build up higher-level recipes such as density
  plots, histograms, and contour plots.</p>
  <p>There are currently three different backends for Makie, which are
  <monospace>GLMakie.jl</monospace>,
  <monospace>CairoMakie.jl</monospace> and
  <monospace>WGLMakie.jl</monospace>. Each backend package has a
  different set of strengths: GLMakie excels at high-performance
  plotting with large datasets, CairoMakie creates beautiful vector
  graphics and WGLMakie can be run in the browser. Users can switch back
  and forth between backends easily, allowing them to, for example,
  build up a figure piece by piece in GLMakie, explore the data
  interactively, and then save a publication-quality version with
  CairoMakie. Note that CairoMakie is generally limited to the subset of
  2D plotting primitives, with a few exceptions that try to approximate
  3D visuals with 2D elements.</p>
  <p>Makie is built around the idea of a reactive workflow using
  <monospace>Observables.jl</monospace>. Observables are wrappers for
  arbitrary objects which can trigger actions when their content is
  changed. Makie’s plotting functions all accept observables as input
  arguments in addition to normal datatypes like numbers or arrays. If a
  plotted observable changes, this is reflected immediately in the
  display. Observables can be chained together, so that changes to many
  plot objects can flow from a few steering observables. A common
  example is a single <italic>time</italic> observable, which multiple
  visualizations depend on simultaneously. The observable approach frees
  the user from having to update plot objects manually to achieve
  interactive visualizations, which is usually required in most other
  plotting software. Makie also offers a range of GUI elements such as
  sliders, buttons and menus, which seamlessly fit into the observable
  workflow. For example, a slider over an integer range can be used
  directly to pick a 2D slice from a 3D dataset, like an fMRI image.
  This can then be plotted using a heatmap, and will update whenever the
  slider or 3D data are changed.</p>
  <p>A common problem when creating figures for publication is that
  multiple elements in the figure are overlapping, leaving too much
  empty space, or simply cannot be placed exactly where the user wants
  without a lot of trial and error. To alleviate these issues, Makie has
  a powerful layout system, which makes it easy to build up very
  flexible and complex figures without a lot of boilerplate setup. Each
  figure has a top-level grid layout, in which layoutable objects or
  further nested grid layouts can be placed at arbitrary positions. Grid
  layouts are built around the assumption that objects like axes usually
  have an inner important area, which is what other objects should be
  aligned with, and outer decorations which are visually less important
  and are treated as part of the gap between rows and columns. This
  avoids the well-known issue of incorrectly aligned axes between
  subplots, as they are not aligned along their outer bounding boxes,
  which depend on unpredictable things like exact tick label lengths,
  but their visually leading lines, the axis spines. In other plotting
  software, it is a common issue to place a legend not inside or outside
  a single axis, but centered below multiple facets or in an entirely
  different position. In Makie, objects like legends or colorbars are
  not tied to specific axes and can therefore be placed wherever the
  user desires. Flexible colorbar or legend placement is a common wish
  but still surprisingly hard to achieve in many plotting packages,
  which require manual specification of precise bounding box coordinates
  for such cases. This often leads to a cycle of readjustments whenever
  any other figure parameters change. In Makie, the layout algorithm
  guarantees that no other objects collide or overlap, which can
  otherwise be the cause for long-winded and non-reproducible sessions
  in image editing software. Finally, grid layouts can be nested to
  arbitrary depths, which means that multiple different subfigures can
  be combined easily by assembling their top-level layouts into a new
  parent layout.</p>
  <p>Its ability to build responsive data visualizations with complex
  but clear layouts makes <monospace>Makie.jl</monospace> suitable for a
  wide range of work with high demands regarding both performance and
  aesthetics.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>S.D. has been supported by the German Federal Ministry of Education
  and Research, grant number 01IS10S27 2020, as well as NSF Grant
  OAC-1835443. The Makie project is glad to have an enthusiastic
  community that has helped us to improve a lot over the years. The
  authors want to thank everybody who has opened issues, reported bugs,
  contributed ideas or code and has supported us in driving
  <monospace>Makie.jl</monospace> forward.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-HunterU003A2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>John D</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D graphics environment</article-title>
        <source>IEEE Annals of the History of Computing</source>
        <publisher-name>IEEE Computer Society</publisher-name>
        <year iso-8601-date="2007">2007</year>
        <volume>9</volume>
        <issue>03</issue>
      </element-citation>
    </ref>
    <ref id="ref-WickhamU003A2011">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        </person-group>
        <article-title>ggplot2</article-title>
        <source>Wiley Interdisciplinary Reviews: Computational Statistics</source>
        <publisher-name>Wiley Online Library</publisher-name>
        <year iso-8601-date="2011">2011</year>
        <volume>3</volume>
        <issue>2</issue>
      </element-citation>
    </ref>
    <ref id="ref-BezansonU003A2012">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bezanson</surname><given-names>Jeff</given-names></name>
          <name><surname>Karpinski</surname><given-names>Stefan</given-names></name>
          <name><surname>Shah</surname><given-names>Viral B</given-names></name>
          <name><surname>Edelman</surname><given-names>Alan</given-names></name>
        </person-group>
        <article-title>Julia: A fast dynamic language for technical computing</article-title>
        <source>arXiv preprint arXiv:1209.5145</source>
        <year iso-8601-date="2012">2012</year>
      </element-citation>
    </ref>
    <ref id="ref-BreloffU003A2021">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Breloff</surname><given-names>Tom</given-names></name>
        </person-group>
        <source>Plots.jl</source>
        <publisher-name>Zenodo</publisher-name>
        <year iso-8601-date="2021-06">2021</year><month>06</month>
        <uri>https://doi.org/10.5281/zenodo.4907285</uri>
        <pub-id pub-id-type="doi">10.5281/zenodo.4907285</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

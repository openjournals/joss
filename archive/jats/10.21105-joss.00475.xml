<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">475</article-id>
<article-id pub-id-type="doi">10.21105/joss.00475</article-id>
<title-group>
<article-title>An easy-to-use p5.js 3D object picker for visual
artists</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8321-2062</contrib-id>
<string-name>David J Harris</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Queensland College of Art, Griffith
University</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2017-11-16">
<day>16</day>
<month>11</month>
<year>2017</year>
</pub-date>
<volume>2</volume>
<issue>20</issue>
<fpage>475</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>visual arts</kwd>
<kwd>p5.js</kwd>
<kwd>3D</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Visual artists who are relatively new to using code as a tool for
  developing new artistic ideas and processes have programming languages
  such as Processing
  (<xref alt="Fry &amp; Reas, n.d." rid="ref-processingwebsite" ref-type="bibr">Fry
  &amp; Reas, n.d.</xref>) and p5.js
  (<xref alt="Mccarthy, n.d." rid="ref-p5jswebsite" ref-type="bibr">Mccarthy,
  n.d.</xref>) as accessible entry points. However, artists who wish to
  start exploring more complex visual environments, such as interactive
  3D models, face a steep learning curve as these applications are not
  built in to those languages nor covered in the standard references
  (<xref alt="Mccarthy, n.d." rid="ref-p5jswebsite" ref-type="bibr">Mccarthy,
  n.d.</xref>;
  <xref alt="McCarthy, 2016" rid="ref-mccarthy2016" ref-type="bibr">McCarthy,
  2016</xref>).</p>
</sec>
<sec id="existing-lack-of-3d-object-picking-in-p5.js">
  <title>Existing (lack of) 3D object picking in p5.js</title>
  <p>p5.js does not have any built-in capacity to identify elements of a
  3D model from the position on a 2D canvas on which it is projected.
  That means that developers don’t have an easy way to make applications
  in which a user is able to interact with the 3D model via a 2D canvas
  by position, mouse click, or equivalent.</p>
  <p>To make the identification between 3D model and 2D canvas in a
  conventional approach would require relatively complex calculations
  based on knowledge of camera position, location in 3D space of
  objects, and detailed geometry of 3D elements. For example,
  identifying whether a point on the 2D canvas is “on” a 3D torus
  primitive becomes a difficult geometrical calculation if one is to
  avoid false identifications with the torus hole. Furthermore, there is
  no built-in functionality to determine the camera position from a
  canvas object.</p>
</sec>
<sec id="principle-of-how-mpicker-works">
  <title>Principle of how mPicker works</title>
  <p>This set of functions employs a workaround by using a parallel
  hidden canvas that draws a copy of each 3D primitive in a color that
  is defined by the primitive’s identifier (a user-chosen integer ID
  that is used as a color value). Then objects are identified by simply
  examining the color of the pixel on the hidden canvas corresponding to
  a mouse click or other decision technique and returning the color
  value as object identifier.</p>
  <p>More complex objects can be constructed by using the same object ID
  when creating each primitive. Then picking any point on that compound
  object will return the same ID.</p>
</sec>
<sec id="user-case">
  <title>User case</title>
  <p>This set of functions provides an easy-to-use entry point for
  visual artists who are prototyping visual concepts for artistic
  application, whether the outputs are eventual browser implementation,
  or as proof-of-principle for virtual reality or other interactive 3D
  applications.</p>
  <p>As many artists new to coding are not yet familiar with
  object-oriented programming and begin with simple functional
  programming, the mPicker code consists of a set of functions that
  allow artists to replace standard p5.js 3D functions with consistently
  named variants, requiring just a single extra parameter for the
  generation of primitives. Then simple functions allow them to identify
  objects based on interaction with the 2D canvas on which the 3D model
  is projected. This approach allows artists to explore new ways of
  creating artistic output without needing to first build a more
  extensive background of coding skills and without needing to perform
  any mathematical calculations.</p>
  <p>The set of functions can either be included as a javascript file or
  simply copied into a p5.js sketch.js file for the simplest possible
  use.</p>
  <p>This module was developed by the author as part of graduate work at
  the Queensland College of Art, Griffith University, and tested with
  undergraduate students in the course “Creative Coding”.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-mccarthy2016">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>McCarthy</surname><given-names>Lauren</given-names></name>
        </person-group>
        <source>Getting started with p5.js : Making interactive graphics in JavaScript and processing</source>
        <publisher-name>Maker Media, Inc</publisher-name>
        <publisher-loc>San Francisco, CA</publisher-loc>
        <year iso-8601-date="2016">2016</year>
        <isbn>978-1457186776</isbn>
      </element-citation>
    </ref>
    <ref id="ref-p5jswebsite">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Mccarthy</surname><given-names>Lauren</given-names></name>
        </person-group>
        <article-title>p5.js</article-title>
        <source>p5.js</source>
        <uri>https://p5js.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-processingwebsite">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Fry</surname><given-names>Ben</given-names></name>
          <name><surname>Reas</surname><given-names>Casey</given-names></name>
        </person-group>
        <article-title>Processing.org</article-title>
        <source>Processing.org</source>
        <uri>https://processing.org/</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

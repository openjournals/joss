<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">2042</article-id>
<article-id pub-id-type="doi">10.21105/joss.02042</article-id>
<title-group>
<article-title>MetSim: A Python package for estimation and
disaggregation of meteorological data</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7742-3138</contrib-id>
<string-name>Andrew R. Bennett</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-7479-8439</contrib-id>
<string-name>Joseph J. Hamman</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4062-0322</contrib-id>
<string-name>Bart Nijssen</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Civil and Environmental Engineering,
University of Washington</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Climate and Global Dynamics Laboratory, National Center for
Atmospheric Research</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-01-08">
<day>8</day>
<month>1</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>47</issue>
<fpage>2042</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>meteorology</kwd>
<kwd>hydrology</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>While there has been a boom in the availablity of climate, weather,
  and environmental data thanks to satellite observations, syntheses of
  in situ observed data sets, and the ubiquity of powerful computers, it
  is also still often the case that the required data to run complex
  environmental models is either missing, or at the wrong spatial or
  temporal resolution. For example, incoming shortwave radiation,
  longwave radiation, and humidity are often observed with varying
  record lengths and observation intervals. Further, even when such
  quantities are measured it is often at a daily timestep, while many
  environmental models require finer time scales for simulation. To
  provide the necessary data to solve the model equations in such
  circumstances we must be able to provide estimates for these
  quantities at the appropriate temporal resolution.
  <monospace>MetSim</monospace> is a Python package and standalone tool
  for the estimation of meteorological quantities at variable time
  scales that can address the issues described above. The data that
  <monospace>MetSim</monospace> can generate covers most of the
  variables that sophisticated environmental models may require as
  input, making it possible to run them in a wider variety of situations
  than is possible with off-the-shelf datasets. This is especially
  important in fields such as hydrology and ecology, where there is an
  increasing push towards finer scale data than is commonly available.
  <monospace>MetSim</monospace> can be used to generate spatially
  distributed sub-daily timeseries of incoming shortwave radiation,
  outgoing longwave radiation, air pressure, specific humidity, relative
  humidity, vapor pressure, precipitation, and air temperature given
  daily timeseries of minimum temperature, maximum temperature, and
  precipitation. Figure 1 shows an example of
  <monospace>MetSim</monospace>’s transformations of these daily values
  into some of the available subdaily outputs. A summary of the
  available output variables and tunable parameters are included in the
  documentation.</p>
  <fig>
    <caption><p>An example of <monospace>MetSim</monospace> input and
    output. The daily values are shown on the left are used as input
    along with a number of parameters to produce the hourly output shown
    on the right. The sample data used to generate this figure is
    included in the <monospace>MetSim</monospace>
    repository.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="figure1.png" xlink:title="" />
  </fig>
  <p>We have based <monospace>MetSim</monospace> on methods from the
  Mountain Microclimate Simulator (<monospace>MTCLIM</monospace>) and
  the forcing preprocessor that was built into the Variable Infiltration
  Capacity (<monospace>VIC</monospace>) hydrological model version 4
  (<xref alt="Bohn et al., 2013" rid="ref-BohnU003A2013" ref-type="bibr">Bohn
  et al., 2013</xref>;
  <xref alt="Liang et al., 1994" rid="ref-LiangU003A1994" ref-type="bibr">Liang
  et al., 1994</xref>;
  <xref alt="Thornton &amp; Running, 1999" rid="ref-ThorntonU003A1999" ref-type="bibr">Thornton
  &amp; Running, 1999</xref>). The development of
  <monospace>MetSim</monospace> was motivated by gaps in the approaches
  of both <monospace>MTCLIM</monospace> and the
  <monospace>VIC</monospace> forcing preprocessor. The
  <monospace>MTCLIM</monospace> software has not been updated since 2003
  and the software does not implement the forcing disaggregation
  routines which are necessary for models to run at sub-daily timesteps.
  Recent developments on the <monospace>VIC</monospace> model have
  removed the forcing preprocessor due to algorithmic changes in the
  model driver. We noticed that processors for forcing estimation and
  disaggregation usually were implemented as ad hoc solutions based on
  similar workflows and algorithms, and wanted to formalize the process
  of generating forcing data by developing
  <monospace>MetSim</monospace>. At the same time, this provides a basis
  for others to expand a set of commonly available routines.</p>
  <p><monospace>MetSim</monospace> provides a modern workflow, building
  upon previous tools by improving performance by adding scalable
  parallelism, adding new IO routines, allowing for exact restarts, and
  providing an extensible architecture which can incorporate new
  features. We have implemented <monospace>MetSim</monospace> in a way
  that allows for runs on arbitrary spatial configurations and at
  arbitrary spatial scales, as opposed to the forced latitude-longitude
  grid that was used in the VIC preprocessor. We have designed
  <monospace>MetSim</monospace> to fit into the broader scientific
  Python ecosystem, building on popular packages such as
  <monospace>xarray</monospace>
  (<xref alt="Hoyer &amp; Hamman, 2017" rid="ref-xarray" ref-type="bibr">Hoyer
  &amp; Hamman, 2017</xref>), <monospace>dask</monospace>
  (<xref alt="Rocklin, 2015" rid="ref-dask" ref-type="bibr">Rocklin,
  2015</xref>), <monospace>pandas</monospace>
  (<xref alt="McKinney, 2010" rid="ref-pandas" ref-type="bibr">McKinney,
  2010</xref>), and <monospace>numba</monospace>
  (<xref alt="Lam et al., 2015" rid="ref-numba" ref-type="bibr">Lam et
  al., 2015</xref>).</p>
</sec>
<sec id="architecture-and-performance">
  <title>Architecture and performance</title>
  <p><monospace>MetSim</monospace>’s architecture follows the common
  design of a model driver that coordinates high level operations and
  that delegates computation to several modules to do the bulk of the
  work. The top level model driver handles all IO routines as well as
  job scheduling and parallelism. A schematic representation of
  <monospace>MetSim</monospace>’s architecture is shown in Figure 2.
  <monospace>MetSim</monospace> provides both a command line tool and
  API access as a Python module. The command line tool provides an
  interface to the driver via configuration files and command line
  options.</p>
  <fig>
    <caption><p>A schematic representation of the
    <monospace>MetSim</monospace> software flow</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="figure2.png" xlink:title="" />
  </fig>
  <p><monospace>MetSim</monospace> has three main computation modules
  for solar geometry, meteorological simulation, and temporal
  disaggregation. The solar geometry module computes the daily potential
  radiation, daylength, transmittance of the atmosphere, and the
  fraction of daily radiation received at the top of atmosphere during
  each 30 second interval. Computations are based on the algorithms
  described in Whiteman &amp; Allwine
  (<xref alt="1986" rid="ref-WhitemanU003A1986" ref-type="bibr">1986</xref>)
  as implemented in MTCLIM
  (<xref alt="Thornton &amp; Running, 1999" rid="ref-ThorntonU003A1999" ref-type="bibr">Thornton
  &amp; Running, 1999</xref>). The data from the solar geometry module
  is fed to the meteorology simulation module along with the input
  forcings. <monospace>MetSim</monospace> implements the estimation
  methods discussed in Bohn et al.
  (<xref alt="2013" rid="ref-BohnU003A2013" ref-type="bibr">2013</xref>)
  and Thornton &amp; Running
  (<xref alt="1999" rid="ref-ThorntonU003A1999" ref-type="bibr">1999</xref>)
  to estimate the daily mean temperature, shortwave radiation, vapor
  pressure, and potential evapotranspiration. If disaggregation to
  shorter time steps is configured, the data is passed from the
  meteorology simulation module to the disaggregation module. Bohn et
  al.
  (<xref alt="2013" rid="ref-BohnU003A2013" ref-type="bibr">2013</xref>)
  provides a further description and evaluation of these algorithms.
  Here we briefly mention the disaggregation procedures for
  completeness, but no substantial changes were made to the earlier
  algorithms.</p>
  <p>Shortwave is disaggregated by multiplying the total daily shortwave
  by the fraction of radiation received in a given timestep (provided by
  the solar geometry module). This calculation is corrected for cloud
  cover by assuming constant transmissivity throughout the day (which is
  calculated in the meteorological simulation module). Temperature is
  disaggregated by estimating the time at which the daily maximum and
  daily minimum temperatures occur. These are chosen so that the daily
  minimum temperature occurs at sunrise and the daily maximum
  temperature occurs at a fixed time during the day (which is
  configurable by the user as a parameter in the configuration file if
  desired). Then a Hermite polynomial interpolation is used to obtain
  the full temperature timeseries at sub-daily time steps. Vapor
  pressure is disaggregated by linearly interpolating between the
  saturation vapor pressure values calculated based on the daily minimum
  temperature and that are assumed to occur at the time of the daily
  minimum temperature. An additional correction is made to ensure that
  the vapor pressure at any given time step does not exceed the
  saturation vapor pressure, which is calculated directly from the
  disaggregated temperature timeseries. Air pressure is disaggregated by
  using the disaggregated temperature as well as the elevation data
  provided by the domain file. Both specific and relative humidity are
  then disaggregated using the disaggregated temperature and air
  pressure time series. If provided, wind speed is disaggregated, but is
  assumed to be constant throughout the day.</p>
  <p>As part of the model configuration, the user can select from a
  number of different algorithms to estimate longwave radiation.
  Sub-daily values are calculated with the selected method using the
  disaggregated values for vapor pressure and temperature.</p>
  <p>Precipitation can be disaggregated in one of two ways. The first
  and simplest way is to evenly spread the daily precipitation across
  the sub-daily time steps. The second method requires two additional
  parameters to be specified in the domain file to represent the average
  precipitation duration and the time of peak precipitation for each
  cell. The method then disaggregates precipitation by constructing a
  triangular kernel with total area equal to the daily precipitation
  centered at the time which is specified as the time of peak
  precipitation.</p>
  <p><monospace>MetSim</monospace> implements several options for
  parallelism, which are primarily managed by the
  <monospace>Dask</monospace>
  (<xref alt="Rocklin, 2015" rid="ref-dask" ref-type="bibr">Rocklin,
  2015</xref>) and <monospace>xarray</monospace>
  (<xref alt="Hoyer &amp; Hamman, 2017" rid="ref-xarray" ref-type="bibr">Hoyer
  &amp; Hamman, 2017</xref>) libraries. We explore
  <monospace>MetSim</monospace>’s computational performance by
  conducting two scaling experiments. Strong scaling experiments test
  how the total runtime is affected by adding processors for a fixed
  overall problem size. Weak scaling experiments test how the total
  runtime is affected by adding processors proportional to the overall
  problem size. In ideal cases the runtime halves when doubling the
  number of processors for strong scaling experiments and remains
  constant for weak scaling experiments. These ideal cases are
  represented by the “perfect” cases shown in Figure 3. All of the times
  reported for the scaling experiments were for a single year run at an
  hourly time step with default parameter and output settings. For the
  strong scaling experiment we ran <monospace>MetSim</monospace> for one
  year at an hourly timestep over a domain of 6333 cells and ran using
  2, 4, 8, 16, 32, 64, and 128 processors. The time to complete each run
  is shown in Figure 3 (left). The results show that scaling is nearly
  linear with the number of processors.</p>
  <p>In the weak scaling experiment we ran <monospace>MetSim</monospace>
  using 2, 4, 8, 16, 32, 64, and 128 processors while varying the number
  of cells in the run to maintain a constant workload per processor. We
  ran 125 cells per 2 processors, resulting in runs of 125, 250, 500,
  1000, 2000, 4000, and 8000 cells, respectively. The results of the
  weak scaling experiment are shown in Figure 3 (right). Similarly to
  the strong scaling experiment, we see increasing penalties for adding
  additional processors.</p>
  <fig>
    <caption><p><monospace>MetSim</monospace> scaling
    performance</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="figure3.png" xlink:title="" />
  </fig>
</sec>
<sec id="applications-related-work">
  <title>Applications &amp; Related work</title>
  <p><monospace>MetSim</monospace> has been used in several research
  applications predominantly for generating input to hydrologic models,
  though other applications are possible. Bohn et al.
  (<xref alt="2019" rid="ref-bohn2019" ref-type="bibr">2019</xref>)
  extended the precipitation disaggregation component to include a new
  option which was shown to result in better streamflow predictions than
  the default method. Cheng et al.
  (<xref alt="2020" rid="ref-ChengU003A2020" ref-type="bibr">2020</xref>)
  used <monospace>MetSim</monospace> as a component of their modeling
  framework to explore how reservoirs affect stream temperatures, and
  how reservoir operations may be able to help mitigate the effects of
  climate change on warming stream temperatures. The Climate Toolbox
  (<xref alt="Hegewisch et al., 2020" rid="ref-toolbox" ref-type="bibr">Hegewisch
  et al., 2020</xref>) uses <monospace>MetSim</monospace> to generate
  meteorological data as an intermediate step for developing hydrologic
  predictions. <monospace>MetSim</monospace> has many other possible
  uses and is developer-friendly enough for it to be extended to provide
  additional functionality.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-dask">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Rocklin</surname><given-names>Matthew</given-names></name>
        </person-group>
        <article-title>Dask: Parallel computation with blocked algorithms and task scheduling</article-title>
        <source>Proceedings of the 14th Python in Science Conference</source>
        <person-group person-group-type="editor">
          <name><surname>Huff</surname><given-names>Kathryn</given-names></name>
          <name><surname>Bergstra</surname><given-names>James</given-names></name>
        </person-group>
        <year iso-8601-date="2015">2015</year>
        <pub-id pub-id-type="doi"> 10.25080/Majora-7b98e3ed-013 </pub-id>
      </element-citation>
    </ref>
    <ref id="ref-toolbox">
      <element-citation publication-type="webpage">
        <person-group person-group-type="author">
          <name><surname>Hegewisch</surname><given-names>Katherine</given-names></name>
          <name><surname>Abatzoglou</surname><given-names>John</given-names></name>
          <name><surname>Chegwidden</surname><given-names>Oriana</given-names></name>
          <name><surname>Nijssen</surname><given-names>Bart</given-names></name>
        </person-group>
        <article-title>Climate toolbox</article-title>
        <year iso-8601-date="2020">2020</year>
        <date-in-citation content-type="access-date"><year iso-8601-date="2020">2020</year></date-in-citation>
        <uri>https://climatetoolbox.org/</uri>
      </element-citation>
    </ref>
    <ref id="ref-pandas">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>McKinney</surname><given-names>Wes</given-names></name>
        </person-group>
        <article-title>Data structures for statistical computing in Python</article-title>
        <source>Proceedings of the 9th Python in Science Conference</source>
        <person-group person-group-type="editor">
          <name><surname>Walt</surname><given-names>Stéfan van der</given-names></name>
          <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
        </person-group>
        <year iso-8601-date="2010">2010</year>
        <pub-id pub-id-type="doi">  10.25080/Majora-92bf1922-00a </pub-id>
      </element-citation>
    </ref>
    <ref id="ref-numba">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Lam</surname><given-names>Siu Kwan</given-names></name>
          <name><surname>Pitrou</surname><given-names>Antoine</given-names></name>
          <name><surname>Seibert</surname><given-names>Stanley</given-names></name>
        </person-group>
        <article-title>Numba: A LLVM-based Python JIT compiler</article-title>
        <source>Proceedings of the second workshop on the LLVM compiler infrastructure in HPC</source>
        <publisher-name>Association for Computing Machinery</publisher-name>
        <publisher-loc>New York, NY, USA</publisher-loc>
        <year iso-8601-date="2015">2015</year>
        <isbn>9781450340052</isbn>
        <uri>https://doi.org/10.1145/2833157.2833162</uri>
        <pub-id pub-id-type="doi">10.1145/2833157.2833162</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-xarray">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hoyer</surname><given-names>S.</given-names></name>
          <name><surname>Hamman</surname><given-names>J.</given-names></name>
        </person-group>
        <article-title>Xarray: N-D labeled arrays and datasets in Python</article-title>
        <source>Journal of Open Research Software</source>
        <publisher-name>Ubiquity Press</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>5</volume>
        <issue>1</issue>
        <uri>http://doi.org/10.5334/jors.148</uri>
        <pub-id pub-id-type="doi">10.5334/jors.148</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-WhitemanU003A1986">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Whiteman</surname><given-names>C.David</given-names></name>
          <name><surname>Allwine</surname><given-names>K.Jerry</given-names></name>
        </person-group>
        <article-title>Extraterrestrial solar radiation on inclined surfaces</article-title>
        <source>Environmental Software</source>
        <year iso-8601-date="1986">1986</year>
        <volume>1</volume>
        <issue>3</issue>
        <issn>0266-9838</issn>
        <uri>http://dx.doi.org/10.1016/0266-9838(86)90020-1</uri>
        <pub-id pub-id-type="doi">10.1016/0266-9838(86)90020-1</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ThorntonU003A1999">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Thornton</surname><given-names>Peter E.</given-names></name>
          <name><surname>Running</surname><given-names>Steven W.</given-names></name>
        </person-group>
        <article-title>An improved algorithm for estimating incident daily solar radiation from measurements of temperature, humidity, and precipitation</article-title>
        <source>Agricultural and Forest Meteorology</source>
        <year iso-8601-date="1999">1999</year>
        <volume>93</volume>
        <issue>4</issue>
        <issn>0168-1923</issn>
        <uri>http://dx.doi.org/10.1016/S0168-1923(98)00126-9</uri>
        <pub-id pub-id-type="doi">10.1016/S0168-1923(98)00126-9</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-BohnU003A2013">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bohn</surname><given-names>Theodore J.</given-names></name>
          <name><surname>Livneh</surname><given-names>Ben</given-names></name>
          <name><surname>Oyler</surname><given-names>Jared W.</given-names></name>
          <name><surname>Running</surname><given-names>Steve W.</given-names></name>
          <name><surname>Nijssen</surname><given-names>Bart</given-names></name>
          <name><surname>Lettenmaier</surname><given-names>Dennis P.</given-names></name>
        </person-group>
        <article-title>Global evaluation of MTCLIM and related algorithms for forcing of ecological and hydrological models</article-title>
        <source>Agricultural and Forest Meteorology</source>
        <year iso-8601-date="2013">2013</year>
        <volume>176</volume>
        <issue></issue>
        <issn>0168-1923</issn>
        <uri>https://doi.org/10.1016/j.agrformet.2013.03.003</uri>
        <pub-id pub-id-type="doi">10.1016/j.agrformet.2013.03.003</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-bohn2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bohn</surname><given-names>Theodore J.</given-names></name>
          <name><surname>Whitney</surname><given-names>Kristen M.</given-names></name>
          <name><surname>Mascaro</surname><given-names>Giuseppe</given-names></name>
          <name><surname>Vivoni</surname><given-names>Enrique R.</given-names></name>
        </person-group>
        <article-title>A deterministic approach for approximating the diurnal cycle of precipitation for use in large-scale hydrological modeling</article-title>
        <source>Journal of Hydrometeorology</source>
        <year iso-8601-date="2019">2019</year>
        <volume>20</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1175/JHM-D-18-0203.1</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ChengU003A2020">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Cheng</surname><given-names>Yifan</given-names></name>
          <name><surname>Voisin</surname><given-names>Nathalie</given-names></name>
          <name><surname>Yearsley</surname><given-names>John</given-names></name>
          <name><surname>Nijssen</surname><given-names>Bart</given-names></name>
        </person-group>
        <article-title>Reservoirs modify river thermal regime sensitivity to climate change: A case study in the southeastern United States. (In review)</article-title>
        <source>Water Resources Research</source>
        <year iso-8601-date="2020">2020</year>
      </element-citation>
    </ref>
    <ref id="ref-LiangU003A1994">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Liang</surname><given-names>Xu</given-names></name>
          <name><surname>Lettenmaier</surname><given-names>Dennis P.</given-names></name>
          <name><surname>Wood</surname><given-names>Eric F.</given-names></name>
          <name><surname>Burges</surname><given-names>Stephen J.</given-names></name>
        </person-group>
        <article-title>A simple hydrologically based model of land surface water and energy fluxes for general circulation models</article-title>
        <source>Journal of Geophysical Research: Atmospheres</source>
        <year iso-8601-date="1994">1994</year>
        <volume>99</volume>
        <issue>D7</issue>
        <issn>2156-2202</issn>
        <uri>http://dx.doi.org/10.1029/94JD00483</uri>
        <pub-id pub-id-type="doi">10.1029/94JD00483</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

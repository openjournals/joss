<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1986</article-id>
<article-id pub-id-type="doi">10.21105/joss.01986</article-id>
<title-group>
<article-title>DAFSA: a Python library for Deterministic Acyclic Finite
State Automata</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-2863-1467</contrib-id>
<string-name>Tiago Tresoldi</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Linguistic and Cultural Evolution, Max Planck
Institute for the Science of Human History</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2020-02-16">
<day>16</day>
<month>2</month>
<year>2020</year>
</pub-date>
<volume>5</volume>
<issue>46</issue>
<fpage>1986</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>finite state automata</kwd>
<kwd>deterministic acyclic finite state automaton</kwd>
<kwd>directed acyclic word graph</kwd>
<kwd>sequence analysis</kwd>
<kwd>morphology</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>This work describes
  <ext-link ext-link-type="uri" xlink:href="https://pypi.org/project/dafsa/"><monospace>dafsa</monospace></ext-link>,
  a Python library for computing graphs from lists of strings for
  identifying, visualizing, and inspecting patterns of substrings. The
  library is designed for usage by linguists in studies on morphology
  and formal grammars, and is intended for faster, easier, and simpler
  generation of visualizations. It collects frequency weights by
  default, it can condense structures, and it provides several export
  options. Figure 1 depicts a basic DAFSA, based upon five English words
  and generated with default settings.</p>
  <fig>
    <caption><p>Visual representation of a DAFSA for the list of strings
    <monospace>&quot;dib&quot;</monospace>,
    <monospace>&quot;tip&quot;</monospace>,
    <monospace>&quot;tips&quot;</monospace>, and
    <monospace>&quot;top&quot;</monospace>.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="https://raw.githubusercontent.com/tresoldi/dafsa/master/figures/example.png" xlink:title="" />
  </fig>
</sec>
<sec id="background">
  <title>Background</title>
  <p>Deterministic Acyclic Finite State Automata (DAFSA, also known as
  “Directed Acyclic Word Graphs”, or DAWG) are data structures extended
  from tries and used to describe collections of strings through
  directed acyclic graphs with a sole source vertex (the
  <monospace>start</monospace> of all sequences), at least one sink node
  (each pointed to by one or more edges), and edge labels carrying
  information on the sequence of characters that form the strings
  (<xref alt="Black &amp; Pieterse, 1998" rid="ref-BlackU003A2008" ref-type="bibr">Black
  &amp; Pieterse, 1998</xref>;
  <xref alt="Blumer et al., 1985" rid="ref-BlumerU003A1985" ref-type="bibr">Blumer
  et al., 1985</xref>;
  <xref alt="Lucchesi &amp; Kowaltowski, 1993" rid="ref-LucchesiU003A1993" ref-type="bibr">Lucchesi
  &amp; Kowaltowski, 1993</xref>). A compact variant
  (<xref alt="Crochemore &amp; Vérin, 1997" rid="ref-CrochemoreU003A1997" ref-type="bibr">Crochemore
  &amp; Vérin, 1997</xref>) condenses the structure by merging every
  node which is an only child with its parent, concatenating their
  labels. The resulting graph is a particular finite state recognizer,
  accepting all and only the strings from the original list.</p>
  <p>DAFSAs are mostly used for the memory-efficient storage of sets of
  strings, such as in spelling correction and in non-probabilistic set
  membership check
  (<xref alt="Blumer et al., 1985" rid="ref-BlumerU003A1985" ref-type="bibr">Blumer
  et al., 1985</xref>;
  <xref alt="Ciura &amp; Deorowicz, 2001" rid="ref-CiuraU003A2001" ref-type="bibr">Ciura
  &amp; Deorowicz, 2001</xref>;
  <xref alt="Havon, 2011" rid="ref-HavonU003A2011" ref-type="bibr">Havon,
  2011</xref>;
  <xref alt="Lucchesi &amp; Kowaltowski, 1993" rid="ref-LucchesiU003A1993" ref-type="bibr">Lucchesi
  &amp; Kowaltowski, 1993</xref>). While there have been proposals for
  applying them to the treatment and analysis of pattern repetitions,
  especially in genomics
  (<xref alt="Crochemore &amp; Vérin, 1997" rid="ref-CrochemoreU003A1997" ref-type="bibr">Crochemore
  &amp; Vérin, 1997</xref>), no general-purpose library designed for
  such exploration and visualization is available. In specific, as a
  consequence of most implementations being designed for an efficient
  set membership testing, no available library builds DAFSAs that
  collect node and edge frequency.</p>
</sec>
<sec id="installation-usage-examples">
  <title>Installation, Usage, &amp; Examples</title>
  <p>The library can be installed with the standard
  <monospace>pip</monospace> tool for package management:</p>
  <code language="bash">$ pip install dafsa</code>
  <p>The
  <ext-link ext-link-type="uri" xlink:href="https://dafsa.readthedocs.io/en/latest/quickstart.html">documentation</ext-link>
  offers detailed instructions on how to use the library. For most
  purposes it is sufficient to create a new <monospace>DAFSA</monospace>
  object and initialize it with the list of strings, as in the
  generation of the graph for Figure 1:</p>
  <code language="python">&gt;&gt;&gt; from dafsa import DAFSA
&gt;&gt;&gt; d = DAFSA([&quot;dib&quot;, &quot;tap&quot;, &quot;top&quot;, &quot;taps&quot;, &quot;tops&quot;])</code>
  <p>The library will by default collect frequency weights for each edge
  and node. We can export the resulting structures in either a custom
  textual format (using the standard <monospace>repr()</monospace>
  command) or in GML format (using the
  <monospace>.write_gml()</monospace> method), or convert them to
  equivalent graphs in the <monospace>networkx</monospace> library
  (using the <monospace>.to_graph()</monospace> method). Visualizations
  can be generated through DOT source code (using the
  <monospace>.to_dot()</monospace> method), and manipulated according to
  the users’ preferences and needs. An auxiliary
  <monospace>.write_figure()</monospace> method allows to generate
  figures in PNG, SVG, or PDF format if <monospace>graphviz</monospace>
  is available, as in Figure 2.</p>
  <fig>
    <caption><p>A non-condensed DAFSA for a list of 9 Italian words
    phonetically transcribed.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="https://raw.githubusercontent.com/tresoldi/dafsa/master/figures/phonemes.png" xlink:title="" />
  </fig>
  <p>Graphs are not condensed by default, as in Figure 2, but
  condensation can be performed by setting the
  <monospace>condense</monospace> flag when initializing the object, as
  done in the following code snippet and illustrated in Figure 3:</p>
  <code language="python">&gt;&gt;&gt; words = [
    &quot;o k: j o&quot;, &quot;o r e k: j o&quot;, &quot;n a z o&quot;,
    &quot;s e&quot;, &quot;s e n t i r e&quot;, &quot;s e n s o&quot;,
    &quot;g u a r d a r e&quot;, &quot;a m a r e&quot;, &quot;v o l a r e&quot;]
&gt;&gt;&gt; words = [word.split() for word in words]
&gt;&gt;&gt; d = DAFSA(words, condense=True)</code>
  <fig>
    <caption><p>A condensed DAFSA for the same list of 9 Italian words
    phonetically transcribed used in Figure 2.</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="https://raw.githubusercontent.com/tresoldi/dafsa/master/figures/reduced_phonemes.png" xlink:title="" />
  </fig>
  <p>A command-line <monospace>dafsa</monospace> tool is provided along
  with the library. Assuming the data is found in a
  <monospace>phonemes.txt</monospace> file, with one sequence per line,
  a PDF version of Figure 3 can be generated with the following call,
  where <monospace>-c</monospace> instructs to condense the graph,
  <monospace>-t</monospace> specifies the output format, and
  <monospace>-o</monospace> the output file:</p>
  <code language="bash">$ dafsa -c -t pdf -o phonemes.pdf phonemes.txt</code>
</sec>
<sec id="alternatives">
  <title>Alternatives</title>
  <p>The main alternatives to this library, such as the Python
  <ext-link ext-link-type="uri" xlink:href="https://github.com/pytries/DAWG"><monospace>DAWG</monospace>
  package</ext-link>, are based on <monospace>dwagdic</monospace> C++
  library, designed for production usage of memory- and speed-efficient
  data structures. The unsupported <monospace>adfa</monospace> and
  <monospace>minim</monospace> packages by Daciuk et al.
  (<xref alt="2000" rid="ref-DaciukU003A2000" ref-type="bibr">2000</xref>)
  are closer in intention, as well as the Python prototype by Havon
  (<xref alt="2011" rid="ref-HavonU003A2011" ref-type="bibr">2011</xref>).
  Similar functionalities are offered by several tools for analysis of
  genetic data, usually as an extension of sequence alignments, but none
  as an autonomous tool that can be employed with generic lists of
  strings.</p>
</sec>
<sec id="code-and-documentation-availability">
  <title>Code and Documentation Availability</title>
  <p>The <monospace>dafsa</monospace> source code is available on GitHub
  at
  <ext-link ext-link-type="uri" xlink:href="https://github.com/tresoldi/dafsa">https://github.com/tresoldi/dafsa</ext-link>.</p>
  <p>The documentation is available at
  <ext-link ext-link-type="uri" xlink:href="https://dafsa.readthedocs.io/">https://dafsa.readthedocs.io/</ext-link>.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>The author has received funding from the European Research Council
  (ERC) under the European Union’s Horizon 2020 research and innovation
  programme (grant agreement
  No. <ext-link ext-link-type="uri" xlink:href="https://cordis.europa.eu/project/rcn/206320/factsheet/en">ERC
  Grant #715618</ext-link>,
  <ext-link ext-link-type="uri" xlink:href="https://digling.org/calc/">Computer-Assisted
  Language Comparison</ext-link>).</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-BlackU003A2008">
      <element-citation publication-type="chapter">
        <article-title>Directed acyclic word graph</article-title>
        <source>Dictionary of algorithms and data structures</source>
        <person-group person-group-type="editor">
          <name><surname>Black</surname><given-names>Paul E.</given-names></name>
          <name><surname>Pieterse</surname><given-names>Vreda</given-names></name>
        </person-group>
        <publisher-name>National Institute of Standards and Technology</publisher-name>
        <publisher-loc>Gaithersburg</publisher-loc>
        <year iso-8601-date="1998">1998</year>
      </element-citation>
    </ref>
    <ref id="ref-CrochemoreU003A1997">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Crochemore</surname><given-names>Maxime</given-names></name>
          <name><surname>Vérin</surname><given-names>Renaud</given-names></name>
        </person-group>
        <article-title>On compact directed acyclic word graphs</article-title>
        <source>Structures in logic and computer science</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="1997">1997</year>
      </element-citation>
    </ref>
    <ref id="ref-BlumerU003A1985">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Blumer</surname><given-names>Anselm C.</given-names></name>
          <name><surname>Blumer</surname><given-names>Janet A.</given-names></name>
          <name><surname>Haussler</surname><given-names>David</given-names></name>
          <name><surname>Ehrenfeucht</surname><given-names>Andrzej</given-names></name>
          <name><surname>Chen</surname><given-names>Mu-Tian</given-names></name>
          <name><surname>Seiferas</surname><given-names>Joel I.</given-names></name>
        </person-group>
        <article-title>The smallest automation recognizing the subwords of a text</article-title>
        <source>Theoretical computer science</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="1985">1985</year>
        <volume>40</volume>
        <pub-id pub-id-type="doi">10.1016/0304-3975(85)90157-4</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-CiuraU003A2001">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Ciura</surname><given-names>Marcin G</given-names></name>
          <name><surname>Deorowicz</surname><given-names>Sebastian</given-names></name>
        </person-group>
        <article-title>How to squeeze a lexicon</article-title>
        <source>Software: Practice and Experience</source>
        <publisher-name>Wiley Online Library</publisher-name>
        <year iso-8601-date="2001">2001</year>
        <volume>31</volume>
        <issue>11</issue>
        <pub-id pub-id-type="doi">10.1002/spe.402</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-DaciukU003A2000">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Daciuk</surname><given-names>Jan</given-names></name>
          <name><surname>Mihov</surname><given-names>Stoyan</given-names></name>
          <name><surname>Watson</surname><given-names>Bruce W</given-names></name>
          <name><surname>Watson</surname><given-names>Richard E</given-names></name>
        </person-group>
        <article-title>Incremental construction of minimal acyclic finite-state automata</article-title>
        <source>Computational linguistics</source>
        <publisher-name>MIT Press</publisher-name>
        <year iso-8601-date="2000">2000</year>
        <volume>26</volume>
        <issue>1</issue>
      </element-citation>
    </ref>
    <ref id="ref-LucchesiU003A1993">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lucchesi</surname><given-names>Cláudio L</given-names></name>
          <name><surname>Kowaltowski</surname><given-names>Tomasz</given-names></name>
        </person-group>
        <article-title>Applications of finite automata representing large vocabularies</article-title>
        <source>Software: Practice and Experience</source>
        <publisher-name>Wiley Online Library</publisher-name>
        <year iso-8601-date="1993">1993</year>
        <volume>23</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1002/spe.4380230103</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-HavonU003A2011">
      <element-citation publication-type="webpage">
        <person-group person-group-type="author">
          <name><surname>Havon</surname><given-names>Steve</given-names></name>
        </person-group>
        <article-title>Compressing dictionaries with a DAWG</article-title>
        <year iso-8601-date="2011">2011</year>
        <uri>http://stevehanov.ca/blog/?id=115</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

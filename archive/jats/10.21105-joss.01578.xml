<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">1578</article-id>
<article-id pub-id-type="doi">10.21105/joss.01578</article-id>
<title-group>
<article-title>Singularity Compose: Orchestration for Singularity
Instances</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-4387-3819</contrib-id>
<string-name>Vanessa Sochat</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Stanford University Research Computing, Stanford
University, Stanford, CA 94305</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2019-06-24">
<day>24</day>
<month>6</month>
<year>2019</year>
</pub-date>
<volume>4</volume>
<issue>40</issue>
<fpage>1578</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>containers</kwd>
<kwd>singularity</kwd>
<kwd>linux</kwd>
<kwd>orchestration</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>Singularity Compose is an orchestration tool for Singularity
  container instances.</p>
  <fig>
    <caption><p>Singularity Compose</p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="singularity-compose.png" xlink:title="" />
  </fig>
  <p>The Singularity container technology started to become popular in
  2016, as it offered a more secure option to run encapsulated
  environments
  (<xref alt="Kurtzer et al., 2017" rid="ref-Kurtzer2017-xj" ref-type="bibr">Kurtzer
  et al., 2017</xref>). Traditionally, this meant that Singularity users
  could run a script built into the container (called a runscript),
  execute a custom command, or shell into a container. Unlike Docker
  (<xref alt="Merkel, 2014" rid="ref-Merkel2014-da" ref-type="bibr">Merkel,
  2014</xref>), these basic interactions simply interacted with
  processes in the foreground (e.g., running a script and exiting) and
  were not appropriate to run background services. This was a task for
  container instances
  (<xref alt="Singularity contributors, 2019" rid="ref-SingularityInstances" ref-type="bibr">Singularity
  contributors, 2019</xref>).</p>
  <p>A container instance
  (<xref alt="Singularity contributors, 2019" rid="ref-SingularityInstances" ref-type="bibr">Singularity
  contributors, 2019</xref>) equates to running a container in a
  detached or daemon mode. Instances allow for running persistent
  services in the background, and then interaction with these services
  from the host and other containers. Examples of services include
  databases, web servers, and associated applications that interact with
  them. While a container technology can provide command line and other
  programmatic interfaces for interaction with instances, what is also
  needed is a configuration file for orchestration and customization of
  several instances. For sibling container technology Docker, Docker
  Compose
  (<xref alt="Docker, Inc., 2019" rid="ref-DockerCompose" ref-type="bibr">Docker,
  Inc., 2019</xref>) was developed for this purpose. For local and
  production usage, the user could create a
  <monospace>docker-compose.yml</monospace> file to define services,
  volumes, ports exposed, and other customizations to networking and
  environment
  (<xref alt="Docker, Inc., 2019" rid="ref-DockerCompose" ref-type="bibr">Docker,
  Inc., 2019</xref>). Notably, there was strong incentive for the
  development of such a tool, because Docker Compose existed before
  Kubernetes was available in the middle of 2015
  (<xref alt="Wikipedia contributors, 2019" rid="ref-Wikipedia_contributors2019-bw" ref-type="bibr">Wikipedia
  contributors, 2019</xref>).</p>
  <p>No equivalent orchestration tool was created for Singularity
  container instances. While Singularity has empowered enterprise users
  to run services via platforms such as Kubernetes
  (<xref alt="Meyer, 2019" rid="ref-Meyer2019-sd" ref-type="bibr">Meyer,
  2019</xref>), these platforms come with privilege. It is often the
  case that a production Kubernetes cluster is not readily available to
  a user via his or her institution, or that the user cannot pay a cloud
  provider to deploy one. However, this does not imply that a non
  enterprise user (e.g., an open source developer or academic) would not
  benefit from such an orchestration tool. Unfortunately, since the
  current trend and strongest potential for making profits is centered
  around encouraging usage of enterprise tools like Kubernetes
  (<xref alt="Wikipedia contributors, 2019" rid="ref-Wikipedia_contributors2019-bw" ref-type="bibr">Wikipedia
  contributors, 2019</xref>), there is not any urgent incentive on part
  of the provider companies to invest in a non-enterprise orchestration
  tool. It is logical, rational, and understandable that companies exist
  to make profit, and must make profit to exist. As the need is
  unfulfilled, it is the responsibility of the open source community to
  step up.</p>
  <sec id="singularity-compose">
    <title>Singularity Compose</title>
    <p>The solution for orchestration of container instances from the
    open source community is Singularity Compose
    (<xref alt="Sochat, 2019c" rid="ref-SingularityCompose" ref-type="bibr">Sochat,
    2019c</xref>). Singularity Compose is software for non enterprise
    users to easily create a configuration file to control creation and
    interaction of Singularity container instances. It allows for the
    creation of a <monospace>singularity-compose.yml</monospace> file,
    in which the user can define one or more container services,
    optionally with exposed ports and volumes on the host. The user can
    easily define a container binary to build or pull from a remote
    resource, along with custom scripts to run after creation of the
    instances. Singularity Compose handles designation of addresses on a
    local bridge network for each container, and creation of resource
    files to bind to the containers to “see” one another. Importantly,
    by way of adding a Singularity Compose to a repository, a user is
    ensuring not just reproducibility of a container recipe, but also
    reproducibility of it’s build and creation of services. For example,
    a simplified version of a sequence of steps to build two containers
    and bring them up as instances might look like this:</p>
    <code language="bash">$ sudo singularity build app/app.sif app/Singularity
$ sudo singularity build nginx/nginx.sif nginx/Singularity.nginx

$ singularity instance start \
   --bind nginx.conf:/etc/nginx/conf.d/default.conf \
   --bind nginx/uwsgi_params.par:/etc/nginx/uwsgi_params.par \
   --bind nginx/cache:/var/cache/nginx \
   --bind nginx/run:/var/run \
   --bind app:/code \
   --bind static:/var/www/static \
   --bind images:/var/www/images \
   --bind etc.hosts:/etc/hosts \
   --net --network-args &quot;portmap=80:80/tcp&quot; --network-args &quot;IP=10.22.0.2&quot; \
   --hostname nginx --writable-tmpfs nginx/nginx.sif nginx

$ singularity instance start \
   --bind app:/code \
   --bind static:/var/www/static \
   --bind images:/var/www/images \
   --bind etc.hosts:/etc/hosts \
   --net --network-args &quot;portmap=8000:8000/tcp&quot; --network-args &quot;IP=10.22.0.3&quot; \
   --hostname app --writable-tmpfs app/app.sif app

$ singularity instance list</code>
    <p>This is a complicated set of commands. In the above, we first
    build the two containers. There are no checks here if the recipes
    exist, or if the containers themselves already exist. We then start
    instances for them. If we save these commands in a file, we need to
    consistently hard code the paths to the container binaries, along
    with the ip addresses, hostnames, and volumes. There are no checks
    done before attempting the creation if the volumes meant to be bound
    actually exist. We also take for granted that we’ve already
    generated an <monospace>etc.hosts</monospace> file to bind to the
    container at <monospace>/etc/hosts</monospace>, which will define
    the container instances to have the same names supplied with
    <monospace>--hostname</monospace>. For the networking, we have to be
    mindful of the default bridge provided by Singularity, along with
    how to specify networking arguments under different conditions. This
    entire practice is clearly tedious. For a user to constantly need to
    generate and then re-issue these commands, it’s not a comfortable
    workflow. However, with Singularity Compose, the user writes a
    <monospace>singularity-compose.yml</monospace> file once:</p>
    <code language="yaml">version: &quot;1.0&quot;
instances:

  nginx:
    build:
      context: ./nginx
      recipe: Singularity.nginx
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./uwsgi_params.par:/etc/nginx/uwsgi_params.par
      - ./nginx/cache:/var/cache/nginx
      - ./nginx/run:/var/run
    ports:
      - 80:80
    depends_on:
      - app
    volumes_from:
      - app

  app:
    build:
      context: ./app
    volumes:
      - ./app:/code
      - ./static:/var/www/static
      - ./images:/var/www/images
    ports:
      - 8000:8000</code>
    <p>And then can much more readily see and reproduce generation of
    the same services. The user can easily build all non-existing
    containers, and bring up all services with one command:</p>
    <code language="bash">$ singularity-compose up</code>
    <p>And then easily bring services down, restart, shell into a
    container, execute a command to a container, or run a container’s
    internal runscript.</p>
    <code language="bash">$ singularity-compose down                   # stop services
$ singularity-compose restart                # stop and start services
$ singularity-compose shell app              # shell into an instance
$ singularity-compose exec app &quot;Hello!&quot;      # execute a command
$ singularity-compose run app                # run internal runscript</code>
    <p>These interactions greatly improve both reproducibility and
    running of any development workflow that is not appropriate for an
    enterprise cluster but relies on orchestration of container
    instances.</p>
    <p>For the interested reader, the complete documentation for
    Singularity Compose
    (<xref alt="Sochat, 2019c" rid="ref-SingularityCompose" ref-type="bibr">Sochat,
    2019c</xref>) is provided, along with the code on GitHub
    (<xref alt="Sochat, 2019b" rid="ref-SingularityComposeGithub" ref-type="bibr">Sochat,
    2019b</xref>). For additional walkthroughs and complete examples, we
    direct the reader to the examples repository, also on GitHub
    (<xref alt="Sochat, 2019a" rid="ref-SingularityComposeExamples" ref-type="bibr">Sochat,
    2019a</xref>). Contribution by way of additional examples,
    questions, or requests for development of a new example are
    appreciated and welcome.</p>
  </sec>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Kurtzer2017-xj">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kurtzer</surname><given-names>Gregory M</given-names></name>
          <name><surname>Sochat</surname><given-names>Vanessa</given-names></name>
          <name><surname>Bauer</surname><given-names>Michael W</given-names></name>
        </person-group>
        <article-title>Singularity: Scientific containers for mobility of compute</article-title>
        <source>PLoS One</source>
        <publisher-name>Public Library of Science</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>12</volume>
        <issue>5</issue>
        <pub-id pub-id-type="doi">10.1371/journal.pone.0177459</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-SingularityCompose">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Sochat</surname><given-names>Vanessa</given-names></name>
        </person-group>
        <source>Singularity-compose</source>
        <publisher-name>https://singularityhub.github.io/singularity-compose</publisher-name>
        <year iso-8601-date="2019-06-24">2019</year><month>06</month><day>24</day>
      </element-citation>
    </ref>
    <ref id="ref-SingularityComposeGithub">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Sochat</surname><given-names>Vanessa</given-names></name>
        </person-group>
        <source>Singularity compose Github</source>
        <publisher-name>https://github.com/singularityhub/singularity-compose</publisher-name>
        <year iso-8601-date="2019-06-24">2019</year><month>06</month><day>24</day>
      </element-citation>
    </ref>
    <ref id="ref-DockerCompose">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <string-name>Docker, Inc.</string-name>
        </person-group>
        <source>Docker Compose</source>
        <publisher-name>https://docs.docker.com/compose/</publisher-name>
        <year iso-8601-date="2019-06-24">2019</year><month>06</month><day>24</day>
      </element-citation>
    </ref>
    <ref id="ref-SingularityComposeExamples">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Sochat</surname><given-names>Vanessa</given-names></name>
        </person-group>
        <source>Singularity compose examples</source>
        <publisher-name>https://github.com/singularityhub/singularity-compose-examples</publisher-name>
        <year iso-8601-date="2019-06-24">2019</year><month>06</month><day>24</day>
      </element-citation>
    </ref>
    <ref id="ref-Merkel2014-da">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Merkel</surname><given-names>Dirk</given-names></name>
        </person-group>
        <article-title>Docker: Lightweight Linux containers for consistent development and deployment</article-title>
        <source>Linux J.</source>
        <publisher-name>Belltown Media</publisher-name>
        <publisher-loc>Houston, TX</publisher-loc>
        <year iso-8601-date="2014-03">2014</year><month>03</month>
        <volume>2014</volume>
      </element-citation>
    </ref>
    <ref id="ref-Wikipedia_contributors2019-bw">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>Wikipedia contributors</string-name>
        </person-group>
        <article-title>Kubernetes</article-title>
        <publisher-name>https://en.wikipedia.org/w/index.php?title=Kubernetes&amp;oldid=903021989</publisher-name>
        <year iso-8601-date="2019-06">2019</year><month>06</month>
      </element-citation>
    </ref>
    <ref id="ref-SingularityInstances">
      <element-citation>
        <person-group person-group-type="author">
          <string-name>Singularity contributors</string-name>
        </person-group>
        <article-title>Running services — Singularity container 3.2 documentation</article-title>
        <publisher-name>https://sylabs.io/guides/3.2/user-guide/running_services.html?highlight=instances</publisher-name>
        <year iso-8601-date="2019">2019</year>
      </element-citation>
    </ref>
    <ref id="ref-Meyer2019-sd">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Meyer</surname><given-names>Dan</given-names></name>
        </person-group>
        <article-title>Sylabs slides singularity updates into its enterprise pro package</article-title>
        <publisher-name>https://www.sdxcentral.com/articles/news/sylabs-slides-singularity-updates-into-its-enterprise-pro-package/2019/04/</publisher-name>
        <year iso-8601-date="2019-04">2019</year><month>04</month>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">598</article-id>
<article-id pub-id-type="doi">10.21105/joss.00598</article-id>
<title-group>
<article-title>DynamicalSystems.jl: A Julia software library for chaos
and nonlinear dynamics</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-6427-2385</contrib-id>
<string-name>George Datseris</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Max Planck Institute for Dynamics and Self-Organization,
Göttingen, Germany</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2018-02-24">
<day>24</day>
<month>2</month>
<year>2018</year>
</pub-date>
<volume>3</volume>
<issue>23</issue>
<fpage>598</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>chaos</kwd>
<kwd>physics</kwd>
<kwd>nonlinear</kwd>
<kwd>lyapunov</kwd>
<kwd>entropy</kwd>
<kwd>dimension</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="introduction">
  <title>Introduction</title>
  <p>Chaotic systems are everywhere
  (<xref alt="Strogatz, 1995" rid="ref-Strogatz" ref-type="bibr">Strogatz,
  1995</xref>), from celestial mechanics to biology to electron
  transport. Not only do they cover many scales, but the phenomena that
  fall under the scope of “nonlinear dynamics” are multi-faceted
  (<xref alt="Faust et al., 2015" rid="ref-Faust2015" ref-type="bibr">Faust
  et al., 2015</xref>). This vast extent of chaotic systems requires the
  use of methods from nonlinear dynamics and chaos theory in many
  diverse areas of science.</p>
  <p>On the other hand, chaotic systems are not analytically solvable,
  therefore studying them often relies on numerical methods. Many such
  methods have been devised to study the many facets of nonlinear
  systems, but unfortunately no up-to-date and comprehensive library
  collecting these methods exists.</p>
</sec>
<sec id="enter-dynamicalsystems.jl">
  <title>Enter <bold>DynamicalSystems.jl</bold></title>
  <p><bold>DynamicalSystems.jl</bold> was created to fill this role. It
  is a Julia
  (<xref alt="Bezanson et al., 2017" rid="ref-Bezanson2017" ref-type="bibr">Bezanson
  et al., 2017</xref>) library that offers functionality useful in the
  study of chaos, nonlinear dynamics and time-series analysis.
  <bold>DynamicalSystems.jl</bold> itself is also a part of the
  <ext-link ext-link-type="uri" xlink:href="https://github.com/JuliaDynamics">JuliaDynamics</ext-link>
  organization, similarly with the package DynamicalBilliards.jl
  (<xref alt="Datseris, 2017" rid="ref-Datseris2017" ref-type="bibr">Datseris,
  2017</xref>).</p>
  <p>The official documentation is hosted
  <ext-link ext-link-type="uri" xlink:href="https://juliadynamics.github.io/DynamicalSystems.jl/latest/">here</ext-link>.</p>
  <sec id="dynamicalsystems.jl-goals">
    <title><bold>DynamicalSystems.jl</bold> Goals</title>
    <p>Our goals with this library can be summarized as:</p>
    <list list-type="order">
      <list-item>
        <p>Be concise, intuitive, and general.</p>
      </list-item>
      <list-item>
        <p>Be accurate, reliable and performant.</p>
      </list-item>
      <list-item>
        <p>Be transparent with respect to what is happening “under the
        hood”, i.e. be clear about exactly what each function call does.
        We take care of this aspect in many ways; by being
        well-documented, giving references to scientific papers and
        having clear source code.</p>
      </list-item>
    </list>
  </sec>
  <sec id="features">
    <title>Features</title>
    <list list-type="bullet">
      <list-item>
        <p>General &amp; flexible dynamical system definition
        interface.</p>
      </list-item>
      <list-item>
        <p>Automatic computation of Jacobians through automatic
        differentiation.</p>
      </list-item>
      <list-item>
        <p>Dedicated interface for datasets, including IO.</p>
      </list-item>
      <list-item>
        <p>Delay coordinates embedding.</p>
      </list-item>
      <list-item>
        <p>Poincaré surface of sections.</p>
      </list-item>
      <list-item>
        <p>Orbit diagrams (also called bifurcation diagrams).</p>
      </list-item>
      <list-item>
        <p>Automated production of orbit diagrams for continuous
        systems.</p>
      </list-item>
      <list-item>
        <p>Maximum Lyapunov exponent.</p>
      </list-item>
      <list-item>
        <p>Spectrum of Lyapunov exponents.</p>
      </list-item>
      <list-item>
        <p>Generalized entropies &amp; permutation entropy.</p>
      </list-item>
      <list-item>
        <p>Generalized dimensions and automated procedure of deducing
        them.</p>
      </list-item>
      <list-item>
        <p>Neighborhood estimation of points in a dataset.</p>
      </list-item>
      <list-item>
        <p>Numerical (maximum) Lyapunov exponent of a timeseries.</p>
      </list-item>
      <list-item>
        <p>Finding fixed points of a map of any order.</p>
      </list-item>
      <list-item>
        <p>Detecting and distinguishing chaos using the GALI method.</p>
      </list-item>
    </list>
    <p>We advise the reader to visit the latest
    <ext-link ext-link-type="uri" xlink:href="https://juliadynamics.github.io/DynamicalSystems.jl/latest/#contents">overview</ext-link>
    because new methods are constantly enriching
    <bold>DynamicalSystems.jl</bold>.</p>
  </sec>
  <sec id="similar-existing-software">
    <title>Similar existing software</title>
    <p>We would now like to mention three other software packages that
    offer similar functionality to ours. We are only considering
    open-sourced packages in this section.</p>
    <p>The first,
    <ext-link ext-link-type="uri" xlink:href="http://www.physik3.gwdg.de/tstool/index.html">TSTOOL</ext-link>,
    is aimed at nonlinear time series analysis and is implemented in
    MATLAB (which is Proprietary software) with a partial backend of
    C++. Features of TSTOOLS that are not currently offered by
    <bold>DynamicalSystems.jl</bold> are surrogate time-series and
    estimating suitable dimensions for delay coordinates embedding.
    TSTOOL operates on datasets, and thus any dataset can easily be
    loaded through the provided interface, but there is no definition of
    equations of motion. This has the result that all methods contained
    cannot take advantage of known equations of motion.</p>
    <p>The second, E&amp;F chaos
    (<xref alt="Diks et al., 2008" rid="ref-Diks2008" ref-type="bibr">Diks
    et al., 2008</xref>), is implemented in LUA with a partial C/Pascal
    backend and is aimed at nonlinear dynamics in economics and finance.
    Features of E&amp;F chaos that we do not offer are basin boundary
    plots, cobwebs and parameter basins. E&amp;F chaos is the only
    software mentioned here that allows definition of new systems
    through equations of motion.</p>
    <p>Finally, LP-VIcode
    (<xref alt="Carpintero et al., 2014" rid="ref-Carpintero2014" ref-type="bibr">Carpintero
    et al., 2014</xref>) is a suite devoted solely for computing
    variational indicators of chaos and is written in FORTRAN77.
    <bold>DynamicalSystems.jl</bold> offers only the latest indicator
    from all the ones available in LP-VIcode, namely GALI
    (<xref alt="Skokos et al., 2007" rid="ref-Skokos2007" ref-type="bibr">Skokos
    et al., 2007</xref>). In addition, LP-VIcode places the severe
    constrain that all systems must not only be Hamiltonian, but must
    also have parabolic kinetic energy term, making it unusable for any
    other system type, Hamiltonian or not.</p>
    <sec id="dynamicalsystems.jl-advantages-vs-other-packages">
      <title><bold>DynamicalSystems.jl</bold> advantages vs other
      packages</title>
      <list list-type="bullet">
        <list-item>
          <p>It is written in purely in Julia
          (<xref alt="Bezanson et al., 2017" rid="ref-Bezanson2017" ref-type="bibr">Bezanson
          et al., 2017</xref>).</p>
          <list list-type="bullet">
            <list-item>
              <p>Julia is (currently) the only open sourced &amp;
              dynamic language that has performance equal to C/Fortran,
              allowing interactivity without adding computational
              costs.</p>
            </list-item>
          </list>
        </list-item>
        <list-item>
          <p>Fully exposes the differential equation solvers of
          continuous systems, and gives the user the (possible) full
          control over them through the DifferentialEquations.jl suite
          (<xref alt="Rackauckas &amp; Nie, 2017" rid="ref-Rackauckas2017" ref-type="bibr">Rackauckas
          &amp; Nie, 2017</xref>).</p>
        </list-item>
        <list-item>
          <p>Offers the widest range of methods.</p>
        </list-item>
        <list-item>
          <p>Transparent and small source code.</p>
        </list-item>
        <list-item>
          <p>It is concise, intuitive and general: all functions work
          just as well with any defined dynamical system.</p>
        </list-item>
        <list-item>
          <p>Extendable; adding new systems or algorithms requires
          minimal effort.</p>
        </list-item>
        <list-item>
          <p>Actively maintained and constantly growing.</p>
        </list-item>
        <list-item>
          <p>Hosted on GitHub, making interaction of users and
          developers easy and straightforward.</p>
        </list-item>
      </list>
    </sec>
  </sec>
</sec>
<sec id="examples">
  <title>Examples</title>
  <p>In the following examples we want to demonstrate some of the
  capabilities of <bold>DynamicalSystems.jl</bold>. In the first example
  will show how one can find the Lyapunov spectrum of a continuous
  system, while the second will show how to use delay coordinates
  embedding to calculate the attractor dimension from a time series.
  Both examples are benchmarked on a laptop with Intel(R) Core(TM)
  i5-6200U CPU @ 2.30 Ghz, 8GB RAM, 64-bit Windows 10 operating system
  and Julia version v0.6.2.</p>
  <sec id="lyapunov-spectrum-of-a-continuous-system">
    <title>Lyapunov spectrum of a continuous system</title>
    <p>The first step is to create a
    <monospace>DynamicalSystem</monospace> structure:</p>
    <code language="julia"># Pkg.add(&quot;DynamicalSystems&quot;)
using DynamicalSystems
# Define Lorenz system: equations take the current state `u`
# with parameters `p` at time `t` and return an SVector
# with the derivatives.
@inline @inbounds function lorenz(u, p, t)
    σ = p[1]; ρ = p[2]; β = p[3]
    du1 = σ*(u[2]-u[1])
    du2 = u[1]*(ρ-u[3]) - u[2]
    du3 = u[1]*u[2] - β*u[3]
    return SVector{3}(du1, du2, du3)
end
# A function for the Jacobian is useful but not necessary;
# If it is not given, automatic differentiation is used
@inline @inbounds function lorenz_jac(u, p, t)
    σ, ρ, β = p
    J = @SMatrix [-σ  σ  0;
    ρ - u[3]  (-1)  (-u[1]);
    u[2]   u[1]  -β]
    return J
end
# typical chaotic initial condition:
u0=[0.0, 10.0, 0.0]
# parameters with strange attractor:
p = [10, 28, 8/3]

# Create the dynamical system structure
ds = ContinuousDynamicalSystem(lorenz, u0, p, lorenz_jac)</code>
    <preformat>3-dimensional continuous dynamical system
 state:     [0.0, 10.0, 0.0]
 e.o.m.:    lorenz
 in-place?  false
 jacobian:  lorenz_jac</preformat>
    <p>This structure can now be given to functions like
    <monospace>lyapunovs</monospace></p>
    <code language="julia"># Calculate the full lyapunov spectrum by doing QR-decomposition 2000 times
# and evolving in between for 2.0 units of time
λs = lyapunovs(ds, 2000; dt = 2.0)</code>
    <preformat>Float64[3]
0.904…
-0.000115…
-14.6…</preformat>
    <code language="julia"># benchmark:
using BenchmarkTools
@btime lyapunovs($ds, 2000; dt = 2.0);</code>
    <preformat>  225.790 ms (348 allocations: 35.58 KiB)</preformat>
    <p>Of course specific numbers change from run to run (random
    initialized Q-matrix).</p>
    <p>It is worth noting that the default differential equation solver
    used for continuous systems is a 9th order Vernier algorithm, with
    absolute and relative tolerances of <monospace>1e-9</monospace>.
    This must be taken into account before comparing benchmarks with
    other software. However, because of the excellent interaction of our
    library with the DifferentialEquations.jl suite
    (<xref alt="Rackauckas &amp; Nie, 2017" rid="ref-Rackauckas2017" ref-type="bibr">Rackauckas
    &amp; Nie, 2017</xref>), it is very straight forward to use a
    different ODE solver.</p>
  </sec>
  <sec id="information-dimension-from-delay-coordinates-embedding">
    <title>Information Dimension from Delay Coordinates
    Embedding</title>
    <p>Here we show how to analyze timeseries with
    <bold>DynamicalSystems.jl</bold>. We first generate example
    timeseries of the Hénon map
    (<xref alt="Henon, 1976" rid="ref-Henon1976" ref-type="bibr">Henon,
    1976</xref>) and then calculate the fractal dimension of the
    underlying attractor.</p>
    <code language="julia">ds = Systems.henon() # load one of the predefined systems

# Get a trajectory of the system:
traj = trajectory(ds, 100000)

# A timeseries is univariate:
ts = traj[:, 1] # first column of dataset

# Now perform delay coordinates embedding of dimension 2 and delay 2:
R = Reconstruction(ts, 2, 2)

# Now e.g. calculate the Information dimension
id = information_dim(R)

# For reference, we can compute the information dimension of the
# Henon attractor directly, because we have a trajectory
id_direct = information_dim(traj, sizes)

println(&quot;Dimensions: $(round(id, 4)), $(round(id_direct, 4))&quot;)

# Benchmark:
@btime Reconstruction($ts, 2, 2);
@btime information_dim($traj);</code>
    <preformat>Dimensions: 1.1979, 1.2
  653.181 μs (3 allocations: 1.53 MiB)
  590.347 ms (1819827 allocations: 118.57 MiB)</preformat>
    <p>We note that the function <monospace>information_dim</monospace>,
    and other similar ones, computes a lot of automated steps by
    measuring entropies at many different partition sizes (by default
    12) and deducing a scaling slope. All of these parameters can be
    changed by the user.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to thank Chris Rackauckas
  (<xref alt="Rackauckas &amp; Nie, 2017" rid="ref-Rackauckas2017" ref-type="bibr">Rackauckas
  &amp; Nie, 2017</xref>) for excellent help regarding the integration
  of the DifferentialEquations.jl suite to our library. We thank
  Takafumi Arakaki for contributing a method that computes the
  permutation entropy of a timeseries. We thank Sebastian
  Micluța-Câmpeanu for minor testing of continuous systems methods.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Strogatz">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Strogatz</surname><given-names>Steven H.</given-names></name>
        </person-group>
        <source>Nonlinear Dynamics And Chaos</source>
        <publisher-name>Perseus Books</publisher-name>
        <year iso-8601-date="1995">1995</year>
        <isbn>0-201-54344-3</isbn>
      </element-citation>
    </ref>
    <ref id="ref-Faust2015">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Faust</surname><given-names>Gunter</given-names></name>
          <name><surname>Argyris</surname><given-names>John</given-names></name>
          <name><surname>Faust</surname><given-names>Gunter</given-names></name>
          <name><surname>Haase</surname><given-names>Maria</given-names></name>
          <name><surname>Friedrich</surname><given-names>Rudolf</given-names></name>
        </person-group>
        <source>An Exploration of Dynamical Systems and Chaos</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2015">2015</year>
        <isbn>9783662460412</isbn>
      </element-citation>
    </ref>
    <ref id="ref-Diks2008">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Diks</surname><given-names>Cees</given-names></name>
          <name><surname>Hommes</surname><given-names>Cars</given-names></name>
          <name><surname>Panchenko</surname><given-names>Valentyn</given-names></name>
          <name><surname>Weide</surname><given-names>Roy</given-names></name>
        </person-group>
        <article-title>E&amp;F chaos: A user friendly software package for nonlinear economic dynamics</article-title>
        <source>Computational Economics</source>
        <year iso-8601-date="2008">2008</year>
        <volume>32</volume>
        <issue>1-2</issue>
        <isbn>1061400891</isbn>
        <issn>09277099</issn>
        <pub-id pub-id-type="doi">10.1007/s10614-008-9130-x</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Carpintero2014">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Carpintero</surname><given-names>D. D.</given-names></name>
          <name><surname>Maffione</surname><given-names>N.</given-names></name>
          <name><surname>Darriba</surname><given-names>L.</given-names></name>
        </person-group>
        <article-title>LP-VIcode: A program to compute a suite of variational chaos indicators</article-title>
        <source>Astronomy and Computing</source>
        <year iso-8601-date="2014">2014</year>
        <volume>5</volume>
        <issn>22131337</issn>
        <uri>https://arxiv.org/abs/1404.2152</uri>
        <pub-id pub-id-type="doi">10.1016/j.ascom.2014.04.001</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Bezanson2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Bezanson</surname><given-names>Jeff</given-names></name>
          <name><surname>Edelman</surname><given-names>Alan</given-names></name>
          <name><surname>Karpinski</surname><given-names>Stefan</given-names></name>
          <name><surname>Shah</surname><given-names>Viral B.</given-names></name>
        </person-group>
        <article-title>Julia: A Fresh Approach to Numerical Computing</article-title>
        <source>SIAM Review</source>
        <year iso-8601-date="2017-01">2017</year><month>01</month>
        <volume>59</volume>
        <issue>1</issue>
        <issn>0036-1445</issn>
        <uri>http://epubs.siam.org/doi/10.1137/141000671</uri>
        <pub-id pub-id-type="doi">10.1137/141000671</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Datseris2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Datseris</surname><given-names>George</given-names></name>
        </person-group>
        <article-title>DynamicalBilliards.jl: An easy-to-use, modular and extendable julia package for dynamical billiard systems in two dimensions.</article-title>
        <source>The Journal of Open Source Software</source>
        <year iso-8601-date="2017-11">2017</year><month>11</month>
        <volume>2</volume>
        <issue>19</issue>
        <uri>https://doi.org/10.21105/joss.00458</uri>
        <pub-id pub-id-type="doi">10.21105/joss.00458</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Skokos2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Skokos</surname><given-names>Ch.</given-names></name>
          <name><surname>Bountis</surname><given-names>T. C.</given-names></name>
          <name><surname>Antonopoulos</surname><given-names>Ch.</given-names></name>
        </person-group>
        <article-title>Geometrical properties of local dynamics in Hamiltonian systems: The Generalized Alignment Index (GALI) method</article-title>
        <source>Physica D: Nonlinear Phenomena</source>
        <year iso-8601-date="2007-07">2007</year><month>07</month>
        <volume>231</volume>
        <issue>1</issue>
        <issn>01672789</issn>
        <uri>http://linkinghub.elsevier.com/retrieve/pii/S0167278907001273</uri>
        <pub-id pub-id-type="doi">10.1016/j.physd.2007.04.004</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Henon1976">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Henon</surname><given-names>M.</given-names></name>
        </person-group>
        <article-title>A two-dimensional mapping with a strange attractor</article-title>
        <source>Communications in Mathematical Physics</source>
        <year iso-8601-date="1976-02">1976</year><month>02</month>
        <volume>50</volume>
        <issue>1</issue>
        <isbn>9750471504</isbn>
        <issn>0010-3616</issn>
        <uri>http://link.springer.com/10.1007/BF01608556</uri>
        <pub-id pub-id-type="doi">10.1007/BF01608556</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Rackauckas2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Rackauckas</surname><given-names>Christopher</given-names></name>
          <name><surname>Nie</surname><given-names>Qing</given-names></name>
        </person-group>
        <article-title>DifferentialEquations.jl – A Performant and Feature-Rich Ecosystem for Solving Differential Equations in Julia</article-title>
        <source>Journal of Open Research Software</source>
        <year iso-8601-date="2017-05">2017</year><month>05</month>
        <volume>5</volume>
        <issn>2049-9647</issn>
        <uri>http://openresearchsoftware.metajnl.com/articles/10.5334/jors.151/</uri>
        <pub-id pub-id-type="doi">10.5334/jors.151</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

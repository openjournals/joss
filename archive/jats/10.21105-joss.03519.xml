<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3519</article-id>
<article-id pub-id-type="doi">10.21105/joss.03519</article-id>
<title-group>
<article-title>BisPy: Bisimulation in Python</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-9508-7801</contrib-id>
<string-name>Francesco Andreuzzi</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Internation School of Advanced Studies, SISSA, Trieste,
Italy</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Universit√† degli Studi di Trieste</institution>
</institution-wrap>
</aff>
</contrib-group>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-07-11">
<day>11</day>
<month>7</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>65</issue>
<fpage>3519</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>Bisimulation</kwd>
<kwd>Graph theory</kwd>
<kwd>Graph algorithms</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>A binary relation <inline-formula><alternatives>
  <tex-math><![CDATA[\mathcal{B}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mstyle mathvariant="script"><mml:mi>‚Ñ¨</mml:mi></mml:mstyle></mml:math></alternatives></inline-formula>
  on the set <inline-formula><alternatives>
  <tex-math><![CDATA[V]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>V</mml:mi></mml:math></alternatives></inline-formula>
  of the nodes of a directed graph is a bisimulation if the following
  condition is satisfied
  (<xref alt="Gentilini et al., 2003" rid="ref-gentilini" ref-type="bibr">Gentilini
  et al., 2003</xref>):</p>
  <p></p>
  <p>A <italic>labeling function</italic> <inline-formula><alternatives>
  <tex-math><![CDATA[\ell : V \to L]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>‚Ñì</mml:mi><mml:mo>:</mml:mo><mml:mi>V</mml:mi><mml:mo>‚Üí</mml:mo><mml:mi>L</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>
  may be introduced, in which case the graph becomes a <italic>Kripke
  structure</italic> and the additional condition
  <inline-formula><alternatives>
  <tex-math><![CDATA[(a,b) \in \mathcal{B} \implies \ell(a) = \ell(b)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>a</mml:mi><mml:mo>,</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>‚àà</mml:mo><mml:mstyle mathvariant="script"><mml:mi>‚Ñ¨</mml:mi></mml:mstyle><mml:mo>‚üπ</mml:mo><mml:mi>‚Ñì</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>a</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mi>‚Ñì</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>b</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  must be satisfied.</p>
  <fig>
    <caption><p>On the left, a balanced tree paired with a labeling
    function, which induces a partition on
    <inline-formula><alternatives>
    <tex-math><![CDATA[V]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>V</mml:mi></mml:math></alternatives></inline-formula>
    of cardinality 2. We visually represent the corresponding maximum
    bisimulation on the right, computed using
    .<styled-content id="figU003Aexample"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="example.png" xlink:title="" />
  </fig>
  <p>The notion of <italic>bisimulation</italic> and in particular of
  <italic>maximum bisimulation</italic> ‚Äî namely the bisimulation which
  contains all the other bisimulations on the graph ‚Äî has applications
  in modal logic, formal verification, and concurrency theory
  (<xref alt="Kanellakis &amp; Smolka, 1990" rid="ref-kanellakis" ref-type="bibr">Kanellakis
  &amp; Smolka, 1990</xref>), and is used for graph reduction as well
  (<xref alt="Gentilini et al., 2003" rid="ref-gentilini" ref-type="bibr">Gentilini
  et al., 2003</xref>). The fact that <italic>graphs</italic> may be
  used to create digital models of a wide span of complex systems makes
  bisimulation a useful tool in many different cases. For this reason
  several algorithms for the computation of maximum bisimulation have
  been studied throughout the years, and it is now known that the
  problem has an <inline-formula><alternatives>
  <tex-math><![CDATA[O(|E| \log |V|)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo>log</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
  algorithmic solution
  (<xref alt="Paige &amp; Tarjan, 1987" rid="ref-paigetarjan" ref-type="bibr">Paige
  &amp; Tarjan, 1987</xref>), where <inline-formula><alternatives>
  <tex-math><![CDATA[V]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>V</mml:mi></mml:math></alternatives></inline-formula>
  is the set of nodes in the graph, and <inline-formula><alternatives>
  <tex-math><![CDATA[E]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>E</mml:mi></mml:math></alternatives></inline-formula>
  is the set of edges of the graph.</p>
  <p><inline-formula><alternatives>
  <tex-math><![CDATA[\texttt{BisPy}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">ùô±ùöíùöúùôøùö¢</mml:mtext></mml:math></alternatives></inline-formula>
  is a Python package for the computation of maximum bisimulation.</p>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>To the best of our knowledge, is the first Python project to
  address the problem presented above, and to meet the objectives of
  healthy open source software, namely extensive testing, documentation,
  and intuitive code commenting.</p>
  <p>We think that our project may be a useful tool to study practical
  cases for students approaching the field ‚Äî since the notion of
  bisimulation may be somewhat counterintuitive at first glance ‚Äî as
  well as for established researchers, who may use to study improvements
  on particular types of graphs and to compare new algorithms with the
  state of the art.</p>
  <p>It is interesting to observe that the package , briefly presented
  below, contains the implementation of more than one algorithm for the
  computation of maximum bisimulation, and every algorithm uses a
  peculiar strategy to obtain the result. For this reason, we think that
  our package may be useful to assess the performance of different
  approaches on a particular problem.</p>
</sec>
<sec id="section">
  <title></title>
  <p>Our package contains the implementation of the following
  algorithms:</p>
  <list list-type="bullet">
    <list-item>
      <p>Paige-Tarjan
      (<xref alt="1987" rid="ref-paigetarjan" ref-type="bibr">1987</xref>),
      which employs an insight from the famous algorithm for the
      minimization of finite states automata
      (<xref alt="Hopcroft, 1971" rid="ref-hopcroft" ref-type="bibr">Hopcroft,
      1971</xref>);</p>
    </list-item>
    <list-item>
      <p>Dovier-Piazza-Policriti
      (<xref alt="2001" rid="ref-dovier" ref-type="bibr">2001</xref>),
      which uses the notion of <italic>rank</italic> to optimize the
      overhead of splitting the initial partition, and can be computed ‚Äî
      prior the execution of the algorithm ‚Äî using an
      <inline-formula><alternatives>
      <tex-math><![CDATA[O(|V|+|E|)]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>O</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo>+</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>
      procedure
      (<xref alt="Sharir, 1981" rid="ref-sharir" ref-type="bibr">Sharir,
      1981</xref>;
      <xref alt="Tarjan, 1972" rid="ref-tarjan" ref-type="bibr">Tarjan,
      1972</xref>);</p>
    </list-item>
    <list-item>
      <p>Saha
      (<xref alt="2007" rid="ref-saha" ref-type="bibr">2007</xref>),
      which can be used to update the maximum bisimulation of a graph
      after the addition of a new edge, and is more efficient than the
      computation <italic>from scratch</italic> in some cases (the
      computational complexity depends on how much the maximum
      bisimulation changes due to the modification).</p>
    </list-item>
  </list>
  <p>Our implementations have been tested and documented deeply;
  moreover we split the algorithms into smaller functions, which we
  prefer to having a monolithic block of code in order to improve
  readability and testability. This kind of modularity allows us to
  reuse functions across multiple algorithms, since several procedures
  are shared (e.g., <inline-formula><alternatives>
  <tex-math><![CDATA[\texttt{split}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mtext mathvariant="monospace">ùöúùöôùöïùöíùöù</mml:mtext></mml:math></alternatives></inline-formula>
  is used in all three of the algorithms that we mentioned above, while
  the computation of rank is carried out only in the last two), and for
  the same reason we think that the addition of new functionalities
  would be straightforward since we have already implemented a
  significant set of common functions.</p>
</sec>
<sec id="example">
  <title>Example</title>
  <p>We present the code that we used to generate the example shown in
  <xref alt="Figure¬†1" rid="figU003Aexample">Figure¬†1</xref>. First of
  all we import the modules needed to generate the graph ( takes
  directed graphs in input) and to compute the maximum bisimulation.</p>
  <code language="python">&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; from bispy import compute_maximum_bisimulation</code>
  <p>After that we generate the graph, which as we mentioned before is a
  balanced tree with <italic>branching-factor</italic>=2 and
  <italic>depth</italic>=3. We also create a list of tuples that
  represents the labeling function which we employed in the example.</p>
  <code language="python">&gt;&gt;&gt; graph = nx.balanced_tree(2,3, create_using=nx.DiGraph)
&gt;&gt;&gt; labels = [(0,1,2,3,4,5,6,7,9,10,11,12,13),(8,14)]</code>
  <p>We can now compute the maximum bisimulation of the Kripke structure
  taken into account as follows:</p>
  <code language="python">&gt;&gt;&gt; compute_maximum_bisimulation(graph, labels)
[(4,5),(7,9,10,11,12,13),(8,14),(3,6),(0,),(1,2)]</code>
  <p>The visualization shown above has been drawn using the library .
  provides the requested output in the form of a list of tuples, each of
  which contains the labels of all the nodes that are members of an
  equivalence class of the maximum bisimulation.</p>
</sec>
<sec id="performance">
  <title>Performance</title>
  <p>We briefly examine some performance results on two different kinds
  of graphs:</p>
  <list list-type="bullet">
    <list-item>
      <p><italic>Balanced trees</italic>
      (<xref alt="Cormen et al., 2009" rid="ref-clrs" ref-type="bibr">Cormen
      et al., 2009</xref>) with variable branching factor
      <inline-formula><alternatives>
      <tex-math><![CDATA[r]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>r</mml:mi></mml:math></alternatives></inline-formula>
      and height <inline-formula><alternatives>
      <tex-math><![CDATA[h]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>h</mml:mi></mml:math></alternatives></inline-formula>,
      for which we are going to use the notation
      <inline-formula><alternatives>
      <tex-math><![CDATA[B_T(r,h)]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>r</mml:mi><mml:mo>,</mml:mo><mml:mi>h</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>;</p>
    </list-item>
    <list-item>
      <p><italic>Erd≈ës-R√©nyi graphs</italic>
      (<xref alt="2009" rid="ref-clrs" ref-type="bibr">2009</xref>),
      also called <italic>binomial graphs</italic>, whose set
      <inline-formula><alternatives>
      <tex-math><![CDATA[E]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>E</mml:mi></mml:math></alternatives></inline-formula>
      of edges is generated randomly (the cardinality
      <inline-formula><alternatives>
      <tex-math><![CDATA[|E|]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
      is roughly <inline-formula><alternatives>
      <tex-math><![CDATA[p|V|]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>p</mml:mi><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>).</p>
    </list-item>
  </list>
  <p>The first experiment involves balanced trees, and consists of the
  computation of the maximum bisimulation of trees with variable
  dimensions. The labeling set is the trivial partition of the set
  <inline-formula><alternatives>
  <tex-math><![CDATA[V]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>V</mml:mi></mml:math></alternatives></inline-formula>.
  The results are shown in the left side of
  <xref alt="Figure¬†2" rid="figU003Aperformance">Figure¬†2</xref>. The
  quantity that varies along the x-axis is
  <inline-formula><alternatives>
  <tex-math><![CDATA[|E| \log |V|]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo>log</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  since this allows the presentation of data in a more natural way.</p>
  <p>The performance complies with the expected complexity
  <inline-formula><alternatives>
  <tex-math><![CDATA[|E| \log |V|]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo>log</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>V</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>:
  for instance our implementation of Dovier-Piazza-Policriti takes about
  1.425 seconds to compute the maximum bisimulation on
  <inline-formula><alternatives>
  <tex-math><![CDATA[B_T(3,10)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>10</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>,
  and 12.596 seconds on <inline-formula><alternatives>
  <tex-math><![CDATA[B_T(3,12)]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>12</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:math></alternatives></inline-formula>.
  The value of the ratio <inline-formula><alternatives>
  <tex-math><![CDATA[\frac{|E_{B_T(3,12)}| \log |V_{B_T(3,12)}|}{|E_{B_T(3,10)}| \log |V_{B_T(3,10)}|}]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mfrac><mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>12</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo>log</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>12</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:msub><mml:mi>E</mml:mi><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>10</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo>log</mml:mo><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:msub><mml:mi>V</mml:mi><mml:mrow><mml:msub><mml:mi>B</mml:mi><mml:mi>T</mml:mi></mml:msub><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mn>10</mml:mn><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:mrow></mml:msub><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow></mml:mrow></mml:mfrac></mml:math></alternatives></inline-formula>
  is approximately 10.7, therefore the growth of the time function
  respects approximately the predicted behavior.</p>
  <p>Concerning binomial graphs, we fixed <inline-formula><alternatives>
  <tex-math><![CDATA[p=0.0005]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>p</mml:mi><mml:mo>=</mml:mo><mml:mn>0.0005</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  in order to obtain a graph of some practical interest (as
  <inline-formula><alternatives>
  <tex-math><![CDATA[p \to 1]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>p</mml:mi><mml:mo>‚Üí</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  the graph becomes complete, as <inline-formula><alternatives>
  <tex-math><![CDATA[p \to 0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mi>p</mml:mi><mml:mo>‚Üí</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>
  also <inline-formula><alternatives>
  <tex-math><![CDATA[|E| \to 0]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mrow><mml:mo stretchy="true" form="prefix">|</mml:mo><mml:mi>E</mml:mi><mml:mo stretchy="true" form="postfix">|</mml:mo></mml:mrow><mml:mo>‚Üí</mml:mo><mml:mn>0</mml:mn></mml:mrow></mml:math></alternatives></inline-formula>).
  This time we also consider Saha‚Äôs incremental algorithm, and we
  conduct the experiment as follows:</p>
  <list list-type="order">
    <list-item>
      <p>Generate a binomial graph with the aforementioned features;</p>
    </list-item>
    <list-item>
      <p>Compute the maximum bisimulation using Paige-Tarjan‚Äôs
      algorithm;</p>
    </list-item>
    <list-item>
      <p>Add a random edge to the graph;</p>
    </list-item>
    <list-item>
      <p>Compute the updated maximum bisimulation three times, using the
      three algorithms taken into account, and verify the time taken by
      each one.</p>
    </list-item>
  </list>
  <p>Since the experiment is not deterministic (the graph and the new
  edge are generated randomly) we evaluate and visualize the mean time
  taken by step 4 on a sample of 1000 iterations of steps 1-4.</p>
  <p>The knowledge of the old maximum bisimulation is of no interest for
  non-incremental algorithms. However Saha‚Äôs algorithm uses this input
  to reduce the number of steps: the goal of the second experiment is in
  fact to illustrate this improvement. The results are shown in the
  right side of
  <xref alt="Figure¬†2" rid="figU003Aperformance">Figure¬†2</xref>.</p>
  <fig>
    <caption><p>On the left side of the figure, the time taken by our
    implementations of Paige-Tarjan and Dovier-Piazza-Policriti to
    compute the maximum bisimulation of balanced trees with variable
    branching factor and height. On the right side, the time needed to
    update the maximum bisimulation of a binomial graph after the
    addition of a random edge (for this experiment we also consider
    Saha‚Äôs incremental
    algorithm).<styled-content id="figU003Aperformance"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="performance.png" xlink:title="" />
  </fig>
  <p>We ran the experiments on a workstation with operating system
  <italic>CentOS Linux</italic>, (x86<italic>64), processor Intel(R)
  Core(TM) i7-4790 CPU (4 cores, 3.60GHz), and 16 GB RAM. Graphs have
  been generated using functions from the Python package
  _NetworkX</italic>
  (<xref alt="Hagberg et al., 2008" rid="ref-networkx" ref-type="bibr">Hagberg
  et al., 2008</xref>). We measured time using the Python module
  <italic>timeit</italic>
  (<xref alt="Van Rossum &amp; Drake, 2009" rid="ref-pythondocs" ref-type="bibr">Van
  Rossum &amp; Drake, 2009</xref>).</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We acknowledge the support received from Alberto Casagrande during
  the preliminar theoretical study of the topic, as well as SISSA
  mathLab for providing the hardware used to perform experiments on
  large graphs.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-dovier">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Dovier</surname><given-names>Agostino</given-names></name>
          <name><surname>Piazza</surname><given-names>Carla</given-names></name>
          <name><surname>Policriti</surname><given-names>Alberto</given-names></name>
        </person-group>
        <article-title>A fast bisimulation algorithm</article-title>
        <source>International conference on computer aided verification</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2001">2001</year>
        <pub-id pub-id-type="doi">10.1007/3-540-44585-4_8</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-gentilini">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Gentilini</surname><given-names>Raffaella</given-names></name>
          <name><surname>Piazza</surname><given-names>Carla</given-names></name>
          <name><surname>Policriti</surname><given-names>Alberto</given-names></name>
        </person-group>
        <article-title>From bisimulation to simulation: Coarsest partition problems</article-title>
        <source>Journal of Automated Reasoning</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2003">2003</year>
        <volume>31</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1023/A:1027328830731</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-tarjan">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Tarjan</surname><given-names>Robert</given-names></name>
        </person-group>
        <article-title>Depth-first search and linear graph algorithms</article-title>
        <source>SIAM journal on computing</source>
        <publisher-name>SIAM</publisher-name>
        <year iso-8601-date="1972">1972</year>
        <volume>1</volume>
        <issue>2</issue>
        <pub-id pub-id-type="doi">10.1137/0201010</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-hopcroft">
      <element-citation publication-type="chapter">
        <person-group person-group-type="author">
          <name><surname>Hopcroft</surname><given-names>John</given-names></name>
        </person-group>
        <article-title>An n log n algorithm for minimizing states in a finite automaton</article-title>
        <source>Theory of machines and computations</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="1971">1971</year>
        <pub-id pub-id-type="doi">10.1016/B978-0-12-417750-5.50022-1</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-paigetarjan">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Paige</surname><given-names>Robert</given-names></name>
          <name><surname>Tarjan</surname><given-names>Robert E</given-names></name>
        </person-group>
        <article-title>Three partition refinement algorithms</article-title>
        <source>SIAM Journal on Computing</source>
        <publisher-name>SIAM</publisher-name>
        <year iso-8601-date="1987">1987</year>
        <volume>16</volume>
        <issue>6</issue>
        <pub-id pub-id-type="doi">10.1137/0216062</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-saha">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Saha</surname><given-names>Diptikalyan</given-names></name>
        </person-group>
        <article-title>An incremental bisimulation algorithm</article-title>
        <source>International conference on foundations of software technology and theoretical computer science</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2007">2007</year>
        <pub-id pub-id-type="doi">10.1007/978-3-540-77050-3_17</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-sharir">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Sharir</surname><given-names>Micha</given-names></name>
        </person-group>
        <article-title>A strong-connectivity algorithm and its applications in data flow analysis</article-title>
        <source>Computers &amp; Mathematics with Applications</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="1981">1981</year>
        <volume>7</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1016/0898-1221(81)90008-0</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-kanellakis">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kanellakis</surname><given-names>Paris C</given-names></name>
          <name><surname>Smolka</surname><given-names>Scott A</given-names></name>
        </person-group>
        <article-title>CCS expressions, finite state processes, and three problems of equivalence</article-title>
        <source>Information and computation</source>
        <publisher-name>Elsevier</publisher-name>
        <year iso-8601-date="1990">1990</year>
        <volume>86</volume>
        <issue>1</issue>
        <pub-id pub-id-type="doi">10.1016/0890-5401(90)90025-D</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-pythondocs">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Van Rossum</surname><given-names>Guido</given-names></name>
          <name><surname>Drake</surname><given-names>Fred L.</given-names></name>
        </person-group>
        <source>Python 3 reference manual</source>
        <publisher-name>CreateSpace</publisher-name>
        <publisher-loc>Scotts Valley, CA</publisher-loc>
        <year iso-8601-date="2009">2009</year>
        <isbn>1441412697</isbn>
      </element-citation>
    </ref>
    <ref id="ref-networkx">
      <element-citation publication-type="report">
        <person-group person-group-type="author">
          <name><surname>Hagberg</surname><given-names>Aric</given-names></name>
          <name><surname>Swart</surname><given-names>Pieter</given-names></name>
          <name><surname>S Chult</surname><given-names>Daniel</given-names></name>
        </person-group>
        <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
        <publisher-name>Los Alamos National Laboratory (LANL), Los Alamos, NM (United States)</publisher-name>
        <year iso-8601-date="2008">2008</year>
      </element-citation>
    </ref>
    <ref id="ref-clrs">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Cormen</surname><given-names>Thomas H.</given-names></name>
          <name><surname>Leiserson</surname><given-names>Charles E.</given-names></name>
          <name><surname>Rivest</surname><given-names>Ronald L.</given-names></name>
          <name><surname>Stein</surname><given-names>Clifford</given-names></name>
        </person-group>
        <source>Introduction to algorithms, 3rd edition</source>
        <publisher-name>MIT Press</publisher-name>
        <year iso-8601-date="2009">2009</year>
        <isbn>978-0-262-03384-8</isbn>
        <uri>http://mitpress.mit.edu/books/introduction-algorithms</uri>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>

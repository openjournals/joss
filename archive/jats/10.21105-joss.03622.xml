<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN"
                  "JATS-publishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
<front>
<journal-meta>
<journal-id></journal-id>
<journal-title-group>
<journal-title>Journal of Open Source Software</journal-title>
<abbrev-journal-title>JOSS</abbrev-journal-title>
</journal-title-group>
<issn publication-format="electronic">2475-9066</issn>
<publisher>
<publisher-name>Open Journals</publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">3622</article-id>
<article-id pub-id-type="doi">10.21105/joss.03622</article-id>
<title-group>
<article-title>BioProv - A provenance library for bioinformatics
workflows</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-8362-3195</contrib-id>
<string-name>Vinícius W. Salazar</string-name>
<xref ref-type="aff" rid="aff-1"/>
<xref ref-type="aff" rid="aff-4"/>
<xref ref-type="corresp" rid="cor-1"><sup>*</sup></xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-7513-7376</contrib-id>
<string-name>João Vitor Ferreira Cavalcante</string-name>
<xref ref-type="aff" rid="aff-2"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0001-9346-7651</contrib-id>
<string-name>Daniel de Oliveira</string-name>
<xref ref-type="aff" rid="aff-3"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-7562-1683</contrib-id>
<string-name>Fabiano Thompson</string-name>
<xref ref-type="aff" rid="aff-4"/>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-0870-3371</contrib-id>
<string-name>Marta Mattoso</string-name>
<xref ref-type="aff" rid="aff-1"/>
</contrib>
<aff id="aff-1">
<institution-wrap>
<institution>Department of Systems and Computer Engineering, COPPE,
Federal University of Rio de Janeiro</institution>
</institution-wrap>
</aff>
<aff id="aff-2">
<institution-wrap>
<institution>Bioinformatics Multidisciplinary Environment - BioME, IMD,
Federal University of Rio Grande do Norte</institution>
</institution-wrap>
</aff>
<aff id="aff-3">
<institution-wrap>
<institution>Institute of Computing, Fluminense Federal
University</institution>
</institution-wrap>
</aff>
<aff id="aff-4">
<institution-wrap>
<institution>Institute of Biology, Federal University of Rio de
Janeiro</institution>
</institution-wrap>
</aff>
</contrib-group>
<author-notes>
<corresp id="cor-1">* E-mail: <email></email></corresp>
</author-notes>
<pub-date date-type="pub" publication-format="electronic" iso-8601-date="2021-04-26">
<day>26</day>
<month>4</month>
<year>2021</year>
</pub-date>
<volume>6</volume>
<issue>67</issue>
<fpage>3622</fpage>
<permissions>
<copyright-statement>Authors of papers retain copyright and release the
work under a Creative Commons Attribution 4.0 International License (CC
BY 4.0)</copyright-statement>
<copyright-year>2021</copyright-year>
<copyright-holder>The article authors</copyright-holder>
<license license-type="open-access" xlink:href="https://creativecommons.org/licenses/by/4.0/">
<license-p>Authors of papers retain copyright and release the work under
a Creative Commons Attribution 4.0 International License (CC BY
4.0)</license-p>
</license>
</permissions>
<kwd-group kwd-group-type="author">
<kwd>W3C-PROV</kwd>
<kwd>BioPython</kwd>
<kwd>pipelines</kwd>
<kwd>reproducibility</kwd>
<kwd>PROV</kwd>
<kwd>JSON</kwd>
</kwd-group>
</article-meta>
</front>
<body>
<sec id="summary">
  <title>Summary</title>
  <p>In an era where it can be argued that all biology is computational
  biology
  (<xref alt="Markowetz, 2017" rid="ref-Markowetz2017" ref-type="bibr">Markowetz,
  2017</xref>), properly managing computational analyses and data is
  crucial to evaluate the findings of <italic>in silico</italic>
  experiments. A major aspect of best practices in scientific computing
  is managing the provenance of data analysis workflows
  (<xref alt="Irving et al., 2021" rid="ref-rse-py" ref-type="bibr">Irving
  et al., 2021</xref>;
  <xref alt="Pasquier et al., 2017" rid="ref-Pasquier2017" ref-type="bibr">Pasquier
  et al., 2017</xref>;
  <xref alt="Wilson et al., 2017" rid="ref-wilson2017good" ref-type="bibr">Wilson
  et al., 2017</xref>). The World Wide Web Consortium (W3C) Provenance
  Working Group defines provenance as “a record that describes the
  people, institutions, entities, and activities involved in producing,
  influencing, or delivering a piece of data or a thing”
  (<xref alt="Moreau &amp; Groth, 2013" rid="ref-Groth2013" ref-type="bibr">Moreau
  &amp; Groth, 2013</xref>).</p>
  <p>Therefore, for bioinformatics workflows (BWFs), where there are
  usually numerous steps in data processing, capturing and storing
  provenance rapidly becomes a challenge. This provenance data should
  not only be comprehensible to humans, but structured and queryable;
  this is to support reproducibility in present and future research in
  bioinformatics and many other fields of scientific research
  (<xref alt="Kanwal et al., 2017" rid="ref-Kanwal2017" ref-type="bibr">Kanwal
  et al., 2017</xref>;
  <xref alt="Pasquier et al., 2017" rid="ref-Pasquier2017" ref-type="bibr">Pasquier
  et al., 2017</xref>). A proposed standard for interoperability of
  provenance data is the
  <ext-link ext-link-type="uri" xlink:href="https://www.w3.org/TR/prov-dm/">W3C-PROV
  data model</ext-link>, specifically designed to share provenance data
  across the web and among diverse applications and systems. Adding
  provenance to BWFs can be costly to both developers, responsible for
  storing information about these workflows, and researchers designing
  and analyzing workflow results. While some workflow systems already
  provide provenance capturing, modelling bioinformatics data in
  compliance with W3C-PROV is not automatic, requiring great effort from
  workflow developers and researchers. We introduce BioProv as a library
  that aims to facilitate the creation of W3C-PROV compliant documents
  for BWFs, automatically capturing the provenance of workflow steps
  between different users and computing environments.</p>
  <sec id="w3c-prov">
    <title>W3C-PROV</title>
    <p>The W3C-PROV recommendation is endorsed by the
    <ext-link ext-link-type="uri" xlink:href="https://www.w3.org/Consortium">World
    Wide Web Consortium (W3C)</ext-link>, the leading global community
    for web standards. It divides provenance data into three separate
    views (<xref alt="Figure 1" rid="figU003Aw3c-prov">Figure 1</xref>):
    the data flow view, comprised of <bold>entities</bold>, that are any
    physical, digital or conceptual <italic>thing</italic>; the process
    flow view, that focuses on <bold>activities</bold>, that are
    <italic>processes</italic> that happen over time and act upon or
    with entities, either by consuming, processing, using, or generating
    them; and the responsibility view, that concerns the assignment of
    <bold>agents</bold> that are responsible for entities, activities,
    or other agents. These three elements of provenance have a set of
    seven relations between them, that can be further described by
    <italic>relation patterns</italic>. For a full introduction to the
    W3C-PROV standard, we recommend Moreau &amp; Groth
    (<xref alt="2013" rid="ref-Groth2013" ref-type="bibr">2013</xref>).</p>
    <fig>
      <caption><p>Schematic view of the W3C-PROV data model. Adapted
      from Moreau &amp; Groth
      (<xref alt="2013" rid="ref-Groth2013" ref-type="bibr">2013</xref>).
      <styled-content id="figU003Aw3c-prov"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figures/w3c-prov.png" xlink:title="" />
    </fig>
  </sec>
</sec>
<sec id="statement-of-need">
  <title>Statement of need</title>
  <p>BioProv is a Python library for <bold>generating provenance
  documents of bioinformatics workflows.</bold> The challenge of
  provenance capture in the field of bioinformatics has been
  characterized and is standing for more than a decade
  (<xref alt="Stevens et al., 2007" rid="ref-Stevens2007" ref-type="bibr">Stevens
  et al., 2007</xref>). Presently, there are many freely available tools
  for managing provenance through workflow systems
  (<xref alt="Afgan et al., 2018" rid="ref-afgan2018galaxy" ref-type="bibr">Afgan
  et al., 2018</xref>;
  <xref alt="Di Tommaso et al., 2017" rid="ref-DiTommaso2017" ref-type="bibr">Di
  Tommaso et al., 2017</xref>;
  <xref alt="Hull et al., 2006" rid="ref-hull2006taverna" ref-type="bibr">Hull
  et al., 2006</xref>;
  <xref alt="Köster &amp; Rahmann, 2012" rid="ref-Koster2012" ref-type="bibr">Köster
  &amp; Rahmann, 2012</xref>;
  <xref alt="Oliveira et al., 2012" rid="ref-de2012provenance" ref-type="bibr">Oliveira
  et al., 2012</xref>;
  <xref alt="Vivian et al., 2017" rid="ref-Vivian2017" ref-type="bibr">Vivian
  et al., 2017</xref>) and provenance systems for capturing and storing
  provenance data from workflow scripts
  (<xref alt="Khan et al., 2019" rid="ref-Khan2019" ref-type="bibr">Khan
  et al., 2019</xref>;
  <xref alt="Silva et al., 2018" rid="ref-Silva2018" ref-type="bibr">Silva
  et al., 2018</xref>). Several studies have been able to implement
  solutions that model BWFs and adequately capture and store provenance
  data
  (<xref alt="K. Ocaña et al., 2014" rid="ref-Ocana2014" ref-type="bibr">K.
  Ocaña et al., 2014</xref>;
  <xref alt="K. A. C. S. Ocaña et al., 2015" rid="ref-Ocana2015" ref-type="bibr">K.
  A. C. S. Ocaña et al., 2015</xref>;
  <xref alt="Paula et al., 2013" rid="ref-DePaula2013" ref-type="bibr">Paula
  et al., 2013</xref>). However, to the best of our knowledge, there is
  not yet any software library that <italic>specializes</italic> in
  capturing the provenance of BWFs. In the case of workflow management
  systems, they provide execution reports such as execution trace or
  graph, but these documents are not W3C-PROV compliant and/or are not
  serializable, or the collection of domain-specific information must be
  manually designed by the user with an <italic>ad hoc</italic>
  approach. Domain-specific data are particularly relevant in BWFs, as
  they can be used to help researchers make decisions and steer workflow
  parameters during runtime
  (<xref alt="Costa et al., 2013" rid="ref-Costa2013" ref-type="bibr">Costa
  et al., 2013</xref>). They refer to metadata that are characteristic
  of biological data formats, <italic>e.g.</italic> the distribution of
  the length of sequences in a nucleotide sequence file, or the number
  of nodes in a phylogenetic tree file. Implementing a system to capture
  these data can be very costly to both users and developers of BWFs, as
  most provenance capture software are generic and do not support, for
  example, parsing of biological data formats. This may imply the need
  to either manually develop specific parsing solutions for the files
  involved or to create database schemas that support domain-specific
  data. BioProv attempts to fill this gap, by providing features that
  support the specificities of bioinformatics applications and allow the
  automatic capture of provenance data and generation of documents in a
  W3C-PROV compliant format.</p>
</sec>
<sec id="features-and-data-modelling">
  <title>Features and data modelling</title>
  <sec id="overview">
    <title>Overview</title>
    <p>BioProv represents the provenance elements of a BWF into a class
    called <monospace>Project</monospace>, that represents the execution
    of a bioinformatics workflow (a sequence of programs) using a
    particular dataset. An instance of <monospace>Project</monospace> is
    composed by related samples, files and programs that are represented
    by corresponding classes from the BioProv library. The
    <monospace>Project</monospace> class has specific methods that allow
    for the user to specify the relationships between objects, such as a
    file, a biological sample or a computer program. Projects also carry
    information about agents, <italic>i.e.</italic> users and computing
    environments used to execute programs. In the context of BioProv, a
    “Project” is distinct from a “Workflow” in the sense that a Project
    refers to a particular set of samples and files and associated
    programs, while a Workflow refers to a sequence of programs that can
    be run on a set of adequate input files. A user can therefore use
    the same Workflow for multiple Projects. Because they are
    serializable in JSON and tabular formats, BioProv objects can be
    stored and shared across computing environments, and can be exported
    as W3C-PROV compliant documents, allowing better integration with
    web-based systems. The library can be used interactively, in an
    environment such as Jupyter
    (<xref alt="Ragan-Kelley et al., 2014" rid="ref-ragan2014jupyter" ref-type="bibr">Ragan-Kelley
    et al., 2014</xref>), or from the application’s command line
    interface (CLI). The CLI component of BioProv allows users to
    quickly launch custom workflows from the command line using the
    <monospace>bioprov &lt;workflow_name&gt;</monospace> command.</p>
    <fig>
      <caption><p>Architecture of a BioProv
      application.<styled-content id="figU003Aarchi"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figures/architecture-en.png" xlink:title="" />
    </fig>
    <p>BioProv is built on top of the BioPython
    (<xref alt="Cock et al., 2009" rid="ref-Cock2009" ref-type="bibr">Cock
    et al., 2009</xref>) library, which has the capacity to parse common
    bioinformatics file formats, and supports several file formats for
    both
    <ext-link ext-link-type="uri" xlink:href="https://biopython.org/wiki/SeqIO">sequence</ext-link>
    and
    <ext-link ext-link-type="uri" xlink:href="https://biopython.org/wiki/AlignIO">alignment</ext-link>
    data, allowing the user to easily extract domain data without having
    to write any parsers. Here we present some of the core features of
    BioProv, but for a more complete introduction, we recommend the
    package’s
    <ext-link ext-link-type="uri" xlink:href="https://github.com/vinisalazar/BioProv/blob/master/docs/tutorials/introduction.ipynb">tutorials</ext-link>
    in Jupyter Notebook format, that can also be launched
    <ext-link ext-link-type="uri" xlink:href="https://mybinder.org/v2/gh/vinisalazar/bioprov/master?filepath=docs%2Ftutorials%2F">via
    Binder</ext-link>, and the
    <ext-link ext-link-type="uri" xlink:href="https://bioprov.readthedocs.io/">documentation
    page</ext-link>. As example data, we provide five small bacterial
    genomes and a BLAST database that is a subset of MEGARES
    (<xref alt="Lakin et al., 2017" rid="ref-Lakin2017" ref-type="bibr">Lakin
    et al., 2017</xref>). These two datasets can be used to demonstrate
    the installation and to illustrate some of the core features of
    BioProv.</p>
  </sec>
  <sec id="classes">
    <title>Classes</title>
    <p>BioProv implements several classes in order to represent
    provenance data extracted from BWfs. Its object-oriented design
    allows for users to benefit from the flexibility of working with
    extensible Python objects, that are familiar to frameworks such as
    the libraries in the scientific Python stack: NumPy
    (<xref alt="Harris et al., 2020" rid="ref-Harris2020" ref-type="bibr">Harris
    et al., 2020</xref>), SciPy
    (<xref alt="Virtanen et al., 2020" rid="ref-Virtanen2020" ref-type="bibr">Virtanen
    et al., 2020</xref>), Matplotlib
    (<xref alt="Hunter, 2007" rid="ref-Hunter2007" ref-type="bibr">Hunter,
    2007</xref>), and others. The five main classes are:</p>
    <list list-type="bullet">
      <list-item>
        <p><monospace>Project</monospace>: The higher-level structure
        that represents core project information, like samples, files,
        and programs.</p>
      </list-item>
      <list-item>
        <p><monospace>Sample</monospace>: Describes biological samples.
        Contains collections of files and programs, and can group any
        sample attributes, such as collection date, collection site,
        type of sample (soil, water, tissue, <italic>etc.</italic>).</p>
      </list-item>
      <list-item>
        <p><monospace>File</monospace>: Describes computer files that
        may be associated with a Sample or Project.</p>
      </list-item>
      <list-item>
        <p><monospace>Program</monospace>: Describes programs that
        process and create files. Instances of
        <monospace>Program</monospace> are associated to instances of
        the <monospace>Parameter</monospace> and
        <monospace>Run</monospace> classes (the latter representing a
        program execution).</p>
      </list-item>
      <list-item>
        <p><monospace>Environment</monospace>: Describes an environment
        that was used to run a program, including environment variables
        and library versions.</p>
      </list-item>
    </list>
    <p>A <monospace>Project</monospace> instance is the top-level object
    in the BioProv library. It is composed by <bold>Samples</bold>,
    <bold>Files</bold>, and <bold>Programs</bold>. A
    <monospace>Sample</monospace> instance represents any biological
    sample, its attributes, and it is composed by <bold>Files</bold> and
    <bold>Programs</bold> that are associated with that particular
    sample. <bold>Files</bold> and <bold>Programs</bold> are associated
    with the <bold>Project</bold> when they contain or process
    information from multiple samples. In the provenance data model,
    instances of the <monospace>Project</monospace>,
    <monospace>Sample</monospace>, and <monospace>File</monospace>
    classes are represented as entities, and instances of
    <monospace>Program</monospace> are represented as activities.
    Instances of <monospace>Environment</monospace> are represented as
    agents that act on behalf of the current user.</p>
    <p>BioProv detects the current user and environment variables and
    stores them alongside the Project; each Program, when executed, is
    automatically associated with the current computing environment
    (<xref alt="Figure 3" rid="figU003Aclasses">Figure 3</xref>). This
    way, BioProv can represent which execution is associated with each
    user and environment, allowing for traceable collaborative work.</p>
    <p>These five classes constitute the basis of a BioProv project. The
    library captures provenance data through instances of these classes.
    For Samples, it stores the sample’s attributes, a collection of
    files, and a collection of programs. For both Files and Programs,
    relevant information is automatically captured, such as the start
    and end time of each program execution and file size of each file.
    Files containing biological sequences that are supported by
    BioPython can be parsed with the <bold>SeqFile</bold> class. This
    class inherits from File and can extract metadata about the file
    contents, such as number of sequences, number of base pairs, GC
    content (if it is a nucleotide file), and other metrics. This
    feature allows users to extract domain data for their provenance
    documents by using parsers available in BioPython.</p>
    <p>Programs in BioProv can be created manually or loaded as a
    preset. BioProv offers a few preset programs for common
    bioinformatics tasks, such as sequence alignment search, multiple
    sequence alignment, gene prediction and quantification of gene
    expression. Running a program with BioProv instead of directly from
    the command-line automatically captures provenance information for
    that execution. Some of the included programs are:</p>
    <list list-type="bullet">
      <list-item>
        <p><bold>BLAST+:</bold> sequence alignment search
        (<xref alt="Camacho et al., 2009" rid="ref-camacho2009blast" ref-type="bibr">Camacho
        et al., 2009</xref>)</p>
      </list-item>
      <list-item>
        <p><bold>Diamond:</bold> sequence alignment search
        (<xref alt="Buchfink et al., 2014" rid="ref-Buchfink2014" ref-type="bibr">Buchfink
        et al., 2014</xref>)</p>
      </list-item>
      <list-item>
        <p><bold>MAFFT:</bold> multiple sequence alignment
        (<xref alt="Katoh et al., 2005" rid="ref-Katoh2005" ref-type="bibr">Katoh
        et al., 2005</xref>)</p>
      </list-item>
      <list-item>
        <p><bold>Muscle:</bold> multiple sequence alignment
        (<xref alt="Edgar, 2004" rid="ref-Edgar2004" ref-type="bibr">Edgar,
        2004</xref>)</p>
      </list-item>
      <list-item>
        <p><bold>Prodigal:</bold> prokaryotic gene prediction
        (<xref alt="Hyatt et al., 2010" rid="ref-Hyatt2010" ref-type="bibr">Hyatt
        et al., 2010</xref>)</p>
      </list-item>
    </list>
    <fig>
      <caption><p>Diagram showing relationships between classes in the
      BioProv library. Each class is related to a PROV element, depicted
      above the class name. The color scheme is the same as in
      <xref alt="Figure 1" rid="figU003Aw3c-prov">Figure 1</xref>
      (entities in yellow, activities in blue, agents in orange).
      <styled-content id="figU003Aclasses"></styled-content></p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="figures/classes.png" xlink:title="" />
    </fig>
    <p>Users can create their own presets with either the Program class
    or the <monospace>PresetProgram</monospace> class, that inherits
    from <monospace>Program</monospace> and possesses additional methods
    for batch execution. To manually create programs (that are not
    presets), the user should create the program as it is called from
    the command line, and add <bold>Parameters</bold> to it. A
    <monospace>Parameter</monospace> is another BioProv class that
    represents specific parameters associated with a program. Presets
    contain parameters specific to that program. Parameters can be added
    to the command string that will be evaluated on the system’s shell,
    by means of Python’s
    <ext-link ext-link-type="uri" xlink:href="https://docs.python.org/3/library/subprocess.html"><monospace>subprocess</monospace>
    module</ext-link>. For a more complete walkthrough of how to build
    programs and add them to the workflow, please refer to the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/vinisalazar/BioProv/blob/master/docs/tutorials/introduction.ipynb">tutorials</ext-link>.
    Additionally, workflow presets can be created. Workflow presets are
    a sequence of programs which are to be executed on a project’s
    files. These presets can then be run using the library’s CLI, as
    their command-line arguments and parser are constructed
    automatically.</p>
  </sec>
  <sec id="workflow-execution-with-bioprov">
    <title>Workflow execution with BioProv</title>
    <p>To set up a workflow with BioProv to capture provenance data,
    users must either write a Python script and replace usual program
    calls with BioProv code, or launch custom or preexisting preset
    workflows from the CLI. Again, the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/vinisalazar/BioProv/blob/master/docs/tutorials/introduction.ipynb">tutorials</ext-link>
    and
    <ext-link ext-link-type="uri" xlink:href="https://bioprov.readthedocs.io/">documentation
    page</ext-link> are the best resources on how to do this. Once this
    is done, data must be imported as a BioProv project so the workflow
    can be executed. In the following section, we provide a brief
    demonstration of how to import data and run programs.</p>
    <sec id="importing-data">
      <title>Importing data</title>
      <p>There are a few ways to import and export data with BioProv. If
      a project has not been previously imported, the most convenient
      way to import it is by generating a table containing one sample
      per row, and columns with the path to each file associated with
      that sample. Columns that are not files will be processed as
      sample attributes. For example, assume the following table:</p>
      <table-wrap>
        <table>
          <thead>
            <tr>
              <th>sample-id</th>
              <th>assembly</th>
              <th>report</th>
              <th>source</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>sample_1</td>
              <td>contigs_1.fasta</td>
              <td>report_1.txt</td>
              <td>seawater</td>
            </tr>
            <tr>
              <td>sample_2</td>
              <td>contigs_2.fasta</td>
              <td>report_2.txt</td>
              <td>soil</td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <p>The <monospace>sample-id</monospace> column is our index,
      <italic>i.e.</italic> each sample is identified by it. The
      <monospace>assembly</monospace> column contains the path to the
      genome assembly of each sample (therefore, a “sequence file”). The
      <monospace>report</monospace> column points to a plain text file
      containing the assembly report (therefore, a “file”). The other
      columns will be parsed as sample attributes. This can be easily
      done with the <monospace>read_csv()</monospace> function:</p>
      <code language="python">In [1]: import bioprov as bp

In [2]: project = bp.read_csv(&quot;myTable.csv&quot;,
                              file_cols=&quot;report&quot;,
                              sequencefile_cols=&quot;assembly&quot;,
                              tag=&quot;myProject&quot;,
                              import_data=True)</code>
      <p>The table from which the data was sourced is automatically
      added as a Project file:</p>
      <code language="python">In [3]: project.files
Out[3]: {'project_csv': /home/user/myProject/myTable.csv}</code>
      <p>And Samples are created with associated files and
      attributes:</p>
      <code language="python">In [4]: project[&quot;sample_1&quot;]
Out[4]: Sample sample_1 with 2 file(s).

In [5]: project[&quot;sample_1&quot;].files
Out[5]: 
{'report': /home/user/myProject/report_1.txt,
 'assembly': /home/user/myProject/contigs_1.fasta}

In [6]: project[&quot;sample_1&quot;].attributes                                                                                                                                                                           
Out[6]: {'source': 'seawater'}</code>
      <p>Sequence metadata is extracted from sequence files, as set by
      the <monospace>import_data=True</monospace> parameter:</p>
      <code language="python">In [7]: project[&quot;sample_1&quot;].files[&quot;assembly&quot;].GC                                                                                                                                                                
Out[7]: 0.36442</code>
      <p>To run a program using BioProv, it must be added to the project
      or to a sample. We can use the preset
      <monospace>prodigal</monospace> program to illustrate this.
      Prodigal runs a gene prediction algorithm for prokaryotic genomes,
      and creates three output files:</p>
      <p>Now that the project is loaded, the user can add new files,
      samples and programs. Programs can run and execution provenance is
      captured (such as <bold>stdout</bold> and <bold>stderr</bold>,
      start and end time, and files involved).</p>
      <code language="python">In [8]: from bioprov.programs import prodigal

In [9]: project[&quot;sample_1&quot;].add_programs(prodigal)

In [10]: project[&quot;sample_1&quot;].run_programs()</code>
      <p>To export the project, there are a few options. The user can
      either:</p>
      <list list-type="bullet">
        <list-item>
          <p>export the project in a tabular format such as the one
          presented in <monospace>myTable.csv</monospace>. This omits
          project information (about programs, for example), but
          preserves information of samples and files. This action is
          done with the <monospace>Project.to_csv()</monospace>
          method;</p>
        </list-item>
        <list-item>
          <p>export the project as JSON, the preferred option, as
          BioProv can deserialize this format back into a
          <monospace>Project</monospace> object with all related
          information; This is done with the
          <monospace>Project.to_json()</monospace> method;</p>
        </list-item>
        <list-item>
          <p>store the project in BioProv’s database. BioProv has a
          builtin document-oriented database, as explained in the
          following section.</p>
        </list-item>
      </list>
      <code language="python">In [11]: project.to_csv()  # exports in tabular format

In [12]: project.to_json()  # exports as JSON

In [13]: project.update_db()  # stores in the BioProv database
Inserting new project 'myProject' in /path/to/bioprov/db.json                                                                                                                                                   </code>
    </sec>
  </sec>
  <sec id="database-system">
    <title>Database system</title>
    <p>BioProv has an internal database based on
    <ext-link ext-link-type="uri" xlink:href="https://tinydb.readthedocs.io/en/latest/">TinyDB</ext-link>,
    a document-oriented, pure Python database. Projects can be loaded by
    their ID (the <monospace>Project.tag</monospace> attribute) and can
    be updated during runtime, by setting the
    <monospace>Project.auto_update = True</monospace> option. Assuming
    the user has run the previous code example, this could be done in a
    new session:</p>
    <code language="python">In [1]: import bioprov as bp

In [2]: project = bp.load_project(&quot;myProject&quot;)  # call projects by their tag

In [3]: project.auto_update = True</code>
    <p>Now all future modifications to <monospace>myProject</monospace>
    will auto-update its record in BioProv’s database. The database can
    be managed from BioProv’s CLI application.</p>
    <p>To <bold>query</bold> an existing project, it must be loaded with
    the <monospace>load_project()</monospace> function, and it can then
    be queried with Python syntax. The Project’s
    <monospace>.samples</monospace>, <monospace>.files</monospace> and
    <monospace>.programs</monospace> attributes are Python dictionaries,
    and can be manipulated as so. A <monospace>Sample</monospace>
    instance will also contain <monospace>.files</monospace> and
    <monospace>.programs</monospace>, and additionally a
    <monospace>.attributes</monospace> dictionary with additional
    information about the sample (<italic>e.g.</italic> the
    <monospace>source</monospace> column in our data table). When
    iterating over a <monospace>Project</monospace> object, we can loop
    over each sample:</p>
    <code language="python">In [4]: for sample in project:
   ...:     # loop over samples
   ...:     source =  sample.attributes['source']
   ...:     print(sample.name, 'is a', source, 'sample.')
   ...:
   ...:     # make conditional statements
   ...:     if 'prodigal' in sample.program.keys():
   ...:         print(sample.name,
   ...:               'contains an instance of the Prodigal program.')</code>
    <preformat>sample_1 is a seawater sample.
sample_2 is a soil sample.
sample_1 contains an instance of the Prodigal program.</preformat>
    <p>Being able to query BioProv objects with Python syntax allows
    users familiar with the language to create custom queries and
    functions, and integrate BioProv into their existing Python
    applications. Additionally, it is possible to use a tool such as the
    <ext-link ext-link-type="uri" xlink:href="http://objectpath.org/">ObjectPath</ext-link>
    library, that implements a query language for semi-structured data,
    and is compatible with BioProv’s JSON outputs.</p>
  </sec>
  <sec id="command-line-application-and-workflows">
    <title>Command line application and workflows</title>
    <p>To use the CLI, after installing, type
    <monospace>bioprov</monospace> in the system’s Shell:</p>
    <preformat>~/ $ bioprov
usage: bioprov [-h]
               [--show_config | --show_provstore | --create_provstore |
                --show_db | --clear_db | -v | -l]
               {genome_annotation,blastn,kaiju} ...

BioProv command-line application. Choose a command to begin.

optional arguments:
  -h, --help            show this help message and exit
  --show_config         Show location of config file.
  --show_provstore      Show location of ProvStore credentials file.
  --create_provstore    Create ProvStore credentials file.
  --show_db             Show location of database file.
  --clear_db            Clears all records in database.
  -v, --version         Show BioProv version
  -l, --list            List Projects in the BioProv database.

workflows:
  {genome_annotation,blastn,kaiju}</preformat>
    <p>The <monospace>bioprov --show_db</monospace> and
    <monospace>bioprov --list</monospace> commands, for example, can be
    used to show the location of BioProv’s database and list all
    projects it contains. The <monospace>workflows</monospace> are
    preset sequences of programs that can be run directly from the CLI.
    They are implemented with BioProv’s <monospace>Workflow</monospace>
    class and handle the creation of the BioProv project while running
    the desired workflow. Users can write their own workflow and the
    command-line parser will be automatically generated based on the
    parameters set by the user. For more information, please refer to
    BioProv’s
    <ext-link ext-link-type="uri" xlink:href="https://github.com/vinisalazar/BioProv/tree/master/bioprov/workflows"><monospace>workflows</monospace>
    subpackage</ext-link>, where preset workflows are stored, or run the
    <monospace>bioprov &lt;workflow_name&gt;</monospace> command in the
    CLI for help about a particular workflow. Presently, BioProv
    workflows are limited, serving mainly as a reference for users to
    write their own workflows; one of the main future goals of the
    library is to support a range of common BWFs. We actively encourage
    users to contribute their workflows by following the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/vinisalazar/BioProv/blob/master/CONTRIBUTING.md">contributing
    guidelines</ext-link> or request one by opening an issue in the
    repository.</p>
  </sec>
</sec>
<sec id="provenance-documents">
  <title>Provenance documents</title>
  <p>To create W3C-PROV documents, BioProv utilizes the PROV library
  (<xref alt="Dong, 2020" rid="ref-Dong2020" ref-type="bibr">Dong,
  2020</xref>), and models its native objects onto the three PROV
  elements: <bold>entities</bold>, <bold>agents</bold>, and
  <bold>activities</bold> (Moreau &amp; Groth
  (<xref alt="2013" rid="ref-Groth2013" ref-type="bibr">2013</xref>)
  provide a detailed description of PROV concepts). To do this, a
  <monospace>BioProvDocument</monospace> object is created from
  <monospace>project</monospace>. A W3C-PROV compatible document is then
  created, with associated relationships between PROV elements for each
  object of the project. BioProv defines one “bundle” for the project,
  and one for each sample and user. Bundles are documents nested within
  the top-level <monospace>BioProvDocument</monospace>, used to describe
  individual entities (for the Sample bundles) or agents (for the user
  bundles). Computing environments are also regarded as agents, that
  <bold>act on behalf of</bold> users through <bold>activities</bold>
  (that correspond to BioProv’s <monospace>Program</monospace>
  instances). By leveraging the PROV library, the resulting document can
  be exported in a number of ways, such as graphical format and
  <ext-link ext-link-type="uri" xlink:href="https://www.w3.org/TR/prov-n/">PROV-N</ext-link>
  (a human-readable provenance format).</p>
  <p>The following code generates the
  <xref alt="Figure 4" rid="figU003Aproject">Figure 4</xref> and a
  PROV-N record.</p>
  <code language="python">In [5]: prov = bp.BioProvDocument(project)

In [6]: prov.write_provn()

In [7]: prov.dot.write_pdf(&quot;myProject.pdf&quot;)</code>
  <fig>
    <caption><p>Provenance graph created by BioProv with the PROV and
    PyDot libraries. This graph represents a Project containing two
    samples associated with bacterial genomes. The
    <monospace>prodigal</monospace> program uses the
    <monospace>assembly</monospace> file as input to create the
    <monospace>proteins</monospace>, <monospace>genes</monospace>, and
    <monospace>scores</monospace> files. The square shapes grouping sets
    of icons correspond to each bundle in the
    project.<styled-content id="figU003Aproject"></styled-content></p></caption>
    <graphic mimetype="image" mime-subtype="png" xlink:href="figures/bp_graph.png" xlink:title="" />
  </fig>
  <p>Lastly, <bold>BioProvDocuments</bold> can be uploaded to
  <ext-link ext-link-type="uri" xlink:href="https://openprovenance.org/store/">ProvStore</ext-link>,
  a web service for storage and visualization of W3C-PROV documents. The
  credentials to the ProvStore API are set with the
  <monospace>bioprov --create_provstore</monospace> command, and a
  document can be uploaded with the
  <monospace>upload_to_provstore()</monospace> method:</p>
  <code language="python">In [8]: prov.upload_to_provstore()</code>
  <p>This feature enables the immediate publication of provenance
  documents that have a uniform resource identifier (URI) through their
  ProvStore address. Future developments for further supporting the
  W3C-PROV standard in the field of bioinformatics should focus on
  integrating more web services, such as
  <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/Web/Search/entrezfs.html">NCBI
  Entrez</ext-link> and
  <ext-link ext-link-type="uri" xlink:href="https://www.wikidata.org/wiki/Wikidata:Main_Page">Wikidata</ext-link>,
  for continuous improvement of the reproducibility of BWFs.</p>
</sec>
<sec id="conclusion">
  <title>Conclusion</title>
  <p>We present a software library that allows users to create and run
  bioinformatics workflows while capturing provenance data during
  runtime, that can then be exported as W3C-PROV compliant documents.
  Provenance data can be imported and exported in widely-used and
  web-compatible formats, and this provenance is enriched with
  domain-specific data without much effort from the user. BioProv is
  written entirely in Python, benefitting from numerous existing
  libraries that complement it, and its objects can be extended and
  customized to suit users’ needs. This results in a simple, lightweight
  yet powerful library that can make Python workflows provenance-aware,
  setting BioProv as a valuable addition to the ecosystem of
  bioinformatics workflow tools.</p>
</sec>
<sec id="acknowledgements">
  <title>Acknowledgements</title>
  <p>We would like to thank the funding agencies CNPq, FAPERJ, and
  CAPES.</p>
</sec>
</body>
<back>
<ref-list>
  <ref-list>
    <ref id="ref-Buchfink2014">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Buchfink</surname><given-names>Benjamin</given-names></name>
          <name><surname>Xie</surname><given-names>Chao</given-names></name>
          <name><surname>Huson</surname><given-names>Daniel H.</given-names></name>
        </person-group>
        <article-title>Fast and sensitive protein alignment using DIAMOND</article-title>
        <year iso-8601-date="2014">2014</year>
        <issn>15487105</issn>
        <pub-id pub-id-type="doi">10.1038/nmeth.3176</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-afgan2018galaxy">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Afgan</surname><given-names>Enis</given-names></name>
          <name><surname>Baker</surname><given-names>Dannon</given-names></name>
          <name><surname>Batut</surname><given-names>Bérénice</given-names></name>
          <name><surname>Van Den Beek</surname><given-names>Marius</given-names></name>
          <name><surname>Bouvier</surname><given-names>Dave</given-names></name>
          <name><surname>Čech</surname><given-names>Martin</given-names></name>
          <name><surname>Chilton</surname><given-names>John</given-names></name>
          <name><surname>Clements</surname><given-names>Dave</given-names></name>
          <name><surname>Coraor</surname><given-names>Nate</given-names></name>
          <name><surname>Grüning</surname><given-names>Björn A</given-names></name>
          <string-name>others</string-name>
        </person-group>
        <article-title>The galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2018 update</article-title>
        <source>Nucleic acids research</source>
        <publisher-name>Oxford University Press</publisher-name>
        <year iso-8601-date="2018">2018</year>
        <volume>46</volume>
        <issue>W1</issue>
        <pub-id pub-id-type="doi">10.1093/nar/gkaa554</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-de2012provenance">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Oliveira</surname><given-names>Daniel de</given-names></name>
          <name><surname>Ocaña</surname><given-names>Kary ACS</given-names></name>
          <name><surname>Baião</surname><given-names>Fernanda</given-names></name>
          <name><surname>Mattoso</surname><given-names>Marta</given-names></name>
        </person-group>
        <article-title>A provenance-based adaptive scheduling heuristic for parallel scientific workflows in clouds</article-title>
        <source>Journal of grid Computing</source>
        <publisher-name>Springer</publisher-name>
        <year iso-8601-date="2012">2012</year>
        <volume>10</volume>
        <issue>3</issue>
        <pub-id pub-id-type="doi">10.1007/s10723-012-9227-2</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-rse-py">
      <element-citation publication-type="book">
        <person-group person-group-type="author">
          <name><surname>Irving</surname><given-names>Damien</given-names></name>
          <name><surname>Hertweck</surname><given-names>Kate</given-names></name>
          <name><surname>Johnston</surname><given-names>Luke</given-names></name>
          <name><surname>Ostblom</surname><given-names>Joel</given-names></name>
          <name><surname>Wickham</surname><given-names>Charlotte</given-names></name>
          <name><surname>Wilson</surname><given-names>Greg</given-names></name>
        </person-group>
        <source>Research software engineering with python: Building software that makes research possible</source>
        <publisher-name>CRC Press/Taylor; Francis</publisher-name>
        <year iso-8601-date="2021">2021</year>
        <isbn>978-0367698348</isbn>
      </element-citation>
    </ref>
    <ref id="ref-Costa2013">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Costa</surname><given-names>Flavio</given-names></name>
          <name><surname>Silva</surname><given-names>Vítor</given-names></name>
          <name><surname>De Oliveira</surname><given-names>Daniel</given-names></name>
          <name><surname>Ocaña</surname><given-names>Kary</given-names></name>
          <name><surname>Ogasawara</surname><given-names>Eduardo</given-names></name>
          <name><surname>Dias</surname><given-names>Jonas</given-names></name>
          <name><surname>Mattoso</surname><given-names>Marta</given-names></name>
        </person-group>
        <article-title>Capturing and querying workflow runtime provenance with PROV: A practical approach</article-title>
        <source>ACM International Conference Proceeding Series</source>
        <year iso-8601-date="2013">2013</year>
        <issue>April</issue>
        <isbn>9781450315999</isbn>
        <pub-id pub-id-type="doi">10.1145/2457317.2457365</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Stevens2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Stevens</surname><given-names>Robert</given-names></name>
          <name><surname>Zhao</surname><given-names>Jun</given-names></name>
          <name><surname>Goble</surname><given-names>Carole</given-names></name>
        </person-group>
        <article-title>Using provenance to manage knowledge of In Silico experiments</article-title>
        <source>Briefings in Bioinformatics</source>
        <year iso-8601-date="2007">2007</year>
        <volume>8</volume>
        <issue>3</issue>
        <issn>14675463</issn>
        <pub-id pub-id-type="doi">10.1093/bib/bbm015</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-hull2006taverna">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hull</surname><given-names>Duncan</given-names></name>
          <name><surname>Wolstencroft</surname><given-names>Katy</given-names></name>
          <name><surname>Stevens</surname><given-names>Robert</given-names></name>
          <name><surname>Goble</surname><given-names>Carole</given-names></name>
          <name><surname>Pocock</surname><given-names>Mathew R</given-names></name>
          <name><surname>Li</surname><given-names>Peter</given-names></name>
          <name><surname>Oinn</surname><given-names>Tom</given-names></name>
        </person-group>
        <article-title>Taverna: A tool for building and running workflows of services</article-title>
        <source>Nucleic acids research</source>
        <publisher-name>Oxford University Press</publisher-name>
        <year iso-8601-date="2006">2006</year>
        <volume>34</volume>
        <issue>suppl_2</issue>
      </element-citation>
    </ref>
    <ref id="ref-camacho2009blast">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Camacho</surname><given-names>Christiam</given-names></name>
          <name><surname>Coulouris</surname><given-names>George</given-names></name>
          <name><surname>Avagyan</surname><given-names>Vahram</given-names></name>
          <name><surname>Ma</surname><given-names>Ning</given-names></name>
          <name><surname>Papadopoulos</surname><given-names>Jason</given-names></name>
          <name><surname>Bealer</surname><given-names>Kevin</given-names></name>
          <name><surname>Madden</surname><given-names>Thomas L</given-names></name>
        </person-group>
        <article-title>BLAST+: architecture and applications</article-title>
        <source>BMC bioinformatics</source>
        <publisher-name>BioMed Central</publisher-name>
        <year iso-8601-date="2009">2009</year>
        <volume>10</volume>
        <issue>1</issue>
      </element-citation>
    </ref>
    <ref id="ref-Cock2009">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Cock</surname><given-names>Peter J. A.</given-names></name>
          <name><surname>Antao</surname><given-names>Tiago</given-names></name>
          <name><surname>Chang</surname><given-names>Jeffrey T.</given-names></name>
          <name><surname>Chapman</surname><given-names>Brad A.</given-names></name>
          <name><surname>Cox</surname><given-names>Cymon J.</given-names></name>
          <name><surname>Dalke</surname><given-names>Andrew</given-names></name>
          <name><surname>Friedberg</surname><given-names>Iddo</given-names></name>
          <name><surname>Hamelryck</surname><given-names>Thomas</given-names></name>
          <name><surname>Kauff</surname><given-names>Frank</given-names></name>
          <name><surname>Wilczynski</surname><given-names>Bartek</given-names></name>
          <name><surname>De Hoon</surname><given-names>Michiel J. L.</given-names></name>
        </person-group>
        <article-title>Biopython: Freely available Python tools for computational molecular biology and bioinformatics</article-title>
        <source>Bioinformatics</source>
        <year iso-8601-date="2009">2009</year>
        <issn>13674803</issn>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/btp163</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Ocana2014">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Ocaña</surname><given-names>Kary</given-names></name>
          <name><surname>Benza</surname><given-names>Silvia</given-names></name>
          <name><surname>De Oliveira</surname><given-names>Daniel</given-names></name>
          <name><surname>Dias</surname><given-names>Jonas</given-names></name>
          <name><surname>Mattoso</surname><given-names>Marta</given-names></name>
        </person-group>
        <article-title>Exploring large scale receptor-Ligand pairs in molecular docking workflows in HPC clouds</article-title>
        <source>Proceedings of the International Parallel and Distributed Processing Symposium, IPDPS</source>
        <year iso-8601-date="2014">2014</year>
        <isbn>9780769552088</isbn>
        <issn>23321237</issn>
        <pub-id pub-id-type="doi">10.1109/IPDPSW.2014.65</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Ocana2015">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Ocaña</surname><given-names>Kary A. C. S.</given-names></name>
          <name><surname>Oliveira</surname><given-names>Daniel de</given-names></name>
          <name><surname>Silva</surname><given-names>Vítor</given-names></name>
          <name><surname>Benza</surname><given-names>Silvia</given-names></name>
          <name><surname>Mattoso</surname><given-names>Marta</given-names></name>
        </person-group>
        <article-title>Exploiting the parallel execution of homology workflow alternatives in HPC compute clouds</article-title>
        <source>Lecture notes in computer science (including subseries lecture notes in artificial intelligence and lecture notes in bioinformatics)</source>
        <year iso-8601-date="2015">2015</year>
        <volume>8954</volume>
        <isbn>9783319228846</isbn>
        <issn>16113349</issn>
        <uri>http://link.springer.com/10.1007/978-3-319-22885-3{\_}29</uri>
        <pub-id pub-id-type="doi">10.1007/978-3-319-22885-3_29</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Virtanen2020">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
          <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
          <name><surname>Haberland</surname><given-names>Matt</given-names></name>
          <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
          <name><surname>Cournapeau</surname><given-names>David</given-names></name>
          <name><surname>Burovski</surname><given-names>Evgeni</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
          <name><surname>Bright</surname><given-names>Jonathan</given-names></name>
          <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
          <name><surname>Brett</surname><given-names>Matthew</given-names></name>
          <name><surname>Wilson</surname><given-names>Joshua</given-names></name>
          <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
          <name><surname>Mayorov</surname><given-names>Nikolay</given-names></name>
          <name><surname>Nelson</surname><given-names>Andrew R. J.</given-names></name>
          <name><surname>Jones</surname><given-names>Eric</given-names></name>
          <name><surname>Kern</surname><given-names>Robert</given-names></name>
          <name><surname>Larson</surname><given-names>Eric</given-names></name>
          <name><surname>Carey</surname><given-names>C. J.</given-names></name>
          <name><surname>Polat</surname><given-names>İlhan</given-names></name>
          <name><surname>Feng</surname><given-names>Yu</given-names></name>
          <name><surname>Moore</surname><given-names>Eric W.</given-names></name>
          <name><surname>VanderPlas</surname><given-names>Jake</given-names></name>
          <name><surname>Laxalde</surname><given-names>Denis</given-names></name>
          <name><surname>Perktold</surname><given-names>Josef</given-names></name>
          <name><surname>Cimrman</surname><given-names>Robert</given-names></name>
          <name><surname>Henriksen</surname><given-names>Ian</given-names></name>
          <name><surname>Quintero</surname><given-names>E. A.</given-names></name>
          <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
          <name><surname>Archibald</surname><given-names>Anne M.</given-names></name>
          <name><surname>Ribeiro</surname><given-names>Antônio H.</given-names></name>
          <name><surname>Pedregosa</surname><given-names>Fabian</given-names></name>
          <name><surname>Mulbregt</surname><given-names>Paul van</given-names></name>
          <name><surname>Vijaykumar</surname><given-names>Aditya</given-names></name>
          <name><surname>Bardelli</surname><given-names>Alessandro Pietro</given-names></name>
          <name><surname>Rothberg</surname><given-names>Alex</given-names></name>
          <name><surname>Hilboll</surname><given-names>Andreas</given-names></name>
          <name><surname>Kloeckner</surname><given-names>Andreas</given-names></name>
          <name><surname>Scopatz</surname><given-names>Anthony</given-names></name>
          <name><surname>Lee</surname><given-names>Antony</given-names></name>
          <name><surname>Rokem</surname><given-names>Ariel</given-names></name>
          <name><surname>Woods</surname><given-names>C. Nathan</given-names></name>
          <name><surname>Fulton</surname><given-names>Chad</given-names></name>
          <name><surname>Masson</surname><given-names>Charles</given-names></name>
          <name><surname>Häggström</surname><given-names>Christian</given-names></name>
          <name><surname>Fitzgerald</surname><given-names>Clark</given-names></name>
          <name><surname>Nicholson</surname><given-names>David A.</given-names></name>
          <name><surname>Hagen</surname><given-names>David R.</given-names></name>
          <name><surname>Pasechnik</surname><given-names>Dmitrii V.</given-names></name>
          <name><surname>Olivetti</surname><given-names>Emanuele</given-names></name>
          <name><surname>Martin</surname><given-names>Eric</given-names></name>
          <name><surname>Wieser</surname><given-names>Eric</given-names></name>
          <name><surname>Silva</surname><given-names>Fabrice</given-names></name>
          <name><surname>Lenders</surname><given-names>Felix</given-names></name>
          <name><surname>Wilhelm</surname><given-names>Florian</given-names></name>
          <name><surname>Young</surname><given-names>G.</given-names></name>
          <name><surname>Price</surname><given-names>Gavin A.</given-names></name>
          <name><surname>Ingold</surname><given-names>Gert Ludwig</given-names></name>
          <name><surname>Allen</surname><given-names>Gregory E.</given-names></name>
          <name><surname>Lee</surname><given-names>Gregory R.</given-names></name>
          <name><surname>Audren</surname><given-names>Hervé</given-names></name>
          <name><surname>Probst</surname><given-names>Irvin</given-names></name>
          <name><surname>Dietrich</surname><given-names>Jörg P.</given-names></name>
          <name><surname>Silterra</surname><given-names>Jacob</given-names></name>
          <name><surname>Webber</surname><given-names>James T.</given-names></name>
          <name><surname>Slavič</surname><given-names>Janko</given-names></name>
          <name><surname>Nothman</surname><given-names>Joel</given-names></name>
          <name><surname>Buchner</surname><given-names>Johannes</given-names></name>
          <name><surname>Kulick</surname><given-names>Johannes</given-names></name>
          <name><surname>Schönberger</surname><given-names>Johannes L.</given-names></name>
          <name><surname>de Miranda Cardoso</surname><given-names>José Vinícius</given-names></name>
          <name><surname>Reimer</surname><given-names>Joscha</given-names></name>
          <name><surname>Harrington</surname><given-names>Joseph</given-names></name>
          <name><surname>Rodríguez</surname><given-names>Juan Luis Cano</given-names></name>
          <name><surname>Nunez-Iglesias</surname><given-names>Juan</given-names></name>
          <name><surname>Kuczynski</surname><given-names>Justin</given-names></name>
          <name><surname>Tritz</surname><given-names>Kevin</given-names></name>
          <name><surname>Thoma</surname><given-names>Martin</given-names></name>
          <name><surname>Newville</surname><given-names>Matthew</given-names></name>
          <name><surname>Kümmerer</surname><given-names>Matthias</given-names></name>
          <name><surname>Bolingbroke</surname><given-names>Maximilian</given-names></name>
          <name><surname>Tartre</surname><given-names>Michael</given-names></name>
          <name><surname>Pak</surname><given-names>Mikhail</given-names></name>
          <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
          <name><surname>Nowaczyk</surname><given-names>Nikolai</given-names></name>
          <name><surname>Shebanov</surname><given-names>Nikolay</given-names></name>
          <name><surname>Pavlyk</surname><given-names>Oleksandr</given-names></name>
          <name><surname>Brodtkorb</surname><given-names>Per A.</given-names></name>
          <name><surname>Lee</surname><given-names>Perry</given-names></name>
          <name><surname>McGibbon</surname><given-names>Robert T.</given-names></name>
          <name><surname>Feldbauer</surname><given-names>Roman</given-names></name>
          <name><surname>Lewis</surname><given-names>Sam</given-names></name>
          <name><surname>Tygier</surname><given-names>Sam</given-names></name>
          <name><surname>Sievert</surname><given-names>Scott</given-names></name>
          <name><surname>Vigna</surname><given-names>Sebastiano</given-names></name>
          <name><surname>Peterson</surname><given-names>Stefan</given-names></name>
          <name><surname>More</surname><given-names>Surhud</given-names></name>
          <name><surname>Pudlik</surname><given-names>Tadeusz</given-names></name>
          <name><surname>Oshima</surname><given-names>Takuya</given-names></name>
          <name><surname>Pingel</surname><given-names>Thomas J.</given-names></name>
          <name><surname>Robitaille</surname><given-names>Thomas P.</given-names></name>
          <name><surname>Spura</surname><given-names>Thomas</given-names></name>
          <name><surname>Jones</surname><given-names>Thouis R.</given-names></name>
          <name><surname>Cera</surname><given-names>Tim</given-names></name>
          <name><surname>Leslie</surname><given-names>Tim</given-names></name>
          <name><surname>Zito</surname><given-names>Tiziano</given-names></name>
          <name><surname>Krauss</surname><given-names>Tom</given-names></name>
          <name><surname>Upadhyay</surname><given-names>Utkarsh</given-names></name>
          <name><surname>Halchenko</surname><given-names>Yaroslav O.</given-names></name>
          <name><surname>Vázquez-Baeza</surname><given-names>Yoshiki</given-names></name>
        </person-group>
        <article-title>SciPy 1.0: fundamental algorithms for scientific computing in Python</article-title>
        <source>Nature Methods</source>
        <year iso-8601-date="2020">2020</year>
        <issn>15487105</issn>
        <uri>https://arxiv.org/abs/1907.10121</uri>
        <pub-id pub-id-type="doi">10.1038/s41592-019-0686-2</pub-id>
        <pub-id pub-id-type="pmid">32015543</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Hunter2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hunter</surname><given-names>John D.</given-names></name>
        </person-group>
        <article-title>Matplotlib: A 2D Graphics Environment</article-title>
        <source>Computing in Science &amp; Engineering</source>
        <year iso-8601-date="2007">2007</year>
        <volume>9</volume>
        <issue>3</issue>
        <issn>1521-9615</issn>
        <uri>http://ieeexplore.ieee.org/document/4160265/</uri>
        <pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Harris2020">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Harris</surname><given-names>Charles R.</given-names></name>
          <name><surname>Millman</surname><given-names>K. Jarrod</given-names></name>
          <name><surname>Walt</surname><given-names>Stéfan J. van der</given-names></name>
          <name><surname>Gommers</surname><given-names>Ralf</given-names></name>
          <name><surname>Virtanen</surname><given-names>Pauli</given-names></name>
          <name><surname>Cournapeau</surname><given-names>David</given-names></name>
          <name><surname>Wieser</surname><given-names>Eric</given-names></name>
          <name><surname>Taylor</surname><given-names>Julian</given-names></name>
          <name><surname>Berg</surname><given-names>Sebastian</given-names></name>
          <name><surname>Smith</surname><given-names>Nathaniel J.</given-names></name>
          <name><surname>Kern</surname><given-names>Robert</given-names></name>
          <name><surname>Picus</surname><given-names>Matti</given-names></name>
          <name><surname>Hoyer</surname><given-names>Stephan</given-names></name>
          <name><surname>Kerkwijk</surname><given-names>Marten H. van</given-names></name>
          <name><surname>Brett</surname><given-names>Matthew</given-names></name>
          <name><surname>Haldane</surname><given-names>Allan</given-names></name>
          <name><surname>Río</surname><given-names>Jaime Fernández del</given-names></name>
          <name><surname>Wiebe</surname><given-names>Mark</given-names></name>
          <name><surname>Peterson</surname><given-names>Pearu</given-names></name>
          <name><surname>Gérard-Marchant</surname><given-names>Pierre</given-names></name>
          <name><surname>Sheppard</surname><given-names>Kevin</given-names></name>
          <name><surname>Reddy</surname><given-names>Tyler</given-names></name>
          <name><surname>Weckesser</surname><given-names>Warren</given-names></name>
          <name><surname>Abbasi</surname><given-names>Hameer</given-names></name>
          <name><surname>Gohlke</surname><given-names>Christoph</given-names></name>
          <name><surname>Oliphant</surname><given-names>Travis E.</given-names></name>
        </person-group>
        <article-title>Array programming with NumPy</article-title>
        <year iso-8601-date="2020">2020</year>
        <volume>585</volume>
        <issn>14764687</issn>
        <uri>https://arxiv.org/abs/2006.10256</uri>
        <pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id>
        <pub-id pub-id-type="pmid">32939066</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-DePaula2013">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Paula</surname><given-names>Renato de</given-names></name>
          <name><surname>Holanda</surname><given-names>Maristela</given-names></name>
          <name><surname>Gomes</surname><given-names>Luciana S. A.</given-names></name>
          <name><surname>Lifschitz</surname><given-names>Sergio</given-names></name>
          <name><surname>Walter</surname><given-names>Maria Emilia M. T.</given-names></name>
        </person-group>
        <article-title>Provenance in bioinformatics workflows.</article-title>
        <source>BMC bioinformatics</source>
        <publisher-name>BioMed Central</publisher-name>
        <year iso-8601-date="2013">2013</year>
        <volume>14 Suppl 1</volume>
        <issue>Suppl 11</issue>
        <issn>14712105</issn>
        <pub-id pub-id-type="doi">10.1186/1471-2105-14-S11-S6</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-DiTommaso2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Di Tommaso</surname><given-names>Paolo</given-names></name>
          <name><surname>Chatzou</surname><given-names>Maria</given-names></name>
          <name><surname>Floden</surname><given-names>Evan W.</given-names></name>
          <name><surname>Barja</surname><given-names>Pablo Prieto</given-names></name>
          <name><surname>Palumbo</surname><given-names>Emilio</given-names></name>
          <name><surname>Notredame</surname><given-names>Cedric</given-names></name>
        </person-group>
        <article-title>Nextflow enables reproducible computational workflows</article-title>
        <source>Nature Biotechnology</source>
        <year iso-8601-date="2017">2017</year>
        <volume>35</volume>
        <issue>4</issue>
        <issn>15461696</issn>
        <pub-id pub-id-type="doi">10.1038/nbt.3820</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Dong2020">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Dong</surname><given-names>Trung</given-names></name>
        </person-group>
        <article-title>PROV: A Python library for W3C Provenance Data Model</article-title>
        <source>GitHub repository</source>
        <publisher-name>GitHub</publisher-name>
        <year iso-8601-date="2020">2020</year>
      </element-citation>
    </ref>
    <ref id="ref-Edgar2004">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Edgar</surname><given-names>Robert C.</given-names></name>
        </person-group>
        <article-title>MUSCLE: Multiple sequence alignment with high accuracy and high throughput</article-title>
        <source>Nucleic Acids Research</source>
        <year iso-8601-date="2004">2004</year>
        <volume>32</volume>
        <issue>5</issue>
        <issn>03051048</issn>
        <pub-id pub-id-type="doi">10.1093/nar/gkh340</pub-id>
        <pub-id pub-id-type="pmid">15034147</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Vivian2017">
      <element-citation>
        <person-group person-group-type="author">
          <name><surname>Vivian</surname><given-names>John</given-names></name>
          <name><surname>Rao</surname><given-names>Arjun Arkal</given-names></name>
          <name><surname>Nothaft</surname><given-names>Frank Austin</given-names></name>
          <name><surname>Ketchum</surname><given-names>Christopher</given-names></name>
          <name><surname>Armstrong</surname><given-names>Joel</given-names></name>
          <name><surname>Novak</surname><given-names>Adam</given-names></name>
          <name><surname>Pfeil</surname><given-names>Jacob</given-names></name>
          <name><surname>Narkizian</surname><given-names>Jake</given-names></name>
          <name><surname>Deran</surname><given-names>Alden D.</given-names></name>
          <name><surname>Musselman-Brown</surname><given-names>Audrey</given-names></name>
          <name><surname>Schmidt</surname><given-names>Hannes</given-names></name>
          <name><surname>Amstutz</surname><given-names>Peter</given-names></name>
          <name><surname>Craft</surname><given-names>Brian</given-names></name>
          <name><surname>Goldman</surname><given-names>Mary</given-names></name>
          <name><surname>Rosenbloom</surname><given-names>Kate</given-names></name>
          <name><surname>Cline</surname><given-names>Melissa</given-names></name>
          <name><surname>O’Connor</surname><given-names>Brian</given-names></name>
          <name><surname>Hanna</surname><given-names>Megan</given-names></name>
          <name><surname>Birger</surname><given-names>Chet</given-names></name>
          <name><surname>Kent</surname><given-names>W. James</given-names></name>
          <name><surname>Patterson</surname><given-names>David A.</given-names></name>
          <name><surname>Joseph</surname><given-names>Anthony D.</given-names></name>
          <name><surname>Zhu</surname><given-names>Jingchun</given-names></name>
          <name><surname>Zaranek</surname><given-names>Sasha</given-names></name>
          <name><surname>Getz</surname><given-names>Gad</given-names></name>
          <name><surname>Haussler</surname><given-names>David</given-names></name>
          <name><surname>Paten</surname><given-names>Benedict</given-names></name>
        </person-group>
        <article-title>Toil enables reproducible, open source, big biomedical data analyses</article-title>
        <year iso-8601-date="2017">2017</year>
        <volume>35</volume>
        <issn>15461696</issn>
        <pub-id pub-id-type="doi">10.1038/nbt.3772</pub-id>
        <pub-id pub-id-type="pmid">28398314</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Groth2013">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Moreau</surname><given-names>Luc</given-names></name>
          <name><surname>Groth</surname><given-names>Paul</given-names></name>
        </person-group>
        <article-title>Provenance: An introduction to PROV</article-title>
        <source>Synthesis lectures on the semantic web: theory and technology</source>
        <publisher-name>Morgan &amp; Claypool Publishers</publisher-name>
        <year iso-8601-date="2013">2013</year>
        <volume>3</volume>
        <issue>4</issue>
        <pub-id pub-id-type="doi">10.2200/S00528ED1V01Y201308WBE007</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Hyatt2010">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Hyatt</surname><given-names>Doug</given-names></name>
          <name><surname>Chen</surname><given-names>Gwo-Liang</given-names></name>
          <name><surname>Locascio</surname><given-names>Philip F</given-names></name>
          <name><surname>Land</surname><given-names>Miriam L</given-names></name>
          <name><surname>Larimer</surname><given-names>Frank W</given-names></name>
          <name><surname>Hauser</surname><given-names>Loren J</given-names></name>
        </person-group>
        <article-title>Prodigal: prokaryotic gene recognition and translation initiation site identification.</article-title>
        <source>BMC bioinformatics</source>
        <year iso-8601-date="2010">2010</year>
        <volume>11</volume>
        <isbn>1471-2105 (Electronic)$\backslash$r1471-2105 (Linking)</isbn>
        <issn>1471-2105</issn>
        <uri>http://www.pubmedcentral.nih.gov/articlerender.fcgi?artid=2848648{\&amp;}tool=pmcentrez{\&amp;}rendertype=abstract</uri>
        <pub-id pub-id-type="doi">10.1186/1471-2105-11-119</pub-id>
        <pub-id pub-id-type="pmid">20211023</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Koster2012">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Köster</surname><given-names>Johannes</given-names></name>
          <name><surname>Rahmann</surname><given-names>Sven</given-names></name>
        </person-group>
        <article-title>Snakemake-a scalable bioinformatics workflow engine</article-title>
        <source>Bioinformatics</source>
        <year iso-8601-date="2012">2012</year>
        <volume>28</volume>
        <issue>19</issue>
        <issn>14602059</issn>
        <pub-id pub-id-type="doi">10.1093/bioinformatics/bts480</pub-id>
        <pub-id pub-id-type="pmid">29788404</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Lakin2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Lakin</surname><given-names>Steven M.</given-names></name>
          <name><surname>Dean</surname><given-names>Chris</given-names></name>
          <name><surname>Noyes</surname><given-names>Noelle R.</given-names></name>
          <name><surname>Dettenwanger</surname><given-names>Adam</given-names></name>
          <name><surname>Ross</surname><given-names>Anne Spencer</given-names></name>
          <name><surname>Doster</surname><given-names>Enrique</given-names></name>
          <name><surname>Rovira</surname><given-names>Pablo</given-names></name>
          <name><surname>Abdo</surname><given-names>Zaid</given-names></name>
          <name><surname>Jones</surname><given-names>Kenneth L.</given-names></name>
          <name><surname>Ruiz</surname><given-names>Jaime</given-names></name>
          <name><surname>Belk</surname><given-names>Keith E.</given-names></name>
          <name><surname>Morley</surname><given-names>Paul S.</given-names></name>
          <name><surname>Boucher</surname><given-names>Christina</given-names></name>
        </person-group>
        <article-title>MEGARes: An antimicrobial resistance database for high throughput sequencing</article-title>
        <source>Nucleic Acids Research</source>
        <publisher-name>Oxford University Press</publisher-name>
        <year iso-8601-date="2017-01">2017</year><month>01</month>
        <volume>45</volume>
        <issue>D1</issue>
        <issn>13624962</issn>
        <pub-id pub-id-type="doi">10.1093/nar/gkw1009</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Markowetz2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Markowetz</surname><given-names>Florian</given-names></name>
        </person-group>
        <article-title>All biology is computational biology</article-title>
        <source>PLoS Biology</source>
        <year iso-8601-date="2017">2017</year>
        <volume>15</volume>
        <issue>3</issue>
        <issn>15457885</issn>
        <pub-id pub-id-type="doi">10.1371/journal.pbio.2002050</pub-id>
        <pub-id pub-id-type="pmid">28278152</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Kanwal2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Kanwal</surname><given-names>Sehrish</given-names></name>
          <name><surname>Khan</surname><given-names>Farah Zaib</given-names></name>
          <name><surname>Lonie</surname><given-names>Andrew</given-names></name>
          <name><surname>Sinnott</surname><given-names>Richard O.</given-names></name>
        </person-group>
        <article-title>Investigating reproducibility and tracking provenance - A genomic workflow case study</article-title>
        <source>BMC Bioinformatics</source>
        <publisher-name>BioMed Central Ltd.</publisher-name>
        <year iso-8601-date="2017-07">2017</year><month>07</month>
        <volume>18</volume>
        <issue>1</issue>
        <issn>14712105</issn>
        <uri>http://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-017-1747-0</uri>
        <pub-id pub-id-type="doi">10.1186/s12859-017-1747-0</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Katoh2005">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Katoh</surname><given-names>Kazutaka</given-names></name>
          <name><surname>Kuma</surname><given-names>Kei Ichi</given-names></name>
          <name><surname>Toh</surname><given-names>Hiroyuki</given-names></name>
          <name><surname>Miyata</surname><given-names>Takashi</given-names></name>
        </person-group>
        <article-title>MAFFT version 5: Improvement in accuracy of multiple sequence alignment</article-title>
        <source>Nucleic Acids Research</source>
        <year iso-8601-date="2005">2005</year>
        <volume>33</volume>
        <issue>2</issue>
        <issn>03051048</issn>
        <pub-id pub-id-type="doi">10.1093/nar/gki198</pub-id>
        <pub-id pub-id-type="pmid">15661851</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Khan2019">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Khan</surname><given-names>Farah Zaib</given-names></name>
          <name><surname>Soiland-Reyes</surname><given-names>Stian</given-names></name>
          <name><surname>Sinnott</surname><given-names>Richard O.</given-names></name>
          <name><surname>Lonie</surname><given-names>Andrew</given-names></name>
          <name><surname>Goble</surname><given-names>Carole</given-names></name>
          <name><surname>Crusoe</surname><given-names>Michael R.</given-names></name>
        </person-group>
        <article-title>Sharing interoperable workflow provenance: A review of best practices and their practical application in CWLProv</article-title>
        <source>GigaScience</source>
        <year iso-8601-date="2019">2019</year>
        <volume>8</volume>
        <issue>11</issue>
        <issn>2047217X</issn>
        <pub-id pub-id-type="doi">10.1093/gigascience/giz095</pub-id>
        <pub-id pub-id-type="pmid">31675414</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Pasquier2017">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Pasquier</surname><given-names>Thomas</given-names></name>
          <name><surname>Lau</surname><given-names>Matthew K.</given-names></name>
          <name><surname>Trisovic</surname><given-names>Ana</given-names></name>
          <name><surname>Boose</surname><given-names>Emery R.</given-names></name>
          <name><surname>Couturier</surname><given-names>Ben</given-names></name>
          <name><surname>Crosas</surname><given-names>Mercè</given-names></name>
          <name><surname>Ellison</surname><given-names>Aaron M.</given-names></name>
          <name><surname>Gibson</surname><given-names>Valerie</given-names></name>
          <name><surname>Jones</surname><given-names>Chris R.</given-names></name>
          <name><surname>Seltzer</surname><given-names>Margo</given-names></name>
        </person-group>
        <article-title>If these data could talk</article-title>
        <source>Scientific Data</source>
        <year iso-8601-date="2017">2017</year>
        <volume>4</volume>
        <issn>20524463</issn>
        <pub-id pub-id-type="doi">10.1038/sdata.2017.114</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-ragan2014jupyter">
      <element-citation publication-type="paper-conference">
        <person-group person-group-type="author">
          <name><surname>Ragan-Kelley</surname><given-names>Min</given-names></name>
          <name><surname>Perez</surname><given-names>F</given-names></name>
          <name><surname>Granger</surname><given-names>B</given-names></name>
          <name><surname>Kluyver</surname><given-names>T</given-names></name>
          <name><surname>Ivanov</surname><given-names>P</given-names></name>
          <name><surname>Frederic</surname><given-names>J</given-names></name>
          <name><surname>Bussonnier</surname><given-names>M</given-names></name>
        </person-group>
        <article-title>The Jupyter/IPython architecture: a unified view of computational research, from interactive exploration to communication and publication.</article-title>
        <source>AGU fall meeting abstracts</source>
        <year iso-8601-date="2014">2014</year>
      </element-citation>
    </ref>
    <ref id="ref-Silva2018">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Silva</surname><given-names>Vítor</given-names></name>
          <name><surname>Oliveira</surname><given-names>Daniel de</given-names></name>
          <name><surname>Valduriez</surname><given-names>Patrick</given-names></name>
          <name><surname>Mattoso</surname><given-names>Marta</given-names></name>
        </person-group>
        <article-title>DfAnalyzer: Runtime Dataflow Analysis of Scientific Applications using Provenance</article-title>
        <year iso-8601-date="2018">2018</year>
        <volume>11</volume>
        <issue>12</issue>
        <uri>https://doi.org/10.14778/3229863.3236265</uri>
        <pub-id pub-id-type="doi">10.14778/3229863.3236265</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-Stevens2007">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Stevens</surname><given-names>Robert</given-names></name>
          <name><surname>Zhao</surname><given-names>Jun</given-names></name>
          <name><surname>Goble</surname><given-names>Carole</given-names></name>
        </person-group>
        <article-title>Using provenance to manage knowledge of In Silico experiments</article-title>
        <source>Briefings in Bioinformatics</source>
        <year iso-8601-date="2007">2007</year>
        <volume>8</volume>
        <issue>3</issue>
        <issn>14675463</issn>
        <pub-id pub-id-type="doi">10.1093/bib/bbm015</pub-id>
      </element-citation>
    </ref>
    <ref id="ref-wilson2017good">
      <element-citation publication-type="article-journal">
        <person-group person-group-type="author">
          <name><surname>Wilson</surname><given-names>Greg</given-names></name>
          <name><surname>Bryan</surname><given-names>Jennifer</given-names></name>
          <name><surname>Cranston</surname><given-names>Karen</given-names></name>
          <name><surname>Kitzes</surname><given-names>Justin</given-names></name>
          <name><surname>Nederbragt</surname><given-names>Lex</given-names></name>
          <name><surname>Teal</surname><given-names>Tracy K</given-names></name>
        </person-group>
        <article-title>Good enough practices in scientific computing</article-title>
        <source>PLOS Computational Biology</source>
        <publisher-name>Public Library of Science</publisher-name>
        <year iso-8601-date="2017">2017</year>
        <volume>13</volume>
        <issue>6</issue>
        <pub-id pub-id-type="doi">10.1371/journal.pcbi.1005510</pub-id>
      </element-citation>
    </ref>
  </ref-list>
</ref-list>
</back>
</article>
